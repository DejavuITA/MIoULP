%!PS-Adobe-2.0
%%Creator: dvips(k) 5.995 Copyright 2015 Radical Eye Software
%%Title: davide_bazzanella.dvi
%%CreationDate: Fri Apr  8 19:10:42 2016
%%Pages: 13
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%DocumentFonts: CMBX12 CMCSC10 CMR17 CMR12 CMMI12 CMSY10 CMMI8 CMR8
%%+ CMSY8 CMEX10 CMMI6
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -o davide_bazzanella.ps davide_bazzanella.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2016.04.08:1910
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 919 2014-05-19 18:42:47Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.23, 2014/07/31
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def

%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 919 2014-05-19 18:42:47Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.04, 2013/10/26
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 801 2013-07-09 18:10:41Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 40 2014-07-25 06:46:27Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not aload!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-eucl.pro 0 0
%!
% PostScript prologue for pst-eucl.tex.
% Version 1.01 2012/09/21
% For distribution, see pstricks.tex.
%
/tx@EcldDict 40 dict def tx@EcldDict begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Pi
/Pi 3.14159265359 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% e
/E 2.718281828459045 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> true (if |x| < 1E-6)
/ZeroEq { abs 1E-6 lt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> a b c (ax-by+c=0 with a^2+b^2=1)
/EqDr {
  4 copy 3 -1 roll sub 7 1 roll exch sub 5 1 roll 4 -1 roll
  mul 3 1 roll mul exch sub
  2 index dup mul 2 index dup mul add sqrt
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch pop
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% orthogonal projection of M1 onto (OM2)
%% x1 y1 x2 y2 -> x3 y3
/Project {
  2 copy dup mul exch dup mul add 5 1 roll 2 copy 5 -1 roll mul exch
  5 -1 roll mul add 4 -1 roll div dup 4 -1 roll mul exch 3 -1 roll mul
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c (ax2+bx+c=0) -> x1 y1
/SolvTrin {
  /c exch def /b exch def /a exch def
  b dup mul a c mul 4 mul sub dup 0 lt
  { pop 0 0 } %% no solutions
  {sqrt dup b neg add a 2 mul div exch b add neg 2 a mul div }
  ifelse } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> Dist
/ABDist { 3 -1 roll sub dup mul 3 1 roll sub dup mul add sqrt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> x2-x1  y2-y1
/ABVect { 3 -1 roll exch sub 3 1 roll sub exch } bind def
%/ABVect { 3 -1 roll sub 3 1 roll exch sub exch } bind def  %% wrong version
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 x3 y3 x4 y4 -> x y
/InterLines {
  EqDr /D1c exch def /D1b exch def /D1a exch def
  EqDr /D2c exch def /D2b exch def /D2a exch def
  D1a D2b mul D1b D2a mul sub dup ZeroEq
%   { pop pop pop 0 0 } %% parallel lines  % --- hv 20110714
   { pop 0 0 } %% parallel lines             --- hv 20110714
   {
    /Det exch def
    D1b D2c mul D1c D2b mul sub Det div
    D1a D2c mul D2a D1c mul sub Det div
   } ifelse  } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c R -> x1 y1 x2 y2
/InterLineCircle {
  /CR exch def /Dc exch def neg /Db exch def /Da exch def
  ABVect /Vy exch def /Vx exch def
  %% Dc==0 then O belong to the line
  %% First project O on the line -> M (-ca;-cb)
  %% l'abscisse de M sur (OM) divisee par R donne le cosinus
  %Dc neg dup Db mul exch Da mul 2 copy 0 0
  %ABDist dup CR gt { pop pop pop 0 0 0 0 }
  %{ ZeroEq { pop pop Db Da } if Atan /alpha exch def
  Dc abs CR gt { 0 0 0 0 } 
  { Db neg Da neg Atan /alpha exch def
  Dc CR div dup dup mul 1 exch sub sqrt exch Atan /beta exch def
  alpha beta add dup cos CR mul exch sin CR mul
  alpha beta sub dup cos CR mul exch sin CR mul
  4 copy ABVect Vy mul 0 le exch Vx mul 0 le and
  { 4 2 roll } if } ifelse
 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% R R' OO' -> x1 y1 x2 y2
/InterCircles {
  /OOP exch def /CRP exch def /CR exch def
  OOP dup mul CRP dup mul sub CR dup mul add OOP div 2 div
  dup dup mul CR dup mul exch sub dup
  0 lt { pop pop 0 0 0 0 } { sqrt 2 copy neg } ifelse
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x y theta -> x' y' (rotation of theta)
/Rotate {
  dup sin /sintheta exch def cos /costheta exch def /y exch def /x exch def
  x costheta mul y sintheta mul sub
  y costheta mul x sintheta mul add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% N -> x y
/GetNode {
  tx@NodeDict begin
    tx@NodeDict 1 index known { load GetCenter } { pop 0 0 } ifelse
  end
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> ch(x)
/ch { dup Ex exch neg Ex add 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> sh(x)
/sh { dup Ex exch neg Ex sub 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> e^(x)
/Ex { E exch exp } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x f g -> x y n
/NewtonSolving {
  /g exch def /f exch def 0
  { %%% STACK: x0 n
    1 add exch %% one more loop
    dup ZeroEq
    { dup 0.0005 add fgeval
      1 index 0.0005 sub fgeval sub .001 div }
    { dup 1.0005 mul fgeval
      1 index 0.9995 mul fgeval sub .001 2 index mul div } ifelse  %%% STACK: n x0 fg'(x0)
    %%% compute x1=x0-fg(x0)/fg'(x0)
    1 index fgeval exch div dup 4 1 roll sub exch %% stack: dx x0 n
    3 -1 roll ZeroEq              %% exit if root found
    1 index 100 eq or { exit } if %% or looping for more than 100 times
  } loop
  dup 100 lt { exch dup /x exch def f } { pop 0 0 } ifelse
  3 -1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/fgeval { /x exch def f g sub } bind def
end
% END ps-euclide.pro

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2014/07/30 $
% Version         : 0.63 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 37 2014-07-22 13:52:12Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: pst-func.pro 0 0
%% $Id: pst-func.pro 918 2014-05-19 12:32:37Z herbert $
%%
%% This is file `pst-func.pro',
%%
%% IMPORTANT NOTICE:
%%
%% Package `pst-func'
%%
%% Herbert Voss <hvoss@tug.org>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% DESCRIPTION:
%%   `pst-func' is a PSTricks package to plot special math functions
%%
%%
%% version 0.16 / 2014-05-07  Herbert Voss
%
/tx@FuncDict 100 dict def
tx@FuncDict begin
%
/eps1 1.0e-05 def
/eps2 1.0e-04 def
/eps8 1.0e-08 def
%
/PiHalf 1.57079632679489661925640 def
/CEuler 0.5772156649 def % Euler-Mascheroni constant
%
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/Pascal [
  [                   1                   ] % 0
  [                 1   1                 ] % 1
  [               1   2   1               ] % 2
  [             1   3   3   1             ] % 3
  [           1   4   6   4   1           ] % 4
  [         1   5  10  10   5   1         ] % 5
  [       1   6  15  20  15   6   1       ] % 6
  [     1   7  21  35  35  21   7   1     ] % 7
  [   1   8  28  56  70  56  28  8    1   ] % 8
  [ 1   9  36  84 126 126  84  36  9    1 ] % 9
] def
%
/GetBezierCoor { 				% t on stack
  10 dict begin					% hold all local
  /t ED
  /t1 1 t sub def				% t1=1-t
  /Coeff Pascal BezierType get def		% get the coefficients
    0 0						% initial values for x y
    BezierType -1 0 {				% BezierType,...,2,1,0
      /I ED					% I=BezierType,...,2,1,0
      /J BezierType I sub def			% J=0,1,2,...,BezierType
      /T t I exp Coeff J get mul def		% coeff(J)*t^I
      /T1 t1 J exp def				% t1^J  
      Points I dup add 1 add get		% y(2*I+1)
      T mul T1 mul add				% the y coordinate
      exch					% y x	
      Points I dup add get			% x(2*I)
      T mul T1 mul add				% the x coordinate
      exch					% x y	
    } for					% x y on stack
  end
} def

/BezierCurve { % on stack [ coors psk@plotpoints BezierType
%  10 dict begin
  /BezierType ED                        % 2,3,4,5,6,...
  1 exch div /epsilon ED                % step for Bezier =1/plotpoints
  ]                                     % [ yi xi ... y3 x3 y2 x2 y1 x1 y0 x0]
  ps@ReverseOrderOfPoints               % [y0 x0 y1 x1 ... yi xi]
  /Points ED 				% save Points array
  epsilon GetBezierCoor 		% next Bezier point
  Points 0 get Points 1 get 		% starting point
  ArrowA lineto 
  epsilon epsilon 1 epsilon sub { % on stack is the loop variable
    GetBezierCoor lineto 
  } for 
  1 epsilon sub GetBezierCoor  
  1 GetBezierCoor  
  ArrowB lineto moveto
%  end
} def

/Bernstein { % on stack tStart tEnd plotpoints i n
  12 dict begin				% hold all local
  /envelope ED				% plot envelope?
  /n ED 
  /i ED
  /ni n i sub def  
  /epsilon ED				% step=1/plotpoints
  /tEnd ED
  /tStart ED
%
% B_{i,n}(t)=\binom{n}{i}t^i(1-t)^{n-i}      (Bernstein)
% f_n(x)=\frac{1}{\sqrt{\pi n\cdot x(1-x)}}  (envelope)
%
  n i MoverN /noveri ED			% \binom{n}{i}
  [					% for the array of points
  tStart epsilon tEnd {
    dup dup /t ED			% leave one on stack
    neg 1 add /t1 ED			% t1=1-t
    envelope 
      { t t1 mul 4 mul PiHalf mul n mul sqrt 1 exch Div }	% envelope
      { noveri t i exp mul t1 ni exp mul } ifelse 	% t f(t)
    ScreenCoor				% convert to screen coor
  } for
  end
  false /Lineto /lineto load def Line
} def
%
/Si { % integral sin from 0 to x (arg on stack)
  /arg exch def
  /Sum arg def
  /sign -1 def
  /index 3 def
  { 
    arg index exp index div index factorial div sign mul 
    dup abs eps8 lt { pop exit } if 
    Sum add /Sum exch def
    /sign sign neg def
    /index index 2 add def
  } loop
  Sum
} def
/si { % integral sin from x to infty -> si(x)=Si(x)-pi/2
  Si PiHalf sub
} def
/Ci { % integral cosin from x to infty (arg on stack)
  abs /arg exch def
  arg 0 eq { 0 } { 
    /argExp 1 def
    /fact 1 def
    /Sum CEuler arg ln add def
    /sign -1 def
    /index 2 def
    { 
      /argExp argExp arg arg mul mul def
      /fact fact index 1 sub index mul mul def
      argExp index div fact div sign mul 
      dup abs exch Sum add /Sum exch def
      eps8 lt { exit } if
      /sign sign neg def
      /index index 2 add def
    } loop
    Sum
  } ifelse
} def
/ci { % integral cosin from x to infty -> ci(x)=-Ci(x)+ln(x)+CEuler
  dup Ci neg exch abs ln add CEuler add
} def
%
/MaxIter 255 def
/func { coeff Derivation FuncValue } def
/func' { coeff Derivation 1 add FuncValue } def
/func'' { coeff Derivation 2 add FuncValue } def
%
/NewtonMehrfach {% the start value must be on top of the stack
  /Nx exch def 
  /Iter 0 def
  {
    /Iter Iter 1 add def
    Nx func /F exch def % f(Nx)
    F abs eps2 lt { exit } if
    Nx func' /FS exch def % f'(Nx) 
    FS 0 eq { /FS 1.0e-06 def } if
    Nx func'' /F2S exch def % f''(Nx)
    1.0 1.0 F F2S mul FS dup mul div sub div /J exch def
    J F mul FS div /Diff exch def 
    /Nx Nx Diff sub def
    Diff abs eps1 lt Iter MaxIter gt or { exit } if 
  } loop 
  Nx % the returned value ist the zero point
} def

/Steffensen {% the start value must be on top of the stack
  /y0 exch def % the start value
  /Iter 0 def   /MaxIter 200 def
  { pstack
    y0 func /F exch def
    F abs eps2 lt { exit } if
    y0 F sub /Phi exch def
    Phi func /F2 exch def
    F2 abs eps2 le { exit }{
      Phi y0 sub dup mul Phi F2 sub 2 Phi mul sub y0 add Div /Diff exch def
      y0 Diff sub /y0 exch def
      Diff abs eps1 le { exit } if
    } ifelse
    /Iter Iter 1 add def
    Iter MaxIter gt { exit } if
  } loop
  y0 28 mul % the returned value ist the zero point
  0  
  3 0 360 arc gsave 0 0 1 setrgbcolor fill grestore 1 setlinewidth stroke
} def 
%
/Horner {% x [coeff] must be on top of the stack
  aload length
  dup 2 add -1 roll
  exch 1 sub {
    dup 4 1 roll
    mul add exch
  } repeat
  pop % the y value is on top of the stack
} def
%
/FuncValue {% x [coeff] Derivation must be on top of the stack
  {
    aload 			% a0 a1 a2 ... a(n-1) [array]
    length                      % a0 a1 a2 ... a(n-1) n
    1 sub /grad exch def        % a0 a1 a2 ... a(n-1) 
    grad -1 1 {                 % for n=grad step -1 until 1
      /n exch def               % Laufvariable speichern
      n                         % a0 a1 a2 ... a(n-1) n
      mul                       % a0 a1 a2 ... a(n-1)*n 
      grad 1 add                % a0 a1 a2 ... a(n-1)*n grad+1 
      1 roll                    % an*na0 a1 a2 ... a(n-2)
    } for
    pop                         % loesche a0
    grad array astore           % [ a1 a2 ... a(n-2)]
  } repeat
  Horner
} def
%
/FindZeros { % dxN dxZ must be on top of the stack (x0..x1 the intervall) => []
  12 dict begin 
  /dxZ exch def /dxN exch def
  /pstZeros [] def 
  x0 dxZ x1 { % suche Nullstellen
    /xWert exch def
    xWert NewtonMehrfach 
    %xWert Steffensen 
    /xNull exch def 
    pstZeros aload length /Laenge exch def % now test if value is a new one
    Laenge 0 eq 
      { xNull 1 }
      { /newZero true def
        Laenge {
	  xNull sub abs dxN lt { /newZero false def } if
        } repeat
	pstZeros aload pop
        newZero { xNull Laenge 1 add } { Laenge } ifelse } ifelse
    array astore 
    /pstZeros exch def
  } for
  pstZeros  % the end array is now on the stack
  end
} def
%
/Simpson { % on stack must be a b M   --- simple version ---
% /SFunc must be defined 
  /M ED /b ED /a ED
  /h b a sub M 2 mul div def
  /s1 0 def
  /s2 0 def
  1 1 M {
    /k exch def
    /x k 2 mul 1 sub h mul a add def
    /s1 s1 x SFunc add def
  } for
  1 1 M 1 sub {
    /k exch def
    /x k 2 mul h mul a add def
    /s2 s2 x SFunc add def
  } for
  /I a SFunc b SFunc add s1 4 mul add s2 2 mul add 3 div h mul def
} def
%
/LogGamma { 5 dict begin	% z on stack
  /z ED
  /sum 0 def
  /k 1 def
  {
    z k div dup 1 add ln sub dup
    abs eps8 lt { pop exit } if
    sum add /sum exch def
    /k k 1 add def
  } loop
  sum z ln sub CEuler z mul sub
  end 
} def
%
/ChebyshevT { 5 dict begin	% z on stack
  /xtmp exch def
  /n exch def
  0 0 1 n .5 mul floor {
     /k exch def
     xtmp xtmp mul 1 sub k exp
     xtmp n 2 k mul sub exp mul
     n 2 k mul MoverN mul
     add
  } for
  end
} def
%
/ChebyshevU {5 dict begin	% z on stack
  /xtmp exch def
  /n exch def
  0 0 1 n .5 mul floor {
    /k exch def
    xtmp xtmp mul 1 sub k exp
    xtmp n 2 k mul sub exp mul
    n 1 add 2 k mul 1 add MoverN mul
    add
  } for
  end
} def
%
/vasicek{           %density=sqrt((1-R2)/R2)*exp(1/2*(norminv(x)2 - (1/sqrt(R2)*((sqrt(1-R2)*norminv(x)-norminv(pd)))2))
  2 dict begin
  /pd where { pop }{ /pd 0.22 def } ifelse    % element of (0,1) probability of default of portfolio  
  /R2 where { pop }{ /R2 0.11 def } ifelse    % element of (0,1) R_Squared of portfolio
  dup                 % x   x
  norminv             % x   norminv(x)
  dup mul             % x   norminv(x)^2
  exch                % norminv(x)2   x
  norminv             % norminv(x)2   norminv(x)
  1 R2 sub sqrt mul   % norminv(x)2   sqrt(1-R2)*norminv(x)
  pd norminv sub      % norminv(x)2   sqrt(1-R2)*norminv(x)-norminv(pd)
  R2 sqrt div         % norminv(x)2   1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd))
  dup mul             % norminv(x)2  (1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd)))2
  sub                 % norminv(x)2 -(1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd)))2
  2 div               % 1/2*(norminv(x)2 -(1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd)))2)
  ENeperian exch exp  % exp(1/2*(norminv(x)2 -(1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd)))2)
  1 R2 sub            % exp(1/2*(norminv(x)2 -(1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd)))2)   1-R2
  R2 div              % exp(1/2*(norminv(x)2 -(1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd)))2)   (1-R2)/R2
  sqrt                % exp(1/2*(norminv(x)2 -(1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd)))2)   sqrt((1-R2)/R2)
  mul                 % sqrt((1-R2)/R2)*exp(1/2*(norminv(x)2 - (1/sqrt(R2)*((sqrt(1-R2)*norminv(x)-norminv(pd)))2))
  end
} def
%end{vasicek density}
%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def
%
end

%%EndProcSet
%%BeginProcSet: pst-intersect.pro 0 0
%%
%% This is file `pst-intersect.pro',
%% generated with the docstrip utility.
%%
%% The original source files were:
%%
%% pst-intersect.dtx  (with options: `prolog')
%% 
%% This is a generated file.
%% 
%% Project: pst-intersect
%% Version: 0.4 (2014/03/16)
%% 
%% Copyright (C) 2007-2014 by Christoph Bersch <usenet@bersch.net>
%% 
%% This work may be distributed and/or modified under the
%% conditions of the LaTeX Project Public License, either version 1.3c
%% of this license or (at your option) any later version.
%% The latest version of this license is in
%%   http://www.latex-project.org/lppl.txt
%% and version 1.3c or later is part of all distributions of LaTeX
%% version 2008/05/04 or later.
%% 
%% This work has the LPPL maintenance status "maintained".
%% 
%% The current maintainer of this work is Christoph Bersch.
%% 
%% This work consists of the files pst-intersect.dtx and pst-intersect.ins
%% and the derived files
%%     pst-intersect.sty, pst-intersect.tex, pst-intersect.pro.
%% 
/tx@IntersectDict 200 dict def
tx@IntersectDict begin
/VecAdd {
    3 -1 roll add 3 1 roll add exch
} bind def
/VecSub {
    neg 3 -1 roll add 3 1 roll neg add exch
} bind def
/VecScale {
  dup 4 -1 roll mul 3 1 roll mul
} bind def
/ToPnt {
    [ 3 1 roll ]
} bind def
/MaxPrecision 1e-6 def
/Epsilon 1e-4 def
/MinClippedSizeThreshold 0.8 def
/H1Interval [0 0.5] def
/H2Interval [0.5 MaxPrecision add 1] def
/IntersectBeziers {
  2 copy length 2 eq exch length 2 eq and {
    IntersectLineSegms
  }{
    2 copy [0 1] [0 1] IterateIntersection
  } ifelse
  3 -1 roll exch
} bind def
/IntersectLines {
  (IntersectLines) DebugBegin
  2 copy
  exch { aload pop } forall 5 -1 roll { aload pop } forall
  8 -2 roll 2 copy 10 4 roll 4 2 roll 2 copy 6 2 roll 10 2 roll
  VecSub
  6 2 roll 4 2 roll VecSub
  8 4 roll 4 2 roll VecSub
  6 copy 12 -4 roll
  neg 4 -1 roll mul 3 1 roll mul add
  dup 0 eq {
    9 { pop } repeat [] []
  } {
    dup 10 1 roll 5 1 roll
     4 -1 roll mul 3 1 roll mul sub exch div
     6 1 roll 4 -1 roll mul 3 1 roll mul sub exch div
     [ exch ] exch [ exch ]
   } ifelse
  DebugEnd
} bind def
/IntersectLineSegms {
  IntersectLines
  dup length 0 eq not {
    0 get exch 0 get
    2 copy 2 copy 0 ge exch 0 ge and 3 1 roll 1 le exch 1 le and and {
      [ exch ] exch [ exch ]
    } {
      pop pop [] []
    } ifelse
  } if
} bind def
/IntersectLineLineSegm {
  tx@IntersectDict begin IntersectLines end
  dup length 0 eq not {
    0 get dup dup 0 ge exch 1 le and {
      [ exch ]
    } {
      pop pop [] []
    } ifelse
  } if
  3 -1 roll exch
} bind def
/IntersectLinePath {
  (IntersectLinePath) DebugBegin
  3 dict begin
    PreparePath
    2 copy ElongateLine exch 3 -1 roll pop
    /isect [] def
    /t -1 def
    /n -1 def
    {
      /n n 1 add def
      2 copy IntersectBeziers
      dup 5 1 roll LoadIntersectionPoints
      dup length 0 gt {
        /isect exch def
        0 get aload pop add 0.5 mul n add /t exch def
        exch pop
        exit
      } {
        pop pop pop
      } ifelse
    } forall
    t isect
  end
  DebugEnd
} bind def
/ElongateLine {
  exch { aload pop } forall
  4 2 roll 2 copy 6 2 roll
  VecSub 0 5 1 roll
  6 -1 roll {
    {
      aload pop
      6 2 roll 4 copy 10 4 roll
      6 2 roll VecSub 4 2 roll
      tx@EcldDict begin Project end
      tx@Dict begin Pyth end
      6 -1 roll 2 copy
      gt { pop } { exch pop } ifelse
      5 1 roll
    } forall
  } forall
  % for a line
  5 -1 roll VecScale 4 copy VecSub ToPnt 5 1 roll VecAdd ToPnt ToPnt
  % for a ray
  %4 2 roll 2 copy ToPnt 6 1 roll 4 2 roll 5 -1 roll 1.1 mul VecScale VecAdd ToPnt ToPnt
} bind def
/IntersectPaths {
  (IntersectPaths) DebugBegin
  6 dict begin
    2 copy exch PreparePath dup length /nA exch def
    exch PreparePath dup length /nB exch def
    /isect [] def
    /tA [] def /tB [] def
    { % [pathA] [Bi]
      /nB nB 1 sub def
      exch dup 3 1 roll % [pathA] [Bi] [pathA]
      {
        /nA nA 1 sub def
        exch dup 3 1 roll % [pathA] [Bi] [Aj] [Bi]
        IntersectBeziers % [curveA] [tA] [curveB] [tB]
        4 copy LoadIntersectionPoints
        [ exch isect aload pop ] /isect exch def
        exch pop 3 -1 roll pop
        [ tB aload length 2 add -1 roll TArray { nB add } forall ] /tB exch def
        [ tA aload length 2 add -1 roll TArray { nA add } forall ] /tA exch def
      } forall
      pop % remove [Bi]
      dup length /nA exch def
    } forall
    pop % remove [pathA]
    [ isect { aload pop } forall ] 3 1 roll tA exch tB
  end
  DebugEnd
} bind def
/IntersectCurvePath {
  (IntersectCurvePath) DebugBegin
  6 dict begin
    2 copy PreparePath dup length /n exch def
    /isect [] def
    /tA [] def /tB [] def
    {
      /n n 1 sub def
      exch dup 3 -1 roll
      IntersectBeziers
      4 copy LoadIntersectionPoints
      [ exch isect aload pop ] /isect exch def
      pop 3 -1 roll pop
      [ tB aload length 2 add -1 roll TArray { n add } forall ] /tB exch def
      [ tA aload length 2 add -1 roll TArray aload pop ] /tA exch def
    } forall
    pop
    [ isect { aload pop } forall ] 3 1 roll tA exch tB
  end
  DebugEnd
} bind def
/IntersectPathCurve {
  exch IntersectCurvePath 4 2 roll
} bind def
/MergeAndSortArrays {
  [ 3 1 roll aload pop counttomark -1 roll aload pop ]
  dup length 0 gt {
    dup dup 0 get type /arraytype eq {
      hulldict /comp get
    } {
      /lt
    } ifelse
    exch quicksort
  } if
} bind def
/SaveIntersection {
  (SaveIntersection) DebugBegin
  exch dup 3 1 roll % isectname add? isectname
  currentdict exch known and {
    load begin % pnts A tA B tB /A /B
      dup currentdict exch known { % /nameB already saved.
        4 -1 roll pop % pnts A tA tB /A /B
        nametostr (@t) strcat cvn dup load 4 -1 roll
        MergeAndSortArrays def
      } {
        dup 5 -1 roll def % pnts A tA B tB /A /B
        nametostr (@t) strcat cvn 3 -1 roll TArray def
      } ifelse % pnts A tA /A
      dup currentdict exch known { % /nameB already saved.
        3 -1 roll pop
        nametostr (@t) strcat cvn dup load 3 -1 roll
        MergeAndSortArrays def
      } {
        dup 4 -1 roll def
        nametostr (@t) strcat cvn exch TArray def
      } ifelse
      /Points exch ArrayToPointArray Points ArrayToPointArray
      MergeAndSortArrays PointArrayToArray def
    end
  } {
    4 dict dup 3 1 roll def
    begin
      dup 5 -1 roll def
      nametostr (@t) strcat cvn 3 -1 roll TArray def
      dup 4 -1 roll def
      nametostr (@t) strcat cvn exch TArray def
      /Points exch def
    end
  } ifelse
  DebugEnd
} bind def
/TArray {
  dup length 0 gt {
    dup 0 get type /arraytype eq {
      [ exch
      { %dup type /nulltype eq { pop exit } if
   aload pop add 0.5 mul
      } forall ]
    } if
    dup /lt exch quicksort
  } if
} bind def
/InitTracing {
  /movetype /moveto load def
  /linetype /lineto load def
  /curvetype /curveto load def
} bind def
/GetFullPath {
  (GetFullPath) DebugBegin
  { /movetype counttomark 3 roll }
  { /linetype counttomark 3 roll }
  { /curvetype counttomark 7 roll }{} pathforall
  DebugEnd
} bind def
/ReversePath {
  gsave newpath
    [ exch aload pop InitTracing
    { counttomark 0 eq { exit } if
      load exec
    } loop
    reversepath
    GetFullPath ]
  grestore
} bind def
/ReverseCurve {
  PointArrayToArray aload pop % [ tstart tstop [ X0 Y0 X1 Y1...
  counttomark -2 4 { 2 roll } for ] ArrayToPointArray
} bind def
/ReverseInterval {
  3 -1 roll dup 4 1 roll GetSegmentCount
  dup 4 1 roll exch sub 3 1 roll sub exch
} bind def
/UnifyInterval {
  exch dup 0 lt { pop 0 } if exch
  3 -1 roll dup 4 1 roll GetSegmentCount
  2 copy exch dup 3 1 roll % [curve] tstart tstop cnt tstop cnt tstop
  lt exch 0 lt or { exch } if pop % (tstop < 0 | cnt < tstop)
} bind def
/PreparePath {
  (PreparePath) DebugBegin
  [ exch aload pop
  {
    dup type /nametype eq not { exit } if
    dup /movetype eq {
      pop ToPnt /@mycp exch def
    } {
      dup /linetype eq {
        pop [ @mycp 4 2 roll 2 copy ToPnt /@mycp exch def ToPnt ]
      } {
        pop [ @mycp 8 2 roll 2 copy ToPnt /@mycp exch def
        ToPnt 5 1 roll ToPnt 4 1 roll ToPnt 3 1 roll ]
      } ifelse
      counttomark 1 roll
    } ifelse
  } loop ]
  DebugEnd
} bind def
/GetSegmentCount {
  (GetSegmentCount) DebugBegin
  dup IsPath {
    [ exch aload pop 0
    {
      counttomark 1 eq { exit } if
      exch
      dup /movetype eq {
        pop 3 1 roll pop pop
      }{
        dup /linetype eq {
          pop 1 add 3 1 roll pop pop
        }{
          pop 1 add 7 1 roll 6 { pop } repeat
        } ifelse
      } ifelse
    } loop
    exch pop
  } {
    % a Bezier curve is a single segment
    length 0 gt { 1 } { 0 } ifelse
  } ifelse
  DebugEnd
} bind def
/LoadLineIntersectionPoints {
  (LoadLineIntersectionPoints) DebugBegin
  exch [ exch { aload pop } forall ]
  tx@Dict begin tx@FuncDict begin 2 dict begin
    dup length 2 idiv 1 sub /BezierType exch def /Points exch def
    [ exch { GetBezierCoor } forall ]
  end end end
  DebugEnd
} bind def
/LoadCurveIntersectionPoints {
  (LoadCurveIntersectionPoints) DebugBegin
  2 {
    4 2 roll
    [ exch { aload pop } forall ]
    exch [ exch { aload pop } forall ]
  } repeat
  tx@Dict begin tx@FuncDict begin 2 dict begin
    dup length 2 idiv 1 sub /BezierType exch def /Points exch def
      [ exch { GetBezierCoor } forall ]
    3 1 roll
    dup length 2 idiv 1 sub /BezierType exch def /Points exch def
      [ exch { GetBezierCoor } forall ]
    end
    2 {
      [ exch aload length 4 idiv {
        [ 5 1 roll ] counttomark 1 roll
      } repeat ]
      exch
    } repeat
    2 {
      dup hulldict /comp get exch quicksort exch
    } repeat
    2 dict begin
      /B exch def /A exch def
      [ 0 1 A length 1 sub {
        dup A exch get exch B exch get % [IAi] [IBi]
        2 copy aload pop VecSub Pyth exch
        aload pop VecSub Pyth lt { exch } if pop
        aload pop VecAdd 0.5 VecScale
      } for ]
    end
  end end
  DebugEnd
} bind def
/LoadIntersectionPoints {
  (LoadIntersectionPoints) DebugBegin
  4 copy pop exch pop length 2 eq exch length 2 eq and {
    pop pop LoadLineIntersectionPoints
  }{
    LoadCurveIntersectionPoints
  } ifelse
  DebugEnd
} bind def
/IterateIntersection {
    (IterateIntersection) DebugBegin
    12 dict begin
/precision MaxPrecision def
        4 2 roll 2 copy 6 2 roll
        dup IsPath not { PointArrayToArray } if
        0 exch { dup type /nametype eq { pop }{ abs max} ifelse } forall
        exch dup IsPath not { PointArrayToArray } if
        { dup type /nametype eq { pop }{ abs max} ifelse } forall
        Epsilon mul /epsilon exch def
        /counter 0 def
/depth 0 def
/domsA [] def
/domsB [] def
/domsA /domsB 6 2 roll _IterateIntersection
domsB domsA
    end
    dup length 0 gt {
      TArraysRemoveDup
    } if
    DebugEnd
} bind def
/TArraysRemoveDup {
  4 dict begin
    /tB exch def
    /tA exch def
    /j 0 def
    [ tA 0 get tB 0 get
    1 1 tA length 1 sub {
      /i exch def
      tA j get aload pop tA i get aload pop tx@Dict begin Pyth2 end MaxPrecision gt
      tB j get aload pop tB i get aload pop tx@Dict begin Pyth2 end MaxPrecision gt and {
        % keep the current parameter point
        /j i def
        tB i get tA i get
        counttomark 2 idiv 1 add 1 roll
      } if
    } for
    counttomark 2 idiv 1 add [ exch 1 roll ] % [ ... [tB]
    counttomark 1 add 1 roll ] exch % [tA] [tB]
  end
} bind def
/_IterateIntersection {
    (_IterateIntersection) DebugBegin
    CloneVec /domB exch def
    CloneVec /domA exch def
    CloneCurve /CurveB exch def
    CloneCurve /CurveA exch def
    /iter 0 def
    /depth depth 1 add def
    /dom null def
    /counter counter 1 add def
    CheckIT {
(>> curve subdivision performed: dom(A) = ) domA CurveToString strcat
(, dom(B) = ) strcat domB CurveToString strcat ( <<) strcat ==
    } if
    CurveA IsConstant CurveB IsConstant and {
CurveA MiddlePoint ToPnt
CurveB MiddlePoint ToPnt AreNear {
    domA domB 4 -1 roll exch PutInterval PutInterval
} {
    pop pop
} ifelse
    }{
counter 100 lt {
    {
/iter iter 1 add def
iter 100 lt
domA Extent precision ge
domB Extent precision ge or and not {
    iter 100 ge {
false
    } {
CurveA MiddlePoint ToPnt
CurveB MiddlePoint ToPnt AreNear {
    domA domB true
}{
    false
} ifelse
    } ifelse
    exit
} if
CheckIT {
    (counter: ) counter 20 string cvs strcat
    (, iter: ) iter 20 string cvs strcat strcat
    (, depth: ) depth 20 string cvs strcat strcat ==
} if
CurveA CurveB ClipCurve /dom exch def

CheckIT {(dom : ) dom CurveToString strcat == } if
dom IsEmptyInterval {
    CheckIT { (empty interval, exit) == } if
    false exit
} if
dom aload pop 2 copy min 3 1 roll max gt {
    CheckIT {
(dom[0] > dom[1], invalid!) ==
    } if
    false exit
} if

domB dom MapTo /domB exch def
CurveB dom Portion

CurveB IsConstant CurveA IsConstant and {
    CheckIT {
           (both curves are constant: ) ==
(C1: [ ) CurveA { CurveToString ( ) strcat strcat } forall (]) strcat ==
(C2: [ ) CurveB { CurveToString ( ) strcat strcat } forall (]) strcat ==
    } if
    CurveA MiddlePoint ToPnt
    CurveB MiddlePoint ToPnt AreNear {
domA domB true
    } {
false
    } ifelse
    exit
} if
dom Extent MinClippedSizeThreshold gt {
    CheckIT {
(clipped less than 20% : ) ==
(angle(A) = ) CurveA dup length 1 sub get aload pop
      CurveA 0 get aload pop VecSub
          exch 2 copy 0 eq exch 0 eq and {
  pop pop (NaN)
      } {
  atan 20 string cvs
      } ifelse strcat ==
        (angle(B) = ) CurveB dup length 1 sub get aload pop
                      CurveB 0 get aload pop VecSub
      exch 2 copy 0 eq exch 0 eq and {
  pop pop (NaN)
      } {
  atan 20 string cvs
      } ifelse strcat ==
        (dom : ) == dom == (domB :) == domB ==
    } if
    CurveA CurveB domA domB iter
          7 -2 roll 2 copy 9 2 roll 2 copy
    domA Extent domB Extent gt {
CurveA CloneCurve dup H1Interval Portion % pC1
CurveA CloneCurve dup H2Interval Portion % pC2
domA H1Interval MapTo                    % dompC1
domA H2Interval MapTo                    % dompC2
3 -1 roll exch % /domsA /domsB /domsA /domsB pC1 dompC1 pC2 dompC2
CurveB exch domB 8 4 roll % /domsA /domsB pC2 CurveB dompC2 domB /domsA /domsB pC1 dompC1
CurveB exch domB % /domsA /domsB pC2 CurveB dompC2 domB /domsA /domsB pC1 CurveB dompC1 domB
    } {
CurveB CloneCurve dup H1Interval Portion % pC1
CurveB CloneCurve dup H2Interval Portion % pC2
domB H1Interval MapTo                    % dompC1
domB H2Interval MapTo                    % dompC2
8 -2 roll exch 8 2 roll 6 -2 roll exch 6 2 roll % /domsB /domsA /domsB /domsA pC1 pC2 dompC1 dompC2
3 -1 roll exch % /domsB /domsA /domsB /domsA pC1 dompC1 pC2 dompC2
CurveA exch domA 8 4 roll % /domsB /domsA pC2 CurveA dompC2 domA /domsB /domsA pC1 dompC1
CurveA exch domA          % /domsB /domsA pC2 CurveA dompC2 domA /domsB /domsA pC1 CurveA dompC1 domA
    } ifelse

    _IterateIntersection
    _IterateIntersection
    /iter exch def
    /domB exch def
    /domA exch def
    /CurveB exch def
    /CurveA exch def
    false exit
} if
CurveA CurveB /CurveA exch def /CurveB exch def
domA domB /domA exch def /domB exch def
exch
    } loop
    {
4 -1 roll exch PutInterval PutInterval
CheckIT {
    (found an intersection ============================) ==
} if
    } { pop pop } ifelse
} {
    pop pop
} ifelse
    } ifelse
    /depth depth 1 sub def
    DebugEnd
} bind def
/PutInterval {
    CloneVec [ exch 3 -1 roll dup 4 1 roll load aload pop ] def
} bind def
/IsEmptyInterval {
    aload pop 0 eq exch 1 eq and
} bind def
/ToUnitInterval {
    ToUnitRange exch ToUnitRange 2 copy gt {
exch
    } if
    ToPnt
} bind def
/ToUnitRange {
    dup 0 lt {
pop 0
    }{
dup 1 gt {
    pop 1
} if
    } ifelse
} bind def
/CloneCurve {
    [ exch {
CloneVec
    } forall ]
} bind def
/CloneVec {
    aload pop ToPnt
} bind def
/MapTo {
    (MapTo) DebugBegin
    exch aload 0 get 3 1 roll exch sub 2 copy % [I] J0 Jextent J0 Jextent
    5 -1 roll aload aload pop % J0 Jextent J0 Jextent I0 I1 I0 I1
    min 4 -1 roll mul % J0 Jextent J0 I0 I1 min(I0,I1)*Jextent
    4 -1 roll add [ exch % J0 Jextent I0 I1 [ J0new
    6 2 roll max mul add ]
    DebugEnd
} bind def
/Portion {
    (Portion) DebugBegin
    dup Min 0 eq { % [CurveB] [I]
Max dup 1 eq {% [CurveB] I.max()
    % I.max() == 1
    pop pop
} { % [CurveB] I.max()
    LeftPortion
} ifelse
    } { % [CurveB] [I]
2 copy Min % [CurveB] [I] [CurveB] I.min()
RightPortion
dup Max 1 eq {
    % I.max() == 1
    pop pop
} {% [CurveB] [I]
    dup aload pop exch sub 1 3 -1 roll Min sub div % [CurveB] (I1-I0)/(1-I.min())
    LeftPortion
} ifelse
    } ifelse
    DebugEnd
} bind def
/LeftPortion {
    (LeftPortion) DebugBegin
    exch dup length 1 sub dup 4 1 roll % L-1 t [CurveB] L-1
    1 1 3 -1 roll { % L-1 t [CurveB] i
4 -1 roll dup 5 1 roll % L-1 t [CurveB] i L-1
-1 3 -1 roll % L-1 t [CurveB] L-1 -1 i
{ % L-1 t [CurveB] j
    2 copy 5 copy % L-1 t [CurveB] j [CurveB] j t [CurveB] j [CurveB] j
    1 sub get 3 1 roll get % L-1 t [CurveB] j [CurveB] j t B[j-1] B[j]
    Lerp put pop % L-1 t [CurveB]
} for
    } for
    pop pop pop
    DebugEnd
} bind def
/RightPortion {
    (RightPortion) DebugBegin
    exch dup length 1 sub dup 4 1 roll % L-1 t [CurveB] L-1
    1 1 3 -1 roll {% L-1 t [CurveB] i
4 -1 roll dup 5 1 roll % L-1 t [CurveB] i L-1
exch sub 0 1 3 -1 roll  % L-1 t [CurveB] 0 1 L-i-1
{% L-1 t [CurveB] j
    2 copy 5 copy
    get 3 1 roll 1 add get Lerp put pop
} for
    } for
    pop pop pop
    DebugEnd
} bind def
/Lerp {
    (Lerp) DebugBegin
    3 -1 roll dup 1 exch sub 3 1 roll % [A] (1-t) [B] t
    exch aload pop 3 -1 roll VecScale % [A] (1-t) B.x*t B.y*t
    4 2 roll
    exch aload pop 3 -1 roll VecScale VecAdd ToPnt % [A.x*(1-t)+B.x*t A.y*(1-t)+B.y*t]
    DebugEnd
} bind def
/IsConstant {
    aload length [ exch 1 roll ] true 3 1 roll
    {
exch dup 4 1 roll
AreNear and exch
    } forall
    pop
} bind def
/AreNear {
    (AreNear) DebugBegin
    aload pop 3 -1 roll aload pop
    VecSub abs epsilon lt exch abs epsilon lt and
    DebugEnd
} bind def
/Min {
    aload pop min
} bind def
/Max {
    aload pop max
} bind def
/Extent {
    aload pop exch sub
} bind def
/MiddlePoint {
    dup dup length 1 sub get aload pop
    3 -1 roll 0 get aload pop
    VecAdd 0.5 VecScale
} bind def
/OrthogonalOrientationLine {
    (OrthogonalOrientationLine) DebugBegin
    dup dup length 1 sub get aload pop 3 -1 roll 0 get aload pop VecSub
    neg exch
    4 2 roll 2 copy 6 2 roll VecAdd
    ImplicitLine
    DebugEnd
} bind def
/PickOrientationLine {
    (PickOrientationLine) DebugBegin
    dup dup length 1 sub exch 0 get% [Curve] L-1 P0
    exch -1 1 {% [Curve] P0 i
3 -1 roll dup 4 1 roll exch get % [Curve] P0 Pi
2 copy AreNear {
    pop
} {
    exit
} ifelse
    } for
    3 -1 roll pop
    exch aload pop 3 -1 roll aload pop ImplicitLine
    DebugEnd
} bind def
/ImplicitLine {
    4 copy % Xi Yi Xj Yj Xi Yi Xj Yj
    3 -1 roll sub 7 1 roll sub 5 1 roll % Yj-Yi Xi-Xj Xi Yi Xj Yj
    % Yi*Xj - Xi*Yj
    4 -1 roll mul neg % Yj-Yi Xi-Xj Yi Xj -Yj*Xi
    3 1 roll mul add % Yj-Yi Xi-Xj Yi*Xj-Yj*Xi | l0 l1 l2
    3 1 roll 2 copy tx@Dict begin Pyth end dup dup % l2 l0 l1 L L L
    5 -1 roll exch % l2 l1 L L l0 L
    div 5 1 roll % l0/L l2 l1 L L
    3 1 roll div % l0/L l2 L l1/L
    3 1 roll div % l0/L l1/L l2/L
} bind def
/distance {
    5 1 roll 3 -1 roll mul 3 1 roll mul add add
} bind def
/ArrayToPointArray {
    aload length dup 2 idiv {
3 1 roll [ 3 1 roll ] exch
dup 1 sub 3 1 roll 1 roll
    } repeat 1 add [ exch 1 roll ]
} bind def
/PointArrayToArray {
    aload length dup {
1 add dup 3 -1 roll aload pop 4 -1 roll 1 add 2 roll
    } repeat 1 add [ exch 1 roll ]
} bind def
/ClipCurve {
    (ClipCurve) DebugBegin
    4 dict begin
    /CurveB exch def /CurveA exch def
    CurveA IsConstant {
     CurveA MiddlePoint CurveB OrthogonalOrientationLine
    } {
CurveA PickOrientationLine
    } ifelse
    CheckIT {
3 copy exch 3 -1 roll (OrientationLine : )
3 { exch 20 string cvs ( ) strcat strcat } repeat ==
    } if
    CurveA FatLineBounds
    CheckIT { dup (FatLineBounds : ) exch aload pop exch 20 string cvs (, ) strcat exch 20 string cvs strcat strcat == } if
    CurveB ClipCurveInterval
    end
    DebugEnd
} bind def
/FatLineBounds {
    (FatLineBounds) DebugBegin
    /dmin 0 def /dmax 0 def
    {
4 copy aload pop 5 2 roll distance
dup dmin lt { dup /dmin exch def } if
dup dmax gt { dup /dmax exch def } if
pop pop
    } forall
    [dmin dmax]
    DebugEnd
} bind def
/ClipCurveInterval {
    (ClipCurveInterval) DebugBegin
    15 dict begin
    /curve exch def
    aload pop 2 copy min /boundMin exch def max /boundMax exch def
    [ 4 1 roll ] cvx /fatline exch def
    % number of sub-intervals
    /n curve length 1 sub def
    % distance curve control points
    /D n 1 add array def
    0 1 n { % i
dup curve exch get aload pop % i Pi.x Pi.y
fatline distance % distance d of Point i from the orientation line, on stack; i d
exch dup n div % d i i/n
[ exch 4 -1 roll ] % i [ i/n d ]
D 3 1 roll put
    } for
    D ConvexHull /D exch def
    /getX { D exch get 0 get } def
    /getY { D exch get 1 get } def
    /tmin 1 def /tmax 0 def
    0 getY dup
    boundMin lt /plower exch def
    boundMax gt /phigher exch def
    plower phigher or not {
tmin 0 getX gt { /tmin 0 getX def } if
tmax 0 getX lt { /tmax 0 getX def } if
    } if
    1 1 D length 1 sub {
/i exch def
/clower i getY boundMin lt def
/chigher i getY boundMax gt def
clower chigher or not {
    tmin i getX gt { /tmin i getX def } if
    tmax i getX lt { /tmax i getX def } if
} if
clower plower eq not {
    boundMin i 1 sub i D Intersect % t on stack
    dup tmin lt { dup /tmin exch def } if
    dup tmax gt { dup /tmax exch def } if
    pop
    /plower clower def
} if
chigher phigher eq not {
    boundMax i 1 sub i D Intersect
    dup tmin lt { dup /tmin exch def } if
    dup tmax gt { dup /tmax exch def } if
    pop
    /phigher chigher def
} if
    } for
    /i D length 1 sub def
    /clower 0 getY boundMin lt def
    /chigher 0 getY boundMax gt def
    clower plower eq not {
boundMin i 0 D Intersect
dup tmin lt { dup /tmin exch def } if
dup tmax gt { dup /tmax exch def } if
pop
    } if
    chigher phigher eq not {
boundMax i 0 D Intersect
dup tmin lt { dup /tmin exch def } if
dup tmax gt { dup /tmax exch def } if
pop
    } if
    [tmin tmax]
    end
    DebugEnd
} bind def
/Intersect {
    dup 4 -1 roll get aload pop
    4 2 roll exch get aload pop
    4 2 roll 2 copy 6 2 roll VecSub
    5 2 roll
    neg 3 -1 roll add
    3 -1 roll div
    3 -1 roll mul add
} bind def
/IsPath {
  dup length 1 sub get type /nametype eq { true } { false } ifelse
} bind def
/ShowPathPortion {
  (ShowPathPortion) DebugBegin
  8 dict begin
  /tstop exch def
  /tstart exch def
  /savecp { ToPnt cvx /@cp exch def } def
  InitTracing
  /n 0 def
  mark exch aload pop
  {
    counttomark 0 eq n tstop ge or { cleartomark exit } if
    dup /movetype eq not { /n n 1 add def } if
    dup /movetype eq {
      pop savecp
    } {
      tstart n ge {
        /curvetype eq { 6 2 roll 4 { pop } repeat } if
        savecp
      } {
        tstart n 1 sub gt tstop n lt or {
          tstart n sub 1 add tstop n sub 1 add
          ToUnitInterval exch
          /linetype eq {
            3 1 roll ToPnt
            tstart n 1 sub gt { @cp ToPnt } { currentpoint ToPnt } ifelse exch ToPnt
            dup 3 -1 roll Portion
            aload pop exch
            tstart n 1 sub gt {
              exch aload pop 3 -1 roll aload pop ArrowA
              tstop n le {
                currentpoint 4 2 roll ArrowB linetype pop pop
              } {
                linetype
              } ifelse
            } {
              pop aload pop currentpoint 4 2 roll ArrowB linetype pop pop
            } ifelse
          } {
            7 1 roll
            [ tstart n 1 sub gt { @cp }{ currentpoint } ifelse
            9 3 roll ] ArrayToPointArray
            dup 3 -1 roll
            Portion
            { aload pop } forall
            tstart n 1 sub gt {
              8 -4 roll 4 2 roll ArrowA 6 2 roll
            } {
              8 -2 roll pop pop
            } ifelse
            tstop n le { ArrowB } if
            curvetype
          } ifelse
        }{
          tstart n 1 sub eq {
            /linetype eq {
              @cp ArrowA
              tstop n eq {
                currentpoint 4 2 roll ArrowB linetype pop pop
              } {
                linetype
              } ifelse
            } {
              6 -2 roll @cp ArrowA 6 2 roll
              tstop n eq {
                ArrowB
              } if
              curvetype
            } ifelse
          } {
            /linetype eq {
              tstop n eq {
                currentpoint 4 2 roll ArrowB linetype pop pop
              }{
                linetype
              } ifelse
            } {
              tstop n eq {
                ArrowB
              } if
              curvetype
            } ifelse
          } ifelse
        } ifelse
      } ifelse
    } ifelse
  } loop
  end
  DebugEnd
} bind def
/GetCurvePoint {
  dup IsPath {
    5 dict begin
    exch dup /tstart exch def
    1 add cvi /tstop exch def
    /savecp { ToPnt cvx /@cp exch def } def
    /n 0 def
    mark exch aload pop
    {
      counttomark 0 eq n tstop ge or { cleartomark exit } if
      dup /movetype eq not { /n n 1 add def } if
      dup /movetype eq {
        pop savecp
      } {
        tstart n ge {
          /curvetype eq { 6 2 roll 4 { pop } repeat } if
          savecp
        } {
          tstart n 1 sub gt {
            tstart n sub 1 add tstop n sub 1 add
            ToUnitInterval exch
            /linetype eq {
              3 1 roll ToPnt
              tstart n 1 sub gt { @cp ToPnt } { currentpoint ToPnt } ifelse exch ToPnt
              dup 3 -1 roll Portion
            } {
              7 1 roll
              [ @cp 9 3 roll ] ArrayToPointArray
              dup 3 -1 roll
              Portion
            } ifelse
            0 get aload pop
          }{
            /curvetype eq {
              pop pop pop pop
            } if
          } ifelse
          counttomark 1 add 2 roll cleartomark exit
        } ifelse
      } ifelse
    } loop
    end
  } {
    exch dup 0 eq {
      pop 0 get aload pop
    } {
      0 exch ToUnitInterval exch dup 3 -1 roll Portion
      dup length 1 sub get aload pop
    } ifelse
  } ifelse
} bind def
/TraceCurveOrPath {
  4 1 roll
  UnifyInterval
  3 -1 roll dup IsPath {
    4 -1 roll pop
    3 1 roll 2 copy gt {
      ReverseInterval
      3 -1 roll ReversePath 3 1 roll
    } if
    ShowPathPortion
  }{ % tstart tstop [curve]
    mark exch 4 2 roll % [ [curve] tstart tstop
      2 copy gt { % tstart > tstop
        exch
        [ 4 -1 roll ReverseCurve 3 1 roll % [ [curve'] tstart tstop
      } if
      ToUnitInterval exch dup 3 -1 roll Portion
      { aload pop } forall
      counttomark -2 4 { 2 roll } for
      counttomark 2 sub 2 idiv
      counttomark 2 add -1 roll exec
    } ifelse
} bind def
 % Graham Scal algorithm to compute the convex hull of a set of
 % points. Code written by Bill Casselman,
 %  http://www.math.ubc.ca/~cass/graphics/text/www/
 %
 % [[X1 Y1] [X2 Y2] ... [Xn Yn]] hull -> [[...] ... [...]]
 %
/hulldict 32 dict def
hulldict begin

 % u - v
/vsub { 2 dict begin
/v exch def
/u exch def
[
  u 0 get v 0 get sub
  u 1 get v 1 get sub
]
end } def

 % u - v rotated 90 degrees
/vperp { 2 dict begin
/v exch def
/u exch def
[
  v 1 get u 1 get sub
  u 0 get v 0 get sub
]
end } def

/dot { 2 dict begin
/v exch def
/u exch def
  v 0 get u 0 get mul
  v 1 get u 1 get mul
  add
end } def

 % P Q
 % tests whether P < Q in lexicographic order
 % i.e xP < xQ, or yP < yQ if xP = yP
/comp { 2 dict begin
/Q exch def
/P exch def
P 0 get Q 0 get lt
  P 0 get Q 0 get eq
  P 1 get Q 1 get lt
  and
or
end } def

end

 % args: an array of points C
 % effect: returns the array of points on the boundary of
 %     the convex hull of C, in clockwise order

/ConvexHull {
(ConvexHull) DebugBegin
hulldict begin
/C exch def
/comp C quicksort
/n C length def
 % Q might circle around to the start
/Q n 1 add array def
Q 0 C 0 get put
Q 1 C 1 get put
/i 2 def
/k 2 def
 % i is next point in C to be looked at
 % k is next point in Q to be added
 % [ Q[0] Q[1] ... ]
 % scan the points to make the top hull
n 2 sub {
  % P is the current point at right
  /P C i get def
  /i i 1 add def
  {
    % if k = 1 then just add P
    k 2 lt { exit } if
    % now k is 2 or more
    % look at Q[k-2] Q[k-1] P: a left turn (or in a line)?
    % yes if (P - Q[k-1])*(Q[k-1] - Q[k-2])^perp >= 0
    P Q k 1 sub get vsub
    Q k 1 sub get Q k 2 sub get vperp
    dot 0 lt {
      % not a left turn
      exit
    } if
    /k k 1 sub def
  } loop
  Q k P put
  /k k 1 add def
} repeat

 % done with top half
 % K is where the right hand point is
/K k 1 sub def

/i n 2 sub def
Q k C i get put
/i i 1 sub def
/k k 1 add def
n 2 sub {
  % P is the current point at right
  /P C i get def
  /i i 1 sub def
  {
    % in this pass k is always 2 or more
    k K 2 add lt { exit } if
    % look at Q[k-2] Q[k-1] P: a left turn (or in a line)?
    % yes if (P - Q[k-1])*(Q[k-1] - Q[k-2])^perp >= 0
    P Q k 1 sub get vsub
    Q k 1 sub get Q k 2 sub get vperp
    dot 0 lt {
      % not a left turn
      exit
    } if
    /k k 1 sub def
  } loop
  Q k P put
  /k k 1 add def
} repeat

 % strip Q down to [ Q[0] Q[1] ... Q[k-2] ]
 % excluding the doubled initial point
[ 0 1 k 2 sub {
  Q exch get
} for ]
end
DebugEnd
} def

/qsortdict 8 dict def

qsortdict begin

 % args: /comp a L R x
 % effect: effects a partition into two pieces [L j] [i R]
 %     leaves i j on stack

/partition { 8 dict begin
/x exch def
/j exch def
/i exch def
/a exch def
dup type /nametype eq { load } if /comp exch def
{
  {
    a i get x comp exec not {
      exit
    } if
    /i i 1 add def
  } loop
  {
    x a j get comp exec not {
      exit
    } if
    /j j 1 sub def
  } loop

  i j le {
    % swap a[i] a[j]
    a j a i get
    a i a j get
    put put
    /i i 1 add def
    /j j 1 sub def
  } if
  i j gt {
    exit
  } if
} loop
i j
end } def

 % args: /comp a L R
 % effect: sorts a[L .. R] according to comp
/subsort {
 % /c a L R
[ 3 1 roll ] 3 copy
 % /c a [L R] /c a [L R]
aload aload pop
 % /c a [L R] /c a L R L R
add 2 idiv
 % /c a [L R] /c a L R (L+R)/2
3 index exch get
 % /c a [L R] /c a L R x
partition
 % /c a [L R] i j
 % if j > L subsort(a, L, j)
dup
 % /c a [L R] i j j
3 index 0 get gt {
  % /c a [L R] i j
  5 copy
  % /c a [L R] i j /c a [L R] i j
  exch pop
  % /c a [L R] i j /c a [L R] j
  exch 0 get exch
  % ... /c a L j
  subsort
} if
 % /c a [L R] i j
pop dup
 % /c a [L R] i i
 % if i < R subsort(a, i, R)
2 index 1 get lt {
  % /c a [L R] i
  exch 1 get
  % /c a i R
  subsort
}{
  4 { pop } repeat
} ifelse
} def

end % qsortdict

 % args: /comp a
 % effect: sorts the array a
 % comp returns truth of x < y for entries in a

/quicksort { qsortdict begin
dup length 1 gt {
 % /comp a
dup
 % /comp a a
length 1 sub
 % /comp a n-1
0 exch subsort
} {
pop pop
} ifelse
end } def
/debug {
    dup 1 add copy {==} repeat pop
} bind def
/DebugIT false def
/CheckIT false def
/DebugDepth 0 def
/DebugBegin {
  DebugIT {
    /DebugProcName exch def
    DebugDepth 2 mul string
    0 1 DebugDepth 2 mul 1 sub {
      dup 2 mod 0 eq { (|) }{( )} ifelse
      3 -1 roll dup 4 2 roll
      putinterval
    } for
    DebugProcName strcat ==
    /DebugDepth DebugDepth 1 add def
  }{
    pop
  } ifelse
} bind def
/DebugEnd {
  DebugIT {
    /DebugDepth DebugDepth 1 sub def
    DebugDepth 2 mul 2 add string
    0 1 DebugDepth 2 mul 1 sub {
      dup 2 mod 0 eq { (|) }{ ( ) } ifelse
      3 -1 roll dup 4 2 roll
      putinterval
    } for
    dup DebugDepth 2 mul (+-) putinterval
    ( done) strcat ==
  } if
} bind def
/strcat {
    exch 2 copy
    length exch length add
    string dup dup 5 2 roll
    copy length exch
    putinterval
} bind def
/nametostr {
    dup length string cvs
} bind def
/ShowCurve {
    { aload pop } forall
    8 -2 roll moveto curveto
} bind def
/CurveToString {
    (CurveToString) DebugBegin
    aload pop ([) 3 -1 roll 20 string cvs strcat (, ) strcat exch 20 string cvs strcat (]) strcat
    DebugEnd
} bind def
end % tx@IntersectDict

%%EndProcSet
%%BeginProcSet: pst-optexp.pro 0 0
%%
%% This is file `pst-optexp.pro',
%% generated with the docstrip utility.
%%
%% The original source files were:
%%
%% pst-optexp.dtx  (with options: `prolog')
%% 
%% This is a generated file.
%% 
%% Project: pst-optexp
%% Version: 5.2 (2014/11/26)
%% 
%% Copyright (C) 2007-2014 by Christoph Bersch <usenet@bersch.net>
%% 
%% This work may be distributed and/or modified under the
%% conditions of the LaTeX Project Public License, either version 1.3c
%% of this license or (at your option) any later version.
%% The latest version of this license is in
%%   http://www.latex-project.org/lppl.txt
%% and version 1.3c or later is part of all distributions of LaTeX
%% version 2008/05/04 or later.
%% 
%% This work has the LPPL maintenance status "maintained".
%% 
%% The current maintainer of this work is Christoph Bersch.
%% 
%% This work consists of the files pst-optexp.dtx and pst-optexp.ins
%% and the derived files
%%     pst-optexp.sty, pst-optexp.pro.
%% 
/tx@OptexpDict 200 dict def
tx@OptexpDict begin
/DebugOE false def
/DebugDepth 0 def
/DebugBegin {
  DebugOE {
    /DebugProcName ED
    DebugDepth 2 mul string
    0 1 DebugDepth 2 mul 1 sub {
      dup 2 mod 0 eq { (|) }{( )} ifelse
      3 -1 roll dup 4 2 roll
      putinterval
    } for
    DebugProcName strcat ==
    /DebugDepth DebugDepth 1 add def
  }{
    pop
  } ifelse
} bind def
/DebugEnd {
  DebugOE {
    /DebugDepth DebugDepth 1 sub def
    DebugDepth 2 mul 2 add string
    0 1 DebugDepth 2 mul 1 sub {
      dup 2 mod 0 eq { (|) }{ ( ) } ifelse
      3 -1 roll dup 4 2 roll
      putinterval
    } for
    dup DebugDepth 2 mul (+-) putinterval
    ( done) strcat ==
  } if
} bind def
/DebugMsg {
  DebugOE {
    DebugDepth 1 add 2 mul string
    0 1 DebugDepth 2 mul 1 add {
      dup 2 mod 0 eq { (|) }{( )} ifelse
      3 -1 roll dup 4 2 roll
      putinterval
    } for
    exch strcat ==
  }{
    pop
  } ifelse
} bind def
/strcat {
    exch 2 copy
    length exch length add
    string dup dup 5 2 roll
    copy length exch
    putinterval
} bind def
/nametostr {
    dup length string cvs
} bind def
/PrintWarning {
  (Warning pst-optexp: ) exch strcat (\n) strcat print
} bind def
/CompUnknownWarning {
  (Component ') exch strcat (' unknown) strcat Warning
} bind def
/OneFiberCompWarning {
  (Found only one unsupported component in beam path, drawing no beam) Warning
} bind def
/FiberCompWarning {
  (Found an unsupported component in beam path, stopping beam path) Warning
} bind def
/inttostr {
  dup type /integertype eq {
    dup log 1 add floor cvi string cvs
  } if
} bind def
/calcNodes {
  (calcNode) DebugBegin
  /YG exch def /XG exch def
  /by exch YG sub def
  /bx exch XG sub def
  /ay YG 3 -1 roll sub def
  /ax XG 3 -1 roll sub def
  ax ay NormalizeVec bx by NormalizeVec VecAdd
  2 copy Pyth abs 1e-4 lt {
    pop pop ax ay -90 matrix rotate dtransform
  } if
  /cy ED /cx ED
  /c ax bx add ay by add Pyth def
  c 0 eq {
    ax ay bx by DotProd 0 gt {
      /cx ax def
      /cy ay def
    }{
      /cx ay def
      /cy ax neg def
    } ifelse
  } if
  cx cy NormalizeVec 2 copy
  XG YG VecAdd /Y@A ED /X@A ED
  XG YG 4 2 roll VecSub /Y@B ED /X@B ED
  true
  ax by mul ay bx mul sub 0 le {
    pop false
    Y@A X@A
    /X@A X@B def
    /Y@A Y@B def
    /X@B exch def
    /Y@B exch def
  } if
  DebugEnd
} bind def
/capHeight {
    dup mul neg exch abs dup 3 1 roll dup mul add sqrt sub
} bind def
/leftCurvedIfc {
  /R1 exch def /h exch def
  0 R1 abs dup R1 h capHeight exch sub R1 sign mul dup
  h exch atan exch
  h neg exch atan
  R1 0 lt {
    /ArcL /arcn load def
  } {
    /ArcL /arc load def
  } ifelse
  R1
} bind def
/rightCurvedIfc {
  /R2 exch def /h exch def
  0 R2 abs dup R2 h capHeight sub R2 sign mul dup
  h neg exch atan exch
  h exch atan
  R2 0 lt {
    /ArcR /arcn load def
  } {
    /ArcR /arc load def
  } ifelse
  R2
} bind def
/SlopeAngle {
  (SlopeAngle) DebugBegin
  @GetCenter 3 -1 roll @GetCenter @ABVect exch atan
  DebugEnd
} bind def
/DefineExtNode {%
  (DefineExtNode) DebugBegin
  @@y mul RefFac mul @@y0 add
  exch @@x mul RefFac mul @@x0 add exch
  DebugEnd
} bind def
/GetInternalNodeNames {
  (GetInternalNodeNames) DebugBegin
  /reverse ED
  dup cvn load /N get dup
  reverse { -1 1 } { 1 1 3 -1 roll } ifelse
  { inttostr
    3 -1 roll dup 4 1 roll exch NodeName 3 1 roll
  } for
  pop pop
  DebugEnd
} bind def
/GetInternalBeamNodes {
  (GetInternalBeamNodes) DebugBegin
  [ 3 1 roll GetInternalNodeNames ]
  { @GetCenter } forall
  DebugEnd
} bind def
/InitOptexpComp {%
  /@@x 0 def
  /@@y 0 def
  /@@x0 0 def
  /@@y0 0 def
  /@xref [0] def
  /@yref [0] def
  /RefFac 1 def
} bind def
/NewTempNodeComp {
  (NewTempNodeComp) DebugBegin
  /sc ED
  dup cvn
  6 dict dup 3 1 roll def begin
    /ambiguous false def
    /allowbeaminside false def
    /forcebeaminside false def
    /name ED
    /correct false def
    {0 0} exch 3 -1 roll exec
    gsave
      translate
      /CompMtrx CM def
    grestore
    /N 1 def
    /n bgRefIndex def
    5 dict dup dup /P@1 ED /P@N ED
    begin
      /mode trans def
      {} 0 0 PlainIfc
    end
  /adjustRel true def
  end
  DebugEnd
} bind def
/CurvedIfc {
  5 2 roll
  2 copy 5 3 roll exec 3 -1 roll exec VecAdd
  5 -1 roll exec /Y ED /X ED
  exch exec 3 -1 roll 3 copy exec /RY ED /RX ED
  3 1 roll NormalizeVec 3 -1 roll exec
  tx@Dict begin Pyth end dup
  3 1 roll mul 1.00001 mul /NAup ED
  mul 1.00001 mul /NAlow ED
} bind def
/PlainIfc {
  5 2 roll
  dup 3 -1 roll exec NormalizeVec 3 -1 roll exec 2 copy /DY ED /DX ED
  tx@Dict begin Pyth end dup 4 2 roll
  exch exec 3 -1 roll exec /Y ED /X ED
  3 1 roll mul 1.00001 mul /NAup ED
  mul 1.00001 mul /NAlow ED
} bind def
/PathIfc {
  pop pop /NAup 0 def /NAlow 0 def
  3 1 roll /Path ED
  exec 3 -1 roll exec /Y ED /X ED
} bind def
/NewCompIfc {
  /scl ED
  /next ED
  dup (P@) exch strcat cvn
  6 dict dup
  3 1 roll def
  begin
    3 -1 roll
    /mode ED
    6 -1 roll dup 7 -1 roll
    {scl} 8 -2 roll next
  end
  exec scl ToVec 3 1 roll NodeName @NewNode
} bind def
/relative 0 def /absolute 1 def /center 2 def /firstcomp 3 def
/refl 0 def /trans 1 def /absorb 2 def /refltrans 3 def /auto 4 def /undefined -1 def
/desc 0 def /asc 1 def /amb 2 def
/ok 0 def /tir 1 def /missed 2 def
/bgRefIndex 0 def
/NewOptexpComp {
  (NewOptexpComp) DebugBegin
  /sc ED dup cvn
  gsave
  13 dict dup 3 1 roll def begin
  /name ED
  /forcebeaminside ED
  /allowbeaminside ED
  /ambiguous ED
  /grating false def
  dup type /booleantype eq not { false } if /correct ED
  tx@Dict begin
    STV {CP T} stopped pop
  end
  /CompMtrx CM def
  grestore
  counttomark dup 6 idiv dup /N ED 6 mul eq { 1 } if
  cvx 1 EvalRefIndex /n ED
  ambiguous {
    /ambIfc ED
  }{
    /ambIfc 0 def
  } ifelse
  1 N eq {
      name (1) 3 -1 roll {sc} NewCompIfc
      (1) (2) IfcCopy
      (2) (N) IfcAlias
  }{
    N -1 1 { %
      inttostr exch name 3 1 roll {sc} NewCompIfc
    } for
    N inttostr (N) IfcAlias
  } ifelse
  ambiguous ambIfc 0 gt and {
    ambIfc inttostr (C) IfcCopy
  } if
  end
  pop
  DebugEnd
} bind def
/NewOptexpFiberComp {
  (NewOptexpFiberComp) DebugBegin
  /sc ED dup cvn
  gsave
  12 dict dup 3 1 roll def begin
  /name ED
  tx@Dict begin
    STV {CP T} stopped pop
  end
  /CompMtrx CM def
  grestore
  counttomark /N ED
  1 N eq {
    {0 1} 0 0 trans name (1) {PlainIfc} {sc} NewCompIfc
    (1) (2) IfcCopy
    (2) (N) IfcAlias
  }{
    N -1 1 {
      inttostr
      {0 1} 0 0 absorb name 6 -1 roll {PlainIfc} {sc} NewCompIfc
    } for
    N inttostr (N) IfcAlias
  } ifelse
  end
  pop
  DebugEnd
} bind def
/IfcCopy {
  2 copy IfcName exch IfcName load dup
  length dict copy def
  name exch NodeName name 3 -1 roll NodeName
  tx@NodeDict begin
    load dup length dict copy def
  end
} bind def
/IfcAlias {
  2 copy IfcName exch IfcName load def
  tx@NodeDict begin
    name exch NodeName name 3 -1 roll NodeName load def
  end
} bind def
/CompAlias {
  2 copy cvn dup currentdict exch known {
    load def
  } {
    pop
  } ifelse
  tx@NodeDict begin
  1 {
    3 copy inttostr dup
    3 1 roll 2 copy NodeName
    currentdict exch known {
      NodeName load 3 1 roll NodeName ED
      1 add
    } {
      pop (N) NodeName load 3 1 roll
      pop (N) NodeName ED
      pop exit
    } ifelse
  } loop
  mark (A) (B) (@A) (@B) (Center) (Label) (Rotref)
       (TrefA) (TrefB) (@TrefA) (@TrefB) (Ext) (Origin)
  counttomark {
    counttomark 3 add -2 roll 2 copy counttomark 1 add 2 roll
    3 -1 roll dup 4 1 roll NodeName dup
    currentdict exch known {
      load 3 1 roll exch NodeName ED
    } {
      pop pop pop
    } ifelse
  } repeat pop
  exch 1 1 8 {
    3 copy
    (Ext) exch 5 string cvs strcat dup 3 1 roll
    NodeName 3 1 roll NodeName
    dup currentdict exch known {
      load def pop
    } {
      pop pop pop exit
    } ifelse
  } for
  pop pop
  end
} bind def
/GetPlaneVec {
  (GetPlaneVec) DebugBegin
  cvn load begin
    IfcName load begin
      currentdict /RX known {
        RX RY CompMtrx dtransform CM idtransform
        neg exch
      } {
        DX DY CompMtrx dtransform CM idtransform
      } ifelse
    end
  end
  DebugEnd
} bind def
/GetIfcCenter {
  (GetIfcCenter) DebugBegin
  dup type /stringtype eq not {
    dup xcheck not {
      0 get (C) exch
    } {
      exec pop pop pop
    } ifelse
  } if
  cvn load begin
    IfcName load begin
      currentdict /RX known {
        X RX sub Y RY sub
      } {
        X Y
      } ifelse
      CompMtrx transform CM itransform
    end
  end
  DebugEnd
} bind def
/GetIfcCenterCorr {
  (GetIfcCenterCorr) DebugBegin
  cvn load begin
    IfcName load begin
      currentdict /XCorr known {
        XCorr YCorr
      }{
        X Y
      } ifelse
      currentdict /RX known {
        RX neg RY neg VecAdd
      } if
      CompMtrx transform CM itransform
    end
  end
  DebugEnd
} bind def
/TransformInVec {
  (TransformInVec) DebugBegin
  3 1 roll
  GetIfcCenter 4 2 roll
  GetIfcCenter 5 -2 roll
  @ABVect
  3 -1 roll exec 2 copy 6 2 roll
  0 eq exch 0 eq and not {
    exch atan matrix rotate dtransform
  } {
    4 2 roll pop pop
  } ifelse
  ToVec
  DebugEnd
} bind def
/TransformStartPos {
  (TransformStartPos) DebugBegin
  exec 2 copy 6 2 roll 0 eq exch 0 eq and not
  3 1 roll GetIfcCenter 4 2 roll
  GetIfcCenter 5 2 roll {
    2 copy 8 2 roll
    @ABVect exch atan matrix rotate dtransform
    VecAdd
  } {
    6 2 roll pop pop pop pop
  } ifelse
  ToVec
  DebugEnd
} bind def
/GetNearestPlane {
  (GetNearestPlane) DebugBegin
  3 copy 1 exch GetIfcCenter @ABDist /dist ED /nearestPlane 1 def
  dup cvn load /N get 2 1 3 -1 roll {
    4 copy exch GetIfcCenter @ABDist dup dist lt {
      /dist ED /nearestPlane ED
    } {
      pop pop
    } ifelse
  } for
  pop pop pop nearestPlane
  DebugEnd
} bind def
/PushAmbCompPlanesOnStack {
 (PushAmbCompPlanesOnStack) DebugBegin
  currentdict /outToPlane undef
  PN IfcCnt eq not {
    exch dup 3 1 roll % nextifc ambcomp nextifc
    dup xcheck not {
      0 get (C) exch
    } {
      exec pop pop pop
    } ifelse
    [ 3 1 roll ] cvx /outToPlane ED
  } if
  /IfcCntTmp IfcCnt def
  aload pop /draw ED /name ED
  name cvn load /N get dup /N ED
  1 eq { /draw true def } if
  currentdict /Curr known {
    /CurrTmp /Curr load def
    /CurrVecTmp /CurrVec load def
  } {
    /CurrTmp /CurrLow load def
    /CurrVecTmp /CurrVecLow load def
  } ifelse
  PN 1 eq {
    [ (C) name name GetRefIndex trans draw] cvx
    name /outToPlane load GetNextPlane
    dup 0 eq not {
      [ exch name bgRefIndex trans draw ] cvx exch
      /IfcCntTmp IfcCntTmp 1 add def
    } {
      pop
    } ifelse
  }{
    CurrTmp name GetNearestPlane dup /firstPlane ED
    name isAmbiguousIfc not {
      firstPlane name
      name firstPlane GetIfcMode
      connectifc { bgRefIndex }{ name GetRefIndex } ifelse
      CurrTmp CurrVecTmp
      10 dict begin HandleInterface end pop
      ToVec /CurrVecTmp ED ToVec /CurrTmp ED
      [ firstPlane name
      connectifc {
        bgRefIndex
      }{
        name GetRefIndex
      } ifelse
      name firstPlane GetIfcMode
      true ] cvx
      /IfcCntTmp IfcCntTmp 1 add def
    } if
    PN IfcCnt eq {
      [ (C) name
      name GetRefIndex
      trans draw ] cvx
      IfcCntTmp IfcCnt gt { exch } if
    }{
      beamdiffractionorder null eq not name cvn load /grating get and {
        beamdiffractionorder dup 0 eq { pop () } if
        (C) exch 20 string cvs strcat
        dup (P@) exch strcat cvn name cvn load exch known not {
          pop beamdiffractionorder dup sign neg 1 {
            (C) exch 5 string cvs dup 3 1 roll strcat
            dup (P@) exch strcat cvn name cvn load exch known {
              3 -1 roll pop
              (Diffraction order ) beamdiffractionorder 5 string cvs strcat
              ( is not defined, using ) 4 -1 roll strcat strcat Warning
              exit
            } {
              pop
            } ifelse
          } for
        } if
        /@@centerifc ED
        mark @@centerifc name name GetRefIndex
        beamdiffractionorder 0 eq {
          trans
        }{
          name @@centerifc GetIfcMode refltrans eq {
            refltrans
          }{
            refl
          } ifelse
        } ifelse
      }{
        /@@centerifc (C) def
        [ @@centerifc name
        name GetRefIndex
        beammode auto eq {
          CurrVecTmp @@centerifc name GetPlaneVec
          name @@centerifc GetIfcMode refltrans eq { -90 matrix rotate dtransform } if
          NormalVec outToPlane GetIfcCenter @@centerifc name GetIfcCenter @ABVect DotProd
          0 lt {
            trans
          }{
            name @@centerifc GetIfcMode
            refltrans eq {
              refltrans
            }{
              refl
            } ifelse
          } ifelse
        } {
          beammode dup refl eq {
            pop name @@centerifc GetIfcMode dup refltrans eq not { pop refl } if
          } if
        } ifelse
      } ifelse
      dup 6 1 roll
      IfcCntTmp IfcCnt eq { true }{ draw } ifelse
      ] cvx
      @@centerifc name 4 -1 roll
      connectifc { bgRefIndex }{ name GetRefIndex } ifelse
      CurrTmp CurrVecTmp
      10 dict begin HandleInterface end pop
      ToVec /CurrVecTmp ED ToVec /CurrTmp ED
      name /outToPlane load GetNextPlane
      dup dup name isAmbiguousIfc exch 0 eq or not {
        [ exch name bgRefIndex trans draw ] cvx exch
        firstPlane name isAmbiguousIfc not { 3 -1 roll } if
        /IfcCntTmp IfcCntTmp 1 add def
      } {
        pop
        exec 3 -1 roll pop bgRefIndex 3 1 roll [ 6 1 roll ] cvx
        firstPlane name isAmbiguousIfc not { exch } if
      } ifelse
    } ifelse
  } ifelse
  /IfcCnt IfcCntTmp def
  DebugEnd
} bind def
/GetNextPlane {
  (GetNextPlane) DebugBegin
  2 copy (C) 3 -1 roll
  GetIfcCenter 3 -1 roll
  exec GetIfcCenter
  4 2 roll 4 copy @ABVect ToVec /Vec ED
  @ABDist /centerDist ED
  /sprod 1 def
  /nextPlane 0 def
  exch dup 3 1 roll
  cvn load dup /ambIfc get /ambIfc ED /N get 1 1 3 -1 roll {
   dup ambIfc eq not {
      3 copy 3 -1 roll 2 copy
      GetPlaneVec Vec 4 2 roll NormalVec
      Vec DotProd dup sprod lt 5 2 roll
      GetIfcCenter 3 -1 roll exec GetIfcCenter @ABDist
      centerDist lt and
      centerDist -1 eq { pop dup 0 gt } if
      { /sprod ED /nextPlane ED } { pop pop } ifelse
    } {
      pop
    } ifelse
  } for
  pop pop nextPlane
  DebugEnd
} bind def
/TraceBeam {
  (Tracebeam) DebugBegin
  AngToVec /InVec ED /StartPoint ED
  /oldbeaminsidelast currentdict /beaminsidelast known {
    beaminsidelast
  } {
    false
  } ifelse def
  exec
  connectifc {
    /nbeam bgRefIndex def
  } if
  /startinside startinside beaminsidefirst or def
  /stopinside stopinside beaminsidelast or def
  /PrevCorrect false def
  PrearrangePlanes
  PushAllPlanesOnStack
  currentdict /lastVecTmp known {
    lastVecTmp beamangle matrix rotate dtransform ToVec
  } {
    counttomark 2 ge beamalign relative eq and {
      2 copy /InVec load TransformInVec
    } {
      /InVec load
    } ifelse
  } ifelse
  /CurrVec ED
  currentdict /lastBeamPointTmp known {
    /lastBeamPointTmp load /Curr ED
  }{
    counttomark 2 ge {
      2 copy /StartPoint load  TransformStartPos
    } {
      /StartPoint load
    } ifelse
    /Curr ED
  } ifelse
  counttomark /IfcCnt ED
  /n1 bgRefIndex def
  /PN 1 def
  (start looping) DebugMsg
  {
    PN IfcCnt gt {
      exit
    } if
    (checked) DebugMsg
    beampathcount 0 eq {
      cleartomark mark exit
    } if
    dup xcheck not {
      PushAmbCompPlanesOnStack
    } if
    exec
    /draw ED /Mode ED /n2 ED 2 copy /CompName ED /IfcNum ED
    GetIfcCenter ToVec /CurrCenter ED
    Curr CurrVec
    connectifc PrevCorrect PN 2 gt and PN 2 eq or and {
      CurrVec CurrCenter PrevCenter PrevMode
      currentdict /relAngle known
      { relAngle } { 0 } ifelse connectInterfaces
      /relAngle ED
    } if
    CompName cvn load begin
      currentdict /adjustRel known aligntovector and {
        IfcNum IfcName load begin
          currentdict /RX known not {
            2 copy neg exch CM dtransform CompMtrx idtransform
            /DY ED /DX ED
          } if
        end
      } if
    end
    IfcNum CompName Mode n2 8 4 roll HandleInterface
    missed eq {
      counttomark PN 1 sub 3 mul sub {pop} repeat
      (The beam missed an interface) Warning exit
      exit
    } if
    PN 1 eq {
      pop pop
      /draw beaminsidefirst oldbeaminsidelast xor def
    } {
      ToVec /CurrVec ED
    } ifelse
    2 copy
    ToVec /Curr ED
    draw PN beampathskip 1 add gt and
    counttomark 3 roll
    /PrevCenter /CurrCenter load def
    /lastBeamPointTmp /Curr load def
    currentdict /lastVecTmp known {
      /prevVecTmp /lastVecTmp load def
      /lastVecTmp /CurrVec load def
    } {
      /CurrVec load dup /lastVecTmp ED /prevVecTmp ED
    } ifelse
    /PrevMode Mode def
    CompName cvn load /correct get /PrevCorrect ED
    PN IfcCnt eq {
      exit
    } {
      CurrVec 0 eq exch 0 eq and {
        IfcCnt PN sub {pop} repeat
        (Total internal reflection occured, this is not supported)
        Warning
        exit
      } if
      beampathcount 1 add PN eq {
        IfcCnt PN sub {pop} repeat
        exit
      } if
      /PN PN 1 add def
    } ifelse
  } loop
  DebugEnd
} bind def
/sign {
    0 ge { 1 } { -1 } ifelse
} bind def
/Chirality {
  4 -1 roll mul 3 1 roll mul sub sign
} bind def
/TraceInterfacePath {
  tx@IntersectDict begin
    /ArrowA { {currentpoint} stopped {moveto}{pop pop pop pop} ifelse } def
    {} TraceCurveOrPath
    currentdict /ArrowA undef
  end
} bind def
/TraceAndFillWideBeam {
  (TraceAndFillWideBeam) DebugBegin
  AngToVec /InvecLow ED /StartLow ED
  AngToVec /InvecUp ED /StartUp ED
  exec
  connectifc {
    /nbeam bgRefIndex def
  } if
  /startinside startinside beaminsidefirst or def
  /stopinside stopinside beaminsidelast or def
  /DrawnSegm 0 def
  /PrevCorrect false def
  PrearrangePlanes
  PushAllPlanesOnStack
  currentdict /lastVecTmpUp known
  currentdict /lastVecTmpLow known and {
    /CurrVecLow lastVecTmpLow beamangle matrix rotate dtransform ToVec def
    /CurrVecUp lastVecTmpUp beamangle matrix rotate dtransform ToVec def
  }{
    beamalign relative eq counttomark 2 ge and {
      2 copy /InvecLow load TransformInVec /CurrVecLow ED
      2 copy /InvecUp load TransformInVec /CurrVecUp ED
    } {
      /CurrVecLow /InvecLow load def
      /CurrVecUp /InvecUp load def
    } ifelse
  } ifelse
  currentdict /lastBeamPointTmpLow known
  currentdict /lastBeamPointTmpUp known and {
    /lastBeamPointTmpLow load /CurrLow ED
    /lastBeamPointTmpUp load /CurrUp ED
    loadbeam not beamdiv 0 eq not and {
      CurrVecLow CurrVecUp Chirality
      CurrLow CurrUp @ABVect CurrVecLow CurrVecUp VecAdd Chirality 0 lt { neg } if
      beamdiv sign eq not {
        /CurrVecLow load /CurrVecUp load /CurrVecLow ED /CurrVecUp ED
      } if
    } if
  } {
    counttomark 2 ge {
      2 copy /StartLow load TransformStartPos /CurrLow ED
      2 copy /StartUp load TransformStartPos /CurrUp ED
    } {
      /StartLow load /CurrLow ED
      /StartUp load /CurrUp ED
    } ifelse
  } ifelse
  /PrevVecUp /CurrVecUp load def
  /PrevVecLow /CurrVecLow load def
  counttomark /IfcCnt ED
  /n1 bgRefIndex def
  /CurrR false def
  /CurrPath false def
  /CurrUpT false def
  /CurrLowT false def
  /ret missed def
  /PN 1 def
  {
    PN IfcCnt gt {
      exit
    } if
    beampathcount 0 eq {
      cleartomark mark exit
    } if
    dup xcheck not {
      PushAmbCompPlanesOnStack
    } if
    exec
    PN beampathskip 1 add gt and /draw ED
    /Mode ED /n2 ED 2 copy /CompName ED /IfcNum ED
    GetIfcCenter ToVec /CurrPCenter ED
    /oldn1 n1 def
    CompName cvn load /adjustRel known aligntovector and {
      connectifc PrevCorrect PN 2 gt and PN 2 eq or and {
        CurrVecUp CurrVecUp CurrPCenter PrevPCenter PrevMode
        currentdict /relAngleUp known { relAngleUp } { 0 } ifelse
        connectInterfaces pop
        CurrVecLow CurrVecLow CurrPCenter PrevPCenter PrevMode
        currentdict /relAngleLow known { relAngleLow } { 0 } ifelse
        connectInterfaces pop
      } {
        CurrVecUp CurrVecLow
      } ifelse
      VecAdd NormalizeVec
      CompName cvn load begin
        IfcNum IfcName load begin
          currentdict /RX known not {
            CM dtransform CompMtrx idtransform
            /DX ED neg /DY ED
          } {
            pop pop
          } ifelse
        end
      end
    } if
    CurrUp CurrVecUp
    connectifc PrevCorrect PN 2 gt and PN 2 eq or and {
      CurrVecUp CurrPCenter PrevPCenter PrevMode
      currentdict /relAngleUp known { relAngleUp } { 0 } ifelse
      connectInterfaces /relAngleUp ED
    } if
    /PrevUp /CurrUp load def
    /PrevUpT /CurrUpT load def
    /PrevPath /CurrPath load def
    IfcNum CompName Mode n2 8 4 roll HandleInterface
    dup /ret ED
    missed eq {
      counttomark {pop} repeat
      (The upper beam missed an interface) Warning exit
    } if
    ToVec /CurrVecUp ED
    ToVec /CurrUp ED
    currentdict /isectT known currentdict /isectPath known and {
      /CurrUpT isectT def
      /CurrPath isectPath def
    } if
    /n1 oldn1 def
    /PrevLow /CurrLow load def
    /PrevLowT /CurrLowT load def
    CurrLow CurrVecLow
    connectifc PrevCorrect PN 2 gt and PN 2 eq or and  {
      CurrVecLow CurrPCenter PrevPCenter PrevMode
      currentdict /relAngleLow known { relAngleLow } { 0 } ifelse
      connectInterfaces /relAngleLow ED
    } if
    IfcNum CompName Mode n2 8 4 roll HandleInterface
    dup missed eq {
      /ret ED
      (The lower beam missed an interface) Warning
      counttomark {pop} repeat exit
    } if
    tir eq ret tir eq or {
      /ret tir def
    } {
      /ret ok def
    } ifelse
    ToVec /CurrVecLow ED
    ToVec /CurrLow ED
    currentdict /isectT known {
      /CurrLowT isectT def
    } if
    /PrevR CurrR def
    PrevR type /realtype eq {
      /CurrCenter load /PrevCenter ED
    } if
    IfcNum CompName isCurvedIfc {
      IfcNum CompName LoadIfc
      tx@Dict begin Pyth end /CurrR ED
      ToVec /CurrCenter ED
    } {
      /CurrR false def
      /CurrCenter false def
    } ifelse
    IfcNum CompName isPathIfc not {
      /CurrPath false def
      /CurrLowT false def
      /CurrUpT false def
    } if
    PN 1 gt currentdict /fillBeam known and {
      draw {
        /DrawnSegm DrawnSegm 1 add def
        PrevUp moveto CurrUp lineto
        IfcNum CompName isCurvedIfc {
          CurrCenter CurrUp CurrLow
          4 copy 3 -1 roll eq 3 1 roll eq and {
            6 {pop} repeat
          } {
            TangentCrosspoint
            CurrLow CurrR arct
          } ifelse
        } {
          IfcNum CompName isPathIfc {
            CurrPath CurrUpT CurrLowT TraceInterfacePath
          } {
            CurrLow lineto
          } ifelse
        } ifelse
        PrevLow lineto
        PrevPath type /booleantype eq not {
          PrevPath PrevLowT PrevUpT TraceInterfacePath
        } {
          PrevR type /booleantype eq not {
            PrevCenter PrevLow PrevUp
            4 copy 3 -1 roll eq 3 1 roll eq and {
              6 {pop} repeat
            } {
              TangentCrosspoint
              PrevUp PrevR arct
            } ifelse
          } {
            PrevUp lineto
          } ifelse
        } ifelse
      } if
      Mode refl eq draw and
      draw not DrawnSegm 0 gt and or {
        fillBeam newpath
        /DrawnSegm 0 def
      } if
    } if
    PN 1 eq {
      /CurrVecUp /PrevVecUp load def
      /CurrVecLow /PrevVecLow load def
    } if
    strokeBeam {
      CurrUp draw CurrLow draw counttomark 1 add 6 roll
    } if
    PN IfcCnt eq ret tir eq or
    beampathcount 1 add PN eq or {
      DrawnSegm 0 gt currentdict /fillBeam known and {
        fillBeam newpath
        /DrawnSegm 0 def
      } if
      IfcCnt PN sub {pop} repeat
      ret tir eq {
        (Total internal reflection occured, this is not supported)
        Warning
      } if
      exit
    } if
    /PN PN 1 add def
    /PrevVecUp /CurrVecUp load def
    /PrevVecLow /CurrVecLow load def
    /PrevPCenter /CurrPCenter load def
    /PrevMode Mode def
    CompName cvn load /correct get /PrevCorrect ED
  } loop
  DrawnSegm 0 gt currentdict /fillBeam known and {
    fillBeam newpath
    /DrawnSegm 0 def
  } if
  ret missed eq not {
    CurrLow CurrUp @ABVect % from Low to Up
    PrevVecUp PrevVecLow VecAdd
    2 copy 6 2 roll
    Chirality 0 lt
    3 1 roll 2 copy pop -1e-5 lt
    3 1 roll exch 1e-5 lt exch 0 lt and or xor {
      /lastBeamPointTmpUp /CurrLow load def
      /lastBeamPointTmpLow /CurrUp load def
      /lastVecTmpUp /CurrVecLow load def
      /lastVecTmpLow /CurrVecUp load def
    } {
      /lastBeamPointTmpLow /CurrLow load def
      /lastBeamPointTmpUp /CurrUp load def
      /lastVecTmpUp /CurrVecUp load def
      /lastVecTmpLow /CurrVecLow load def
    } ifelse
    /lastVecTmpUp load /lastVecTmpLow load
    /prevVecLow ED /prevVecUp ED
  } if
  DebugEnd
} bind def
/DrawbeamPrepare {
  {
    counttomark 6 le { exit } if
    3 index not { pop pop pop }{ exit } ifelse
  } loop
  {
    counttomark 3 le { exit } if
    counttomark 3 sub index not {
      counttomark -3 roll pop pop pop
    }{
      exit
    } ifelse
  } loop
} bind def
/DrawbeamSimple {
  pop 5 copy 3 -1 roll pop
  ArrowA pop pop pop pop
  counttomark 3 idiv -1 2 {
    pop {
      lineto
    }{
      moveto
    } ifelse
  } for
  {CP 4 2 roll ArrowB lineto pop pop } {moveto} ifelse
} bind def
/DrawbeamArrowInside {
  6 copy pop
  /y1 ED /x1 ED pop /y2 ED /x2 ED
  /Alpha y2 y1 sub x2 x1 sub Atan def
  pop 3 -1 roll 5 1 roll
  ArrowA
  x1 Alpha cos arrowlength mul add
  y1 Alpha sin arrowlength mul add
  5 -1 roll 3 1 roll true
  /N N 1 sub def
  N {
    6 copy pop
    /y1 ED /x1 ED pop /y2 ED /x2 ED /draw ED
    x1 y1 x2 y2 @ABDist dup
    arrowminlength ge
    exch arrowmaxlength dup 0 lt
    3 1 roll le or and {
      x1 y1
      arrowpos 1 gt {
        /Alpha y2 y1 sub x2 x1 sub Atan def
        /dArrowPos dArrowPosStart abs def
        /ArrowPos ArrowPosStart def
        arrowno {
          /ArrowPos ArrowPos dArrowPos add def
          x1 Alpha cos ArrowPos mul add
          y1 Alpha sin ArrowPos mul add
          6 index { ArrowInside } if
          pop pop
        } repeat
      }{
        arrowno 1 gt {
          1.0 arrowno 1.0 add div
        }{
          dArrowPosStart
        } ifelse /dArrowPos ED
        /ArrowPos ArrowPosStart def
        arrowno {
          /ArrowPos ArrowPos dArrowPos add def
          x2 x1 sub ArrowPos mul x1 add
          y2 y1 sub ArrowPos mul y1 add
          6 index { ArrowInside } if
          pop pop
        } repeat
      } ifelse
      pop pop
    } if
    draw {Lineto}{moveto} ifelse
  } repeat
  {CP 4 2 roll ArrowB lineto pop pop } {moveto} ifelse
} bind def
/isAmbiguous {
  cvn load dup /ambiguous known {
    /ambiguous get
  } {
    pop false
  } ifelse
} bind def
/isAmbiguousIfc {
  cvn load dup /ambiguous known {
    /ambIfc get eq
  } {
    pop pop false
  } ifelse
} bind def
/isCurvedIfc {
  cvn load begin
    IfcName load /RX known
  end
} bind def
/isPathIfc {
  cvn load begin
    IfcName load /Path known
  end
} bind def
/HandleInterface {
  (HandleInterface) DebugBegin
  /Yin ED /Xin ED /Y0 ED /X0 ED /n2 ED /mode ED
  currentdict /isectT undef currentdict /isectPath undef
  2 copy 2 copy LoadIfc % IfcNum name IfcNum name path
  dup type /arraytype eq { % is an path interface
    dup /isectPath exch def
    3 1 roll pop pop PathInterface % IfcNum name t X0' Y0' Xout Yout status
    dup missed eq not { 6 -1 roll /isectT exch def } if
  } {
    6 -2 roll
    isCurvedIfc { CurvedInterface }{ PlainInterface } ifelse
  } ifelse
  dup missed eq not useNA connectifc not and and {
    7 3 roll 2 copy 9 2 roll
    4 2 roll 2 copy
    %% X0' Y0' Xout Yout status X0' Y0' IfcNum CompName IfcNum CompName
    cvn load begin IfcName load dup /NAlow get exch /NAup get end
    2 copy lt {
      4 2 roll 2 copy LoadIfc NormalizeVec
      6 -2 roll isCurvedIfc {
        neg exch
      } if
      %% ... X0' Y0' NAlow NAup X Y dXp dYp
      8 -2 roll 6 -2 roll
      %% ... NAlow NAup dXp dYp X0' Y0' X Y
      @ABVect DotProd
      dup 4 -1 roll ge 3 1 roll ge and not
      {
        pop missed
      } if
    }{
      6 {pop} repeat
    } ifelse
  } {
    7 -2 roll pop pop
  } ifelse
  DebugEnd
} bind def
/LoadIfc {
  (LoadIfc) DebugBegin
  cvn load begin
    IfcName load begin
      currentdict /Path known {
        Path TransformPath
      } {
        X Y
        CompMtrx transform CM itransform
        currentdict /RX known { RX RY }{ DX DY } ifelse
        CompMtrx dtransform CM idtransform
      } ifelse
    end
  end
  DebugEnd
} bind def
/isFreeray {
  cvn load /n known
} bind def
/compIsKnown {
  dup type /stringtype eq { cvn } if
  tx@OptexpDict exch known
} bind def
/PrearrangePlanes {
  (PrearrangePlanes) DebugBegin
  counttomark dup 2 lt {
    dup 0 eq {
      (Found no component on stack, drawing no beam) PrintWarning
    }{
      exch dup
      compIsKnown {
        dup isFreeray {
          asc exch 3 -1 roll
        }{
          OneFiberCompWarning
          pop
        } ifelse
      }{
        CompUnknownWarning
      } ifelse
    } ifelse
    /N 0 def
  }{
    /N ED
    /CompA ED dup /CompB ED
    CompA compIsKnown CompB compIsKnown and {
      CompA isFreeray {
        CompA isAmbiguous {
          amb dup CompA
        } {
          CompB isAmbiguous {
            1 CompA GetIfcCenter (C) CompB GetIfcCenter @ABDist
            (N) CompA GetIfcCenter (C) CompB GetIfcCenter @ABDist
          } {
            1 CompA GetIfcCenter
            1 CompB GetIfcCenter
            (N) CompB GetIfcCenter
            true OrderNodes exch pop
            (N) CompA GetIfcCenter
            1 CompB GetIfcCenter
            (N) CompB GetIfcCenter
            true OrderNodes exch pop
          } ifelse
          le { desc } { asc } ifelse dup CompA
        } ifelse
        counttomark 2 roll
      }{
        FiberCompWarning
        counttomark 1 sub { pop } repeat
        /N 0 def
      } ifelse
    }{
      /N 0 def
      CompA compIsKnown not {CompA}{CompB} ifelse
      CompUnknownWarning
    } ifelse
  } ifelse
  2 1 N {
    /i ED exch /CompB ED
    CompB compIsKnown not {
      counttomark i 1 sub 2 mul 1 add sub { pop } repeat
      CompB CompUnknownWarning
      exit
    } if
    CompB isFreeray not {
      counttomark i 1 sub 2 mul 1 add sub { pop } repeat
      FiberCompWarning
      exit
    } if
    CompB isAmbiguous not {
      dup desc eq { 1 } { dup amb eq { (C) }{ (N) } ifelse } ifelse
      CompA GetIfcCenter
      1 CompB GetIfcCenter
      (N) CompB GetIfcCenter false OrderNodes dup dup
      4 -1 roll CompA exch 5 -1 roll CompB exch
      i 2 eq {
        4 copy 4 2 roll AdjustRelRot
      } if
      AdjustRelRot
    } {
      i 2 eq {
        CompB amb CompA desc AdjustRelRot
      } if
      pop amb dup
    } ifelse
    CompB /CompA CompB def
    counttomark 2 roll
  } for pop
  DebugEnd
} bind def
/AdjustRelRot {
  (AdjustRelRot) DebugBegin
  exch dup cvn load /adjustRel known aligntovector not and {
    dup dup 4 2 roll isAmbiguous {
      exch pop (C)
    }{
      desc eq { (N) }{ 1 } ifelse
    } ifelse
    exch GetIfcCenter 5 3 roll
    exch dup 3 1 roll isAmbiguous {
      pop (C)
    }{
      desc eq { 1 }{ (N) } ifelse
    } ifelse
    exch GetIfcCenter
    @ABVect exch atan exch
    cvn load begin
      adjustRel {
        matrix rotate CompMtrx matrix concatmatrix /CompMtrx ED
        /adjustRel false def
      } {
        pop
      } ifelse
    end
  } {
    pop pop pop pop
  } ifelse
  DebugEnd
} bind def
/PushAllPlanesOnStack {
  (PushAllPlanesOnStack) DebugBegin
  counttomark 2 div cvi /@N ED
  1 1 @N {
    /last false def
    /first false def
    dup 1 eq {
      /first true def pop beaminsidefirst
    } {
      @N eq {
        beaminsidelast
        /last true def
      } {
        beaminside
      } ifelse
    } ifelse
    exch load dup dup
    /forcebeaminside get {
      3 -1 roll pop true
    } {
      dup /allowbeaminside get 4 -1 roll and
    } ifelse
    /drawinside ED
    /ambiguous get {
      /name get drawinside [ 3 1 roll ]
      counttomark 1 roll pop
    } {
      begin
        desc eq {
          N N -1 1 1
        } {
          1 1 1 N N
        } ifelse
        first {
          startinside not {
            5 -2 roll
            pop pop
            2 copy 5 2 roll
          } {
            startinsidecount 0 gt N startinsidecount sub 1 gt and {
              3 -1 roll dup 4 1 roll
              N 1 sub startinsidecount sub mul
              6 -2 roll pop add dup 5 2 roll
            } if
          } ifelse
        } if
        last stopinsidecount 0 gt N stopinsidecount sub 1 gt and and {
          % 1 1 1 N N
          3 -1 roll dup 4 1 roll stopinsidecount mul
          6 -1 roll dup 7 1 roll add 3 1 roll pop pop dup
        } if
        5 1 roll
        {
          3 1 roll 2 copy 5 -1 roll
          dup 3 1 roll
          eq first not and {
            true
          } {
            drawinside
          } ifelse
          exch dup 4 -1 roll eq {
            bgRefIndex
          }{
            name GetRefIndex
          } ifelse
          exch inttostr exch
          3 1 roll name
          4 1 roll
          dup IfcName load /mode get
          3 1 roll 5 1 roll
          [ 6 1 roll ] cvx counttomark 1 roll
          last {
            savebeampoints 1 ge stopinside not and
            savebeampoints 1 lt beaminsidelast not and or {
              exit
            } if
          } if
        } for pop pop
      end
    } ifelse
  } for
  DebugEnd
  counttomark 1 eq { pop } if
} bind def
/IfcName {
  inttostr (P@) exch strcat cvn
} bind def
/GetIfcMode {
  exch cvn load begin
    IfcName load /mode get
  end
} bind def
/NodeName {
  dup /stringtype eq not { inttostr } if
  strcat (N@) exch strcat cvn
} bind def
/OrderNodes {
   7 1 roll 6 -2 roll 2 copy 8 2 roll
   @ABDist 5 1 roll @ABDist 2 copy gt {
       pop asc exch
   } {
       exch pop desc exch
   } ifelse
   3 -1 roll not {
       pop
   } if
} bind def
/NormalVec {
  neg exch 2 copy 6 2 roll DotProd 0 gt {
    -1 mul exch -1 mul exch
  } if
  NormalizeVec
} bind def
/DotProd {
    3 -1 roll mul 3 1 roll mul add
} bind def
/VecAngle {
  4 copy 4 copy DotProd 5 1 roll
  tx@Dict begin
    Pyth 3 1 roll Pyth
  end mul
  div Acos
  5 2 roll mul 4 1 roll 3 -1 roll mul 3 -1 roll sub
  0 le { -1 }{ 1 } ifelse mul
} bind def
/VecAdd {
    3 -1 roll add 3 1 roll add exch
} bind def
/VecSub {
    neg 3 -1 roll add 3 1 roll neg add exch
} bind def
/VecScale {
  dup 4 -1 roll mul 3 1 roll mul
} bind def
/ToVec {
    ToPnt cvx
} bind def
/ToPnt {
    [ 3 1 roll ]
} bind def
/AngToVec {
    dup cos exch sin ToVec
} bind def
/NormalizeVec {
  2 copy
  tx@Dict begin
    Pyth
  end
  dup 3 1 roll div 3 1 roll div exch
} bind def
/@ABVect {
  3 -1 roll exch sub 3 1 roll sub exch
} bind def
/@ABDist {
  3 -1 roll sub dup mul 3 1 roll sub dup mul add sqrt
} bind def
/@InterLines {
  tx@EcldDict begin
    EqDr /D1c exch def /D1b exch def /D1a exch def
    EqDr /D2c exch def /D2b exch def /D2a exch def
    D1a D2b mul D1b D2a mul sub dup
    ZeroEq { % parallel lines
      pop 0 0 missed
    }{
      /Det exch def
      D1b D2c mul D1c D2b mul sub Det div
      D1a D2c mul D2a D1c mul sub Det div
      ok
    } ifelse
  end
} bind def
/@GetCenter {
  tx@NodeDict begin load GetCenter end
} bind def
/@NewNode {
  tx@NodeDict begin
    false exch 10 {InitPnode } NewNode
  end
} bind def
/RefractVec {
  (RefractVec) DebugBegin
  TransformRefIndex exch TransformRefIndex exch div /n ED
  /Ynorm ED /Xnorm ED
  NormalizeVec /Yin ED /Xin ED
  n abs 1 eq {
    Xin Yin
  }{
    /costheta1 Xnorm Ynorm Xin neg Yin neg DotProd def
    1 n dup mul 1 costheta1 dup mul sub mul sub
    dup 0 lt {
      pop 0 0
    } {
      sqrt /costheta2 ED
      n Xin mul n Yin mul
      n costheta1 mul costheta2 sub dup
      Xnorm mul exch Ynorm mul VecAdd
    } ifelse
  } ifelse
  DebugEnd
} bind def
/ReflectVec {
  (ReflectVec) DebugBegin
  /Ynorm ED /Xnorm ED NormalizeVec /Yin ED /Xin ED
  /costheta1 Xnorm Ynorm Xin neg Yin neg DotProd def
  Xin Yin 2 costheta1 mul dup Xnorm mul exch Ynorm mul VecAdd
  DebugEnd
} bind def
/ReflectGratVec {
  (ReflectGratVec) DebugBegin
  /Ynorm ED /Xnorm ED NormalizeVec /Yin ED /Xin ED
  /costheta1 Xnorm Ynorm Xin neg Yin neg DotProd def
  Xin Yin -2 costheta1 mul dup Xnorm mul exch Ynorm mul VecAdd
  DebugEnd
} bind def
/CurvedInterface {
  (CurvedInterface) DebugBegin
  2 copy /Yr ED /Xr ED
  tx@Dict begin Pyth end /radius ED /Yp ED /Xp ED
  /X0n X0 Xp sub def /Y0n Y0 Yp sub def
  tx@EcldDict begin
    X0n Y0n 2 copy 2 copy Xin 3 -1 roll add Yin 3 -1 roll add
    2 copy 6 2 roll EqDr radius InterLineCircle
  end
  4 copy
  0 eq 3 {exch 0 eq and} repeat {
    missed
  } {
    4 copy
    Xr neg Yr neg 2 copy
    8 -2 roll @ABDist
    5 1 roll @ABDist
    gt {
      4 2 roll
    } if pop pop
    Xp Yp VecAdd
    2 copy Xp Yp 4 2 roll @ABVect exch neg Xin Yin 4 2 roll NormalVec
    Xin Yin 4 2 roll
    mode trans eq {
      n1 n2 RefractVec
      2 copy 0 eq exch 0 eq and { tir } { ok } ifelse
    } {
      ReflectVec ok
    } ifelse /n1 n2 def
    5 -2 roll 2 copy 7 2 roll X0 Y0 @ABVect Xin Yin DotProd 0 lt
    PN 1 gt and {
      pop missed
    } if
  } ifelse
  DebugEnd
} bind def
/PlainInterface {%
  (PlainInterface) DebugBegin
  /dYp ED /dXp ED /Yp ED /Xp ED
  Xp Yp Xp dXp add Yp dYp add X0 Y0 X0 Xin add Y0 Yin add
  @InterLines missed eq {
    0 0 missed
  } {
    Xin Yin Xin Yin dXp dYp
    mode refltrans eq {
      neg exch NormalVec ReflectVec ok
    } {
      NormalVec
      mode trans eq {
        n1 n2 RefractVec
        2 copy 0 eq exch 0 eq and { tir } { ok } ifelse
      } {
        ReflectVec ok
      } ifelse
    } ifelse
    /n1 n2 def
    5 -2 roll 2 copy 7 2 roll X0 Y0 @ABVect Xin Yin DotProd 0 lt
    PN 1 gt and {
      pop missed
    } if
  } ifelse
  DebugEnd
} bind def
/PathInterface {
  (PathInterface) DebugBegin
  [ [X0 Y0] [X0 Xin add Y0 Yin add] ] exch
  tx@IntersectDict begin IntersectLinePath end % [pathseg] t [isect]
  dup length 0 eq {
    pop pop pop 0 0 missed
  } {
    aload pop
    Xin Yin Xin Yin
    8 -2 roll exch % I.x I.y Xin Yin Xin Yin t [pathseg]
    exch dup 9 1 roll exch % t I.x I.y Xin Yin Xin Yin t [pathseg]
    dup length 2 eq { % a line
      exch pop
      aload pop aload pop 3 -1 roll aload pop VecSub % t I.x I.y Xin Yin Xin Yin dXp dYp
    } {
      exch dup cvi sub DeriveCurve
    } ifelse
    % the following part is copied from /PlainInterface
    NormalVec
    mode trans eq {
      n1 n2 RefractVec
      2 copy 0 eq exch 0 eq and { tir } { ok } ifelse
    } {
      ReflectVec ok
    } ifelse
    /n1 n2 def
    5 -2 roll 2 copy 7 2 roll X0 Y0 @ABVect Xin Yin DotProd 0 lt
    PN 1 gt and {
      pop missed
    } if
    % t X0' Y0' Xout Yout status
  } ifelse
  DebugEnd
} bind def
/TransformRefIndex {
  dup bgRefIndex eq { pop 1 } if
} bind def
/GetRefIndex {
  cvn load /n get /nbeam load exch
  EvalRefIndex
} bind def
/EvalRefIndex {
  dup bgRefIndex eq not {
    1 dict begin
      /n ED
      exec
    end
  } if
} bind def
/Sellmaier {
  dup mul
  dup dup 1.03961212 mul exch 6000.69867 sub div
  exch dup dup 0.231792344 mul exch 20017.9144 sub div
  exch dup 1.01046945 mul exch 103.560653e6 sub div
  add add 1 add sqrt
} bind def
/TangentCrosspoint {
    4 copy 4 copy 14 -2 roll 2 copy
    6 2 roll @ABVect neg exch
    6 2 roll @ABVect neg exch
    8 -2 roll VecAdd 10 2 roll VecAdd
    @InterLines pop
} bind def
/NearestNodeTmp {
  exch /NodeB ED
  /dist -1 def
  dup cvn load /N get dup 1 eq {
    [ exch (N) ]
  } {
    [ exch 1 1 3 -1 roll { } for ]
  } ifelse
  {
    2 copy pop
    GetIfcCenterCorr 2 copy
    NodeB @ABDist
    dist 0 lt {
      /dist ED
      ToVec /node ED
    } {
      dup dist lt {
        /dist ED
        ToVec /node ED
      } {
        pop pop pop
      } ifelse
    } ifelse
  } forall
  pop dist /node load
} bind def
/NearestNode {
  (NearestNode) DebugBegin
  dup xcheck not { nametostr } if /CompB ED
  dup xcheck not {
    nametostr /CompA ED
    /CompB load dup xcheck not {
      /mindist -1 def
      [ exch false GetInternalNodeNames ]
      { @GetCenter ToVec
        CompA NearestNodeTmp
        exch dup mindist ge mindist 0 ge and {
          pop pop
        }{
          /mindist ED /minnodeA ED
        } ifelse
      } forall
      minnodeA
    } {
      CompA NearestNodeTmp exch pop exec
    } ifelse
  } {
    exec
  } ifelse
  DebugEnd
} bind def
/RelConnAngle {
  (RelConnAngle) DebugBegin
  /fiberalign ED
  dup xcheck not { nametostr } if /CompB ED
  dup xcheck not { nametostr } if /CompA ED
  /CompA load xcheck {
    /CompB load xcheck {
      @ABVect exch atan
    } {
      4 copy @ABVect 6 2 roll pop pop 2 copy
      CompB (Center) NodeName @GetCenter
      4 2 roll @ABVect 4 2 roll
      CompB
      fiberalign center eq {
        RelConnAngle@center
      }{
        3 1 roll pop pop
        RelConnAngle@ref
      } ifelse
      2 copy exch atan
      7 3 roll 2 copy 9 -2 roll
      DotProd 0 gt 5 1 roll DotProd 0 gt xor { 180 add } if
    } ifelse
  } {
    4 2 roll pop pop 2 copy
    CompA (Center) NodeName @GetCenter
    4 2 roll @ABVect 4 2 roll
    CompA fiberalign center eq {
      RelConnAngle@center
    }{
      3 1 roll pop pop
      RelConnAngle@tref
    } ifelse
    2 copy exch atan
    5 1 roll DotProd 0 gt { 180 add } if
  } ifelse
  DebugEnd
} bind def
/RelConnAngle@ref {
  dup (A) NodeName exch (B) NodeName
  @GetCenter 3 -1 roll @GetCenter @ABVect
} bind def
/RelConnAngle@tref {
  dup (TrefA) NodeName exch (TrefB) NodeName
  @GetCenter 3 -1 roll @GetCenter @ABVect
} bind def
/RelConnAngle@center {
  (Center) NodeName @GetCenter 4 2 roll @ABVect
} bind def
/GetIfcOrNodeCoord {
  dup xcheck {
    exch pop exec
  } {
    nametostr exch nametostr exch GetIfcCenter
  } ifelse
} bind def
/connectInterfaces {
  /relAngleTmp ED
  PN 2 eq {
    pop @ABVect NormalizeVec 4 2 roll VecAngle /relAngleTmp ED
  } if
  PN 3 ge {
    trans eq {
      @ABVect NormalizeVec 4 2 roll pop pop % remove Vec from stack
      relAngleTmp matrix rotate dtransform
      4 2 roll pop pop
    } {
      @ABVect NormalizeVec 4 2 roll VecAngle /relAngleTmp ED
    } ifelse
  } if
  relAngleTmp
} bind def
/GetCompRange {
  2 copy gt { 1 }{ -1 } ifelse 3 -1 roll
  { exch dup 3 -1 roll inttostr strcat exch} for
  pop
} bind def
/CorrectDipoleIfc {
  (CorrectDipoleIfc) DebugBegin
  dup dup 3 copy
  8 -1 roll dup 9 1 roll NodeName exch 7 -1 roll dup 7 1 roll NodeName
  gsave
    tx@Dict begin
      STV CP T
      exch @GetCenter 3 -1 roll @GetCenter
    end
  grestore
  4 copy @ABDist 1e-7 lt {
    6 -1 roll
    gsave
      tx@Dict begin
        STV CP T
        (TrefA) NodeName @GetCenter 7 -1 roll
        (TrefB) NodeName @GetCenter
      end
    grestore
    @ABVect NormalizeVec 2 copy
    8 -2 roll abs exch abs mymax -1e-6 mul VecScale
    8 -2 roll cvn load begin
      IfcName load begin
        X Y VecAdd /YCorr exch def /XCorr exch def
      end
    end
    4 2 roll abs exch abs mymax 1e-6 mul VecScale
    4 2 roll cvn load begin
      IfcName load begin
        X Y VecAdd /YCorr exch def /XCorr exch def
      end
    end
  } {
    10 { pop } repeat
  } ifelse
  DebugEnd
} bind def
/ClipFadeValue {
  dup 0 lt { pop 0 }{ dup 1 gt { pop 1 } if } ifelse
} bind def
/fadeto@white {
  FadeFunc ClipFadeValue @S mul @H exch @B sethsbcolor
} bind def
/fadeto@black {
  FadeFunc ClipFadeValue @B mul @H exch @S exch sethsbcolor
} bind def
/fadeto@transparency {
  FadeFunc ClipFadeValue @T mul .setopacityalpha
} bind def
/fadefunc@linear {
  neg 1 add
} bind def
/fadefunc@squared {
  dup mul neg 1 add
} bind def
/fadefunc@gauss {
  0.4 div dup mul neg Euler exch exp
} bind def
/fadefunc@exp {
  -6 mul Euler exch exp
} bind def
/FadeStroke {
  /FadeFunc ED /FadeToColor ED /@T ED
  PathLength dup /@L ED exch div /@dl ED
  mark
  { false counttomark 3 roll }
  { true counttomark 3 roll }
  {} {} pathforall
  currenthsbcolor /@B ED /@S ED /@H ED
  newpath /currL 0 def
  counttomark 3 idiv 1 1 3 -1 roll {
    pop
    { % lineto
      /y2 ED /x2 ED  x2 x1 sub y2 y1 sub 2 copy
      dup mul exch dup mul add sqrt dup  @L div exch
      @dl div 1 add floor dup dup
      4 2 roll div 5 1 roll
      1 1 3 -1 roll {
        5 copy 4 copy 2 copy eq not { fadecorrect add } if exch div VecScale
        6 2 roll 1 sub dup 0 eq not { fadecorrect sub } if exch div VecScale
        x1 y1 VecAdd moveto x1 y1 VecAdd lineto
        mul currL add FadeToColor
        stroke
      } for
      4 1 roll pop pop mul currL add /currL ED
      /y1 y2 def /x1 x2 def
    } { % moveto
      /y1 ED /x1 ED
    } ifelse
  } for
  pop
} def
/TransformPath {
  mark [ 3 -1 roll aload pop
  counttomark 1 add counttomark 1 add exch 1 roll
  {
    counttomark 1 eq { cleartomark exit } if
    dup /curvetype eq {
      7 1 roll
      3 { CompMtrx transform CM itransform 7 2 roll } repeat
      counttomark -1 roll dup counttomark 1 roll
      7 roll
    } {
      3 1 roll CompMtrx transform CM itransform 3 -1 roll
      counttomark -1 roll dup counttomark 1 roll
      3 roll
    } ifelse
  } loop
  ]
} bind def
/DeriveCurve {
  (DeriveCurve) DebugBegin
  exch dup length 4 eq not {
    pop pop 0 0
  } {
    aload pop 5 -1 roll
    dup 1 exch sub dup mul -3 mul exch % P0 P1 P2 P3 C0=(-3(1-t)^2) t
    dup dup -4 mul 1 add exch dup mul 3 mul add 3 mul exch % P0 P1 P2 P3 C0 C1=(3(3t^2-4t+1)) t
    dup dup 2 mul exch dup mul -3 mul add 3 mul exch % P0 P1 P2 P3 C0 C1 C2=(3(2t-3t^2)) t
    dup mul 3 mul % P0 P1 P2 P3 C0 C1 C2 C3=3t^2
    8 copy
    0 6 -1 3 { -1 roll 0 get 3 -1 roll mul add } for
    9 1 roll
    0 6 -1 3 { -1 roll 1 get 3 -1 roll mul add } for
  } ifelse
  DebugEnd
} bind def
/GetBezierDeriv {  % t on stack
  10 dict begin % hold all local
  /t ED
  /t1 1 t sub def % t1=1-t
  dup length /BezierOrder exch def
  /Points exch def
  /Coeff tx@FuncDict begin Pascal end BezierOrder get def % get the coefficients
    0 0 % initial values for x y
    BezierOrder -1 0 { % BezierOrder,...,2,1,0
      /I ED % I=BezierOrder,...,2,1,0
      /J BezierOrder I sub def % J=0,1,2,...,BezierOrder
      I 0 eq {
        0
      }{
        I t I 1 sub exp mul t1 J exp mul        %  i*t^{i-1}*(1-t)^{n-i}
      } ifelse
      J 0 eq {
        0
      } {
        J t I exp mul t1 J 1 sub exp mul    % -(n-i)t^i(1-t)^{n-i-1}
      } ifelse
      sub Coeff J get mul
      Points I get aload pop 3 -1 roll VecScale VecAdd
    } for % x y on stack
  end
} bind def
tx@IntersectDict begin
/IntersectLinePath {
  3 dict begin
    PreparePath dup length /n exch def
    2 copy ElongateLine exch 3 -1 roll pop
    /isect [] def
    /t -1 def
    {
      /n n 1 sub def
      2 copy IntersectBeziers
      dup 5 1 roll LoadIntersectionPoints
      dup length 0 gt {
        /isect exch def
        0 get dup type /arraytype eq {
          aload pop add 0.5 mul
        } if n add /t exch def
        exch pop
        exit
      } {
        pop pop pop
      } ifelse
    } forall
    t isect
  end
} bind def
end
/mymax {
  2 copy lt { exch } if pop
} bind def
/debug {
  /@N ED count dup @N gt @N 0 ge and { pop @N } if
  copy @N { == } repeat
} bind def
/debugComp {
  dup (debug comp ") exch strcat ("===============) strcat ==
  cvn load {
    dup type /dicttype eq {
      (plane----------------) ==
      { == == } forall
      (-----------done) ==
      } { == } ifelse
      ==
  } forall
  (================== done) ==
} bind def
end % tx@OptexpDict

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
%%BeginFont: CMMI6
%!PS-AdobeFont-1.0: CMMI6 003.002
%%Title: CMMI6
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI6.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMMI6 known{/CMMI6 findfont dup/UniqueID known{dup
/UniqueID get 5087381 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI6 def
/FontBBox {11 -250 1241 750 }readonly def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI6.) readonly def
/FullName (CMMI6) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 114 /r put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFB83E8A2A6085DA11
61B1632328B94B21D3CBF2E7752D441A2C9A03F6681FDAB37C4B67D5857720F7
0C4BCEE266586738012A2237A85FCD0425DA7E8E8632543F5BD5D50F9DBAAE69
9E053AECA6027559DE42F7291EB381D866F1293107553809861D43508C6F2341
5E4FCC431AF4A9B3660386AE63E877DCF5E513D0D5702B98D58B34897FEE163A
75CD6F5A2196F91CE5060CA5E72F9C5F79D18F242EEE58135BFAB02D5CA430B6
D1B9A376849751A45E52577B1810C4F0C7F6C8196071D5B08FDB731C5384CCBF
03B460347E0CAC959E4A12620B6C2ED62E06A241D1637F418B5599A7FF3C1390
7AF66A00F7C31B4EDF249C56C268EC9D546CD0489DA51B734C8292CE7B3D9E30
71448C85ACC64FA99B2DEA91AA4CBCBBB9DE20833700AF96395DEEDA3FEB7D6E
D6E3BE4A62CBFA18BD0471C14F3A2FD025C88E8166A9830C5B5B94624A3D6482
D1A1D83805D0EDAC1C79EA858A523D9FA3356DF42BC01886E77F6AA6B04E4E3F
AD107D861FC626F0A439BC3F125D48649E5101BF79C71507FDACACBBB4C4335B
C41A5C15ADF1DF69E1D68C3EB9BE30BDD5385F81D26EC8F2F206C1C7032B9EB7
0392BBCA23B4693686AF8D2E1ACB2FBEE81D75667CD1DDB906BC5B675660ABA4
E63429F16623F20B6A040E4942107CCA26CF6C1F52DEED9EC7EB15BE4F18F2E3
9ABDEEAAEA9AC41E9F20C37C54B33F609F5835AE5A1EC9D674DC50FAFF6D3511
2198195590F62B3B8A6FC8C3431BB8895A2F910F0361062DE32CDA9A7F41E761
B09BD8545CAA2D7124B5688B54705AA52E4716E36C0303FEAD38E0510B3CB496
6C30B115C37E02043D47B4ED796C671E30360800EC13F0F0FF3E0DBF5A642396
EB0F39A9DAF0974678EA1D041F08BD73867065DA91B044EF2AB15FAA6546031E
189936C1FD302BCFBE55EAF369DBA4895DD0996BF7292762551A86C8A3604E9A
8AD29E38BF6FD40172051EBE7C694249F3378ED0139D37EEA3ADB66F3A80A1D9
9C3655F054CACE93BA4AD42DC78A03F42455ED1BD5C122F234F21ACEB8FEFF9E
3BFE0DB2DA6D368478299ED63912A234ADB1DCCF1E519AD20772B71F8522B5DB
24E9658BDC1333D76F07F63D81F7A51D12C445ABF698092A24E5E5C36A52206C
0C41F7DCA529BB0A4D146DB6B4B341459FC17FFA357CA5F93DBCF30B61374613
4846D619423BCAC59B7EB40C14C70ABD985754A0094C98350D01FE9FA371B0F4
38884690DC7700C49236EF68BD6E806E8937AD8B77648F552C0C907007465A76
1475BDD3FBE1CF69C706E703226471C249A3448F81C240ADBE4B5474216D0235
6B0816BB6935A2704E851E20C002F85B653BB0700915B358DDC168ED3FAE3D91
8280A5CA5C2708D622B03DC47A70E5FFCAD5A7C8D9AD563857BBEF92A3BDB588
8B5B55CC9B960F20CA4AEB598DA8488004DEDBC9671488011E836D9D8B6251BF
256D08E6F1808E9D498449DF1F18E48B310D561D4DD3146C2BA64D960E66447F
6DA8B07194E3BFAF662C00737BB7222B55A5CC206A1C46F252ACF93D2063BABE
2BAB874C01AEC438D3F86AE37C9D7FCE4077F5B5785E12C1E0B685134CE2E8A2
2E4DCDDAED2D53D13014E428FAAE22447763D4693E82600F850CA4A49E1ADC5D
C8DFC16E97B9F6164095CF7F31373B591F815621F45DFF77BFBF89EF60C9F50F
0C2FBBA4EA9602E197B9447FAB6AB57B19B1C801DAB66BF7D263F6572B9EEF88
E06744C1FE197B8EAA71E1EB67716B7CAB30C859A2D1B2DB95ECED02B83FBA32
E62F97EE4403FADEC936CC8DAA161F7B509B2723BA2B735572A80D7D087E6395
6A9D34D5963E3C6E37F307C66D1CE551D2F055BFCC7360FBE93ACAFDE2B1A849
37FD373F62BB23C1A2E3DF61C9452A8C995B03D44D6210A968C6293B4A3BE662
C7B0B59E6EF6D53FD293B2C290436B0C448E7D15A63533DE321643E53C85EF8B
060C434E46A736EA617EA00D185323460E77B95C49070B035194A2E7693C3B15
104ED7F56FCADABE49F27F9A576B354C574B5BAFFFC57FE9AF02FBD87B8874A1
24C53826659BEB1EC50446AC26EF3A95877ED3D81D33A8BC1BF7473FB9C11ABA
0F27B38EEBDF77D3D3EA63AE6022DB0D4F1125DF274B86EF0A4A263E108D6044
7A885F5E87362293A53F457CBA6C911D23653DA7CE4BB7D4FF4481AB97C0DD81
C13515F0E3BF8A7E8DE2CE69B25BA9C185D9BF31A65DD290B0D4FDF40B61E2D9
AF92BC6468B3F5AB5D5B88710C489ACC69198D697055B39AB3DE8B3733825C5E
6E763E2698574381A01352A7042A36EA96D17DD2EEEAFF04ABF7BF7D877B0FC7
B6BA51BA994D431F472B6EC4B4C327399576470A1773BCBAC61CDBF0F95DA6A5
0BE5239B7E9CD39E1E4D27EF6695D1FB56D4CA2C2370509547D6D01273CBE6E0
66A696C35D2D0282CB8C85D7B1C51453A0AD0BC80E1D183D11AA78879643D9D9
A3D0B2BD8EE3EDF29483CC5871426232A20CB058EEBDAAED85378B163425C270
B0F7BB46B7D1B89CF84E6A06791195FB17F11F34A2548FE424DE10E376B39A2F
DD9B0BA2F2FDF3ED4AACBD0D60E67C0749D6DCBDE6E79041398DF3FC8D9B6CFC
693B870683CC425C52705902DFD324E157C9829F25B14A057AA92AFA17F156FB
0BA949698EAA0657B03D9538288D887959EF24A427EE7EDE47F304A1A6A715FA
2966273831B5B3A9C11021C153E67A73FA606FE3233C3DB217404C6AED6A4C59
DD4C2A98B31AF5604D8DE8354448B4CEC66022E756B0056CD32E9B002ADC712C
0545C2C16D9457E271D98A4ED7DDE01BBD1856F5C3DA28794D2C7951FE2FE6D9
18643CEEC41CA4A3464D3D3A102653CD6EAADA59CDD44918523B8811C2ECCABA
AC0D188F5E07B37AFD56006B10B32EDD179F4DA693EEBF4DF5425D996585F21C
8780A4D23D24FB0618C12DE65CAD42A0138E28A100257978EDCAD168C55C6F07
78A067F0299890356C2A184820A554FB07448395ECE36C45211757552E288ED3
7DFE46CB92EB2070442AFC85864A45000C4854D728096AD3D4C552EFC26DB6B9
C340358451B50AF9F1B35C2E32D495DE85B5848D78940270DEFC07A14D960730
878B5B55916FB40FD805116C9C2AC8C6D4645DA67A978F1C6FE705EC188DBF7B
FE7AD6769F2EEC4A9B05306D5BCD6EC3A240D6A29ED07D1D82E697DC8CC391AA
015DB6BCD1DA5C9A5A7BE3C5936681215E859E9837027D108A54F42AB24E38C2
4A7D8CF3264AE049D4B1AF48BBC564BCC88AF19D37DD81CCC431D0C554DF29A6
94ABDF8126EE4FE1DFB78559B9BF36FAFEC9791049C865694F9E2FFB7A308FEB
EF0195FAA6BFE7A081B65C5125623903828372F117EE17E588B2FA26DC9AE37D
9A6F0043C019624D3D87AFDB4B90C46AEA78919CEF5D7ACEE316F30EA0229742
55E02E0E2533CAD78CE9BD6E0260A695D776ABA229D89CF9BEA92CE0397821A8
830A557021B3B90CE0B07A4B34C24337FA3FA4A3728B6E013BA01071CA7FA667
6FFB4BA3A28B5D5614ACD4E80E00938C2589CC6CF885A260AF7589240BF8987B
20A19FDAC73FAEEDD93EBCB3D46F735214164AFAF1A7828FE96E2BF7CE1EA46E
FC1FC4527A0ADF2B81CA51E3D96F3E786511AF00FDDD9764CD3178362CF9DEE5
F05D100EC21A301F40FEFC3EF05AFEC140A9466AE68FCFD6CAC1A143BAF2B7BF
D0DF808F0CF87FE2399CD9D2DD424227CA7D4073ED002CD555FBE8057A797B60
313D18ECDD779FA7289D4E7BF82D95A7535CE3F0F4164AF239AC666653736654
C13E436B526EC5A1DC97E1D85C4EB563C7061AE1E81F0B38BC45B17C15FDB0DA
E5F6332721A925D4DD5A97BFF3E3F11D4F4F43BAE4E73A294D314527397F03CE
AFD12DDF9D07DAD8D6C8EFAFC2F52E20FBF62026810C0C31A1EF71FBD612654D
C68B7A24112F0ABDD20EFF3DADBE447AF9CE568F873ACE72B63283CB26B89BED
4B3315F26084453B1EB0877065A76E7B704B27F93DBEB365574A78E92FDB4B82
D6ED91A1728F571FC9CAB636A6E81D0C1C4F5E3F6F4574B6EED48BB61EFDDC80
1831E2AB9327B37881F0CA5D5265575F210BF4BCD8653B4193F74E3FF65028F9
2968B8127C68CA2919DDF529EC882EE99901146CA629A07B4DC59E7868DBE083
6E546C5769655EF6628FE2EA78AC891D130108192053D5056A7BD06C09592AF9
6310B3586A2609DB94CB0079550358F5547B9FBB2B77917A327EFE3F972C7263
54076627B4DD74638C3105FB25DA246484799D5326EE80503F18672B893289CB
1FFF8D3F662FB33E93025D86803551A8A1DE363D1534BFA3EF968871B19FB189
DAD841C177E2AC98B6B69A78048221C5EBBBB86511939D3A9963B3BF021185AB
0B26CA7D0A779DC2F7693C7E48286BD60EE46615E31B93FB0E6992AE20C792A4
72AD6FFAD6682D0F606807D7AE63A6280B5967FAB889DCDF0F76347CE302FAED
A59E1B1AB785D9D0ED695A0D05DD3DF0EF0B275AFCF9EC7031E1357E99A3DB85
B4D137567875F7580E2BEC96B08C97ECB40876000B610E0BFE81E7884C9BBAE6
6BE9C2C612475396BC10EC7FFBD1118A7971FE1971DFD0CB677ECA65DD837B5E
C7D36FE9F20A15A941F1E77C11093C902DF5B7639580B9C0E4AAD13518E1901C
1162FA095F301848770C6C618E371A0AC3463D0D94221EFCC0884B21300194B5
97E03BCD5C4878CEBF352EDD1D2173B56C9B6A08BF3F33419DF226E1633CC5CA
A88A57AA85E21657569916E9B4B79E51B5535A57B2D6FA3EED1D0AA32DC0165B
12F8F5A681040B456D8DF175AD6053A2954F327F4EB4CD453A056FB1701242C2
59755058640C62632C764E002CE928E6B908BB137C28630A3CDBC7C34CF2B643
FFAFF20E345A86F31756C78A8EE2B9B1C5DAB2C863B29A44190770FD90BC6AED
0C25942BBD6A370C21650947B49AC8EB6825BE65DEFAFDDA32007754DFE0273F
B995B8986E505F95E58A3F8873545DDA6F3FFAADE992F3FF7B2DAB76D663280E
CF2BA18BC8871A7C361AA3600B192948CB918FEB0F2900AF2BCF169576828325
449CBF0C7AEDC299FCBB061F491469B9ED1D56771A03F9F202550E17FDB15B51
4772B2F06E6AABA4027D13E8730999532DB2475630D2F8EB98242E36F5B45A94
2D8083014B63A806BB9A01906143482C614B5CFBE8C5354A3F2438B2160F6DC0
81AFCEB201EC67F66DC5808C907A3C6CB664F444D24095D9A11D4978A7B57037
87C67552FD59F5713D0FE03462F9A1A323BB3EFF0AAD61B1792CB109CA9AE4D4
D7F7FBD3FB91258DCFFB4634669FA13E03C0AF699165311CBF37D24378022787
87D1320ECF878F859149B2F994E700A32CB7253297AC58753E4583A08A1F83D5
CBFF10F2D26D71CDB20E1C69A666E9C4D23BB0E6BF1097FBBB204EB736E61FF0
C3FDE1986938F8099694B9F998B3C735770FF21F73B1A6B750498BFD21184F11
5E6AF0F1FBB08EAD436C4AADE1E6B815F5E58988C113B4B2335A340798BFB201
40586D0BCD6AF5A08CE9AA042910197F47D98CBB4411A6D435A46F46B3964F85
032D7F8D880732276A8FD24DA772F642F06C9F3EB4C9090AE4A3AAE67D8768A1
7B2A57E15B7FC626450372F40E3EE28D8D997CCC8CC89C644461D1110740407E
F6D884A0503E05AF830994AD0CEEA924D935749F6EE9F2DD65A58ECD59229918
A303C90E19E9C411FAF24AD5E9B786178F8182692CDD508A4755123B4A594AF1
A8E7287456C1CE2CA485CF4CF9DEE5238AA7328DA204816F98B7EF49EDB30875
3CF8C48E0465BFFA8F2A1CFB6A8F165B63CC80F54C669D02BFD9A0EA0FDE2B40
D69F0101AE4D2C10185AB10953019FE7D373BF40C2F6D4E36693F118866D1267
12BA7987ED4313E8635DA02A4FC1F7815105F8EDFE8004A8801CC1AFA8D123FD
1768A6C39E838BD489C6BEFFD3BDF650DF48D5F8D99DD5A2E8AD235F2CAE8BC9
C13AE9B214CF3FBFAC7BDFA54CB6E675273330608BD35600775FFB2A96FF648E
DF55A78B43CF54CABC0DA8D574CC5C5C62E9D658EC62035EA5028767749E48D5
658212BD39C7E76ED0C6F3E0A1D138A0DB8BE574987AF1E43070F1F12C560009
F48993FAC935EB56A5793BA13C28293601D268B4880F9BC33D553FF3B6A7900D
37900BD3B4B558C84BBAB09B4BC2B14D32E49596DA090E586E28D560903B9744
7D014EF2A6AC4F711A025DBBC841F1C1C93BA1F8327DFE33C803A0993050D590
C7AE262261DB7D04B9DD91F89927161A69E14BB2A48D29578410E312A4793101
B6CD65B298988AB798F45B76E1F58BE24DB207C7E07014E17525B436D41FDB28
D1072CBEB526E17C72DDA00ECDD06394940DEE8BD02CD3C81BFD12BE0568A459
0F53010A0655942C932905FEE87183CE357887E2ED286DC1E89F2F401CDDDFA9
B418F218D4115043892882C09F2E3749D4671E75AB1AD01C78F59FE3F54276D2
A91512C21C68180CCC0E147E834002D7799FF393842CE88BEA714672E1952C9F
7CEF2FD0115B0E292079909A7775769341A7888CE6063537ACFF225B4F396972
41BF46C599D278906F3BCFF81DF941BF5888DE8A53CB0A2D71610CDCDCC1760A
7844F89FCBB892AEA853CF5D967648995559EFE852C95D2EFDA2CF063500F88D
2C83B615618831267BD8F5438DC53C6433CE7347E9C55E103B450EBED6229219
20E979C00B0B9D86345FC3A8EA2B049B7E148A7AA1C859AFE93381DA74CA578F
8FAAB28175D5B57F6A74F9869B2F530009E953913C6925D0045CB2E817A17742
3C5B7574E9BF3BA7B769C161C2496EA2D346B4E19E434120FE92A0ED3F4A9ACC
A8BFE55F04D17DF035D01FC0B06182D8C27B6D32F36551B9AA56D61FB6A34254
D0DF918C6716D8D05B973C8BAD5AD52C06EF3C6503D4E0F7F791511C79AE74E4
4B707612149D583C5D96E534CB45F1E7CA5B23642B1BDBC881FD8E4F66CCEE96
7CC0509B5CFB0B3596682A81E682DAF6AE58F605FD7A1F414F62572298AD8491
B76D0A23B4AC731FB8E7682F506B5CC02F7029827FFD866EF4DBF56E07E7743A
D42CE65B38EBDEA193CE5B172E87DC88452C3DE192E363EB9DBEC4EC65F53002
BE9E94180F73B53CE1E8EE9333DC86DF5FB2561FA1F9B2511962CBEFACA739CC
38A286651CEFBF451FF6568CFFBA8AA68555181147C1CDBA18C4F5C77BA8548D
2B1BA37E05EAF7F69879C3ECBD02783028CB1A8649842EB71023F89CEB36CEEF
A9B04E9ECB0577536B88ECE7C1D81B0D6D5A478F8E92DF83D194759437088D7B
E93C6AFD0CC6D568E60E2F1265A6613F97A6C4068C8EEBA70F6CC4E88A80F65D
EA7B498395390A74BA57221B86611D3EE5DC4632F139CA8A15E5B9D2DC97088D
7CC65197CD93F4803BE4246394F40EDC2CB4904BC273C597F13C8DC680245A3F
F1AF2D7BCE5D69E9CFC81E5E9F46927C5F55C719AFDB2CB1AF2E4D55B0E3ACA8
6BBBCF253CCFF8F02B8542F296CED0EB8A06A88549DC959E22C3D6C48F310452
22B32C44B046A61A4F7F8AED613DCD3C464DB2280D56E517CFD16DC32C83EACC
D3E936D2F3A883B265444D818393E30EE3AA59E6FA73DDC421F5A0FC8442F89D
CCE98189ECADC080F1973E14012C2B87F6A8289D7E1B8958E2220FA1C68EF82D
01A2B3516F320EE84950A6A54963ECD6F606EB5693F6A0BC74CE2B5AEF26AFE6
7BF5D5357C3D53CFF50F60599F2165B6E742A331B47F46D977FC721867EC9CE3
7E9BFA2149C9E3A47AF0D0EDBF29C1E6D92BFBBEB52F816EFDBA9CFF83AC072C
5FD264F8F24CD5A1C0F68399FF4B29FD77C4A54D8296523413DCE938ABBAEACF
072AE89B1CAE513DF9810B85613549445F8E854424603C5A41EDBB163CB453EB
25FA6960DDA56235A98AFC2B6D4481AA22D658689706C2D3E82FBD3670656DFE
5CFDD11126F0203FB1C313C40B939E50D403E6B0DB7974EB7B4AF1F62FE21BB0
3981F30DB354573EBAB44505BF61140F4F290AFDABE3AF87DE6EAD956EE46A5B
FE5622A3D4294258E1468026A5B44B87826DBC0401EFD750C513DC02C2DDA3D3
5A961160821762E0CF790CCEDC1C10CA3C2BDB1FCC7741E96A56827F45861F44
E12CC57F51F7286598BC4C8F32F09A20F6BDC1DFA4FBD51E2EB9069FC0642321
26BD68902E578246E22E45D22AD0B88FDCF7EE085F7EAC834D876210FC9D6CE1
DEB73B79AA3412E60C0FDABE6447480FC44901AFCE00A10E494018C4673EE2F6
3B1851C3BD5AECF2F0E48D506B38E70568248B4CF9A122D2
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMEX10
%!PS-AdobeFont-1.0: CMEX10 003.002
%%Title: CMEX10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMEX10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMEX10 known{/CMEX10 findfont dup/UniqueID known{dup
/UniqueID get 5092766 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMEX10 def
/FontBBox {-24 -2960 1454 772 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMEX10.) readonly def
/FullName (CMEX10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 26 /braceleftbigg put
dup 27 /bracerightbigg put
dup 82 /integraltext put
dup 90 /integraldisplay put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23E7BC2A6E71BCF95FF3DA948
1A27320759222BD7BC7C1A533E90058824F06942F0234C68671083E0E4708398
D246C94F9C16DAB6563651BA33D86273FD2DB3C50C106F3CA95B1C79778D0BEB
B99D9CFB38E41BDCB4261A86A23E2CDEE4837D9B6F0E85ACEAA984C344A63709
EA35B61F08821338D363D172BD185A3658F43052AE1E61D879C99DED7F6D726E
FAFEBD881BDDEA91FB09DB75675FC74AA2BEA8771027C7A51BF849F8E765B870
8F7CC0871F301ADEF9B71EC3C607B2F51325AA5B3DD74A2C5426E7B329FAE84E
94A159C8C9C35E27A0FC93FB98A4D616750DAD50068A5F0EB96B8228946E5CC6
B69E93D262C92E3BC7161313156E380A2ABE27BE400A23DF95E65A4F76B3FFE4
CF3CD141B006C487EBC73A5A101466D4388FB2CF1D9439D0714720BB58537B7D
B3EE1F04AE117222CA5F0E5942F7A875D55D91D63958B1A02405D9DE08109B8C
7104F2D109EF7074852DFD74CBE02E0F3704F2BACA14E05EB1D0D9021EFAC23F
76C2389F8EA237D2E2AB6AFA83A725E16AECCAF025E05F1B1B5699D761F62A46
EC6F31B0FE4769BD0D66821592ADBAEFA9EB454CF1402FE870F5F96D09980C1B
8B6D2FE88BE56032C1959E6C3DC319B6A7353F3AC629CE5BCB947B4B235426E9
4769302817AEC1ADF50E50265AB488017634AF824D44D3C8423FC7CAD97F6D6E
6B34313637687FBDE3BDF6FC951CB41277D8EF49D14767B59656D214C9724DC4
0523EF896F4E48434FCC5D8423F07194C54D48C62AC29001B10C9C8B514B24C5
CEB60FF68D36749711E108DBB52738760FCF6571D5B04E58F24CC0247834B412
D0F6F8D7F1573F23E3E399D5A3A3A37FCFFEAFA044A5694D2458EFF2BC1F7650
8FB0A27C505A20C16776EDF94BEF9DF702F3C64DBC1939BEC0399B6AB283F832
DD8FB358F701CC075C596FA7B0ED7A9304DC73274C8169337D55124CB748CE26
A635B2704D8F65E23CC0FDA3C57ED451F8FDE7B6FBFCE2746F5AEA11B065A6DC
C3D200D962A034DD6757991BA62D8DC0408F49083D48799B6097B61343365A5B
30FB02E9CDFB5104FB751BE8A268EE55C1208DD8B29D5635014EDE9D0D94BB64
ED5643B3049027925BF2FD7EFCB631E01269B731AE12AA6226B2656F035C7E92
959C4A21BE40D7C138C8FF28C9FD4B768CF25F08859AE84FEE6EA18C033B3659
D9EE250BA5FF2568E8BF7684A93BED7852251D1ADE5DB815AF3AAC36D1A500C9
41D1BF3A1926828CD1F9E501ABE441A07B1B96612CF0728AD5FECF7480421F46
0B18E06D2FF1A5B1183459C59517976474698BCE18A728515CD489A83C001AFA
47BDA929F60D0FABCD8786AE16EE18615C37D18703571936A365D334BACA9BA3
08E2523132887B5EE95ABCE8581C78C3E858DBF35ADD56A1F6C2489AFA73D1B2
379C5064DAFD30FDA84581FDE268B470636EE35F21648955513714F6EAA08AF0
249C937721DB0E93D95C4DDDFB0948051953F39C6D2D811D3FFDC25F786E072B
2A8A1F4830F9CFC34666A1D3F13268980E9A26682CAB64817318A1E266F3D2D2
DE4EBB3EDAF0E7B526C838CBD7F37E74A35B1C3EB96DA4099DE689A53970D4CB
9AB355E93EB294B07DD09356C338BB4A61C147BEDC152E58DC92FA69846E4829
551A5330006793CD88523F7B3AF7B4475C531C67A4B66A603597EE72C4ADA491
BF13706F341125CABF37FADA554FDA0BA5534C7AC35F1829E250C885D9A9983C
5D1FE8CE24458A8B13E5C7EA22BF1608AFA96B83C700889A2A6C9C4052DCB892
6CAEEAA9E7D7F3E215019719B36A5DAFCCF2396FA0C04AD99A7C23772A7BAA64
D1FABE8E476EAE9FC1A3E08CD6D1DDC6E087934E676BDFD1528652B6B9A50A35
2029466364300AF4CA3C5883F6293A7104617D0858B3E43D43752F814654A938
A44C33410BA0E5EA7BF55D4F1D57E27921DB05C059DE29BAC1BFC9B607D2C5CB
1DDC47793984FBB18BD99E1DF7776B563A55E15DF024D6D8E6ADF62F16F602A6
7DDE1C68637672AA9C7A1250161502ADDDC1B4F6011A9BD5605B73AEDC37CE4E
4467C838B7692C4D541EF87DB41123F9DCCFFA971553A5D9B0E7EC539A28750C
8554383585CD8B93DF731A301D85BA9ADC95B4A3A237794C30230A82300B6756
AE5A46A090958109C5565EF60B0B16D6C0A16A56644B05D3371DABBB67ED9BB8
9BD3983575D371419C7568B2556649402AFB9843106729E4EA87B3F9038218A1
F820B098A1271E330708432567297CCDA332B555A40C62BAEB16330175D28AA6
13AE6939CEFA2334E3E890B66A73277F0B63B1FA59F856ABECC5FC0A50571F5B
0747FA554F5FC72A51E215304B2E44701A13E41D91397B204C66AAB3D101004C
7FEF2D87DA558EA057BD492CD6EF93601CB63F78426B502CDC5C8E9EF4FF3692
376601B1FAADD801602668370B5ACEFFDBACA8F8B3F4E850D07A20F6F47440FC
FD39504F0FDFCA35AF2ED0DA8BAB63AD42EA8CDA912CE17F5E62192DDD912333
3E9FA0884117F07221642490044A72E359D5F25D9591A8FAD568A3DEE435C354
11995C0EFCFEA21735DF44A30F79F747510E28767A4266461D1394F81344F6DB
1FA8D0B0D9E5F52FBB663C8F1E91192E5608FFEAA178B93F8298F70510A65BEE
12ECB5D675311B5B3B19205476512D92B1D16262720484049370A76F78D9BDC3
02EB96AC1E5B3CB078D2F219988FD0F36B043ABBF347B22D36CF541A8F80F791
8E4F92D900B7E7B64DFD500882EFBBF23565FA470103B2E0D2D14E3E4D7827D1
BAA0F84713A8CDE5904FFF2794850871DEADDDC53B77A502F5CA98B0744BB656
2FC40ED2AEBCC5CACE2301E983E6C18CF16AFB9FD8CA49DE51B22F4259D43076
DDC1BD4974CDF2E733EAB6334B1D5614288CC81FDCC722CEE193635D1088FB29
F80AD5CB96394AE89D920DF8E1F271585AF019190F17DB51FEC9064B54C3A53E
3FD33C3B553FC79F743BEC9674743BF0A821051261DE4527A2BEF4A04E293E97
02B181EC5F5EED3E26060F2C9EF6852B7433CA1BC1690C30424B03C522A087EE
92016EBDAC4B787133B4A22BFEF0B6CA564C6EB910E1DBF983CB4CFC3A1F8A26
45329CED7F5A8704ACE9D4233583365A5A97342A053EF403F0567E9D0A62EBCD
84B5D7145BBB11D31046BC2CF5B450CC68B85DA0E78EF8902F8D37DAAA9D4242
455288C0D73748F9BFEB1B1769D6FB84B94993D5F7C2B9CBDF75AEF2C930F277
210B3CCB8A0299F50AFE2548A4B8DF5ABB52F098ECDD56FCB8D3A406EFD95088
92D7EC39FDC7EB1824ECA24D0CBC6EC6F4C6A7F9590D593B269D2CC0BFBD961C
AA8BB4296B4E4411B54367A341A5EDA97288DAC370A015FDE6D7FB0A4CECEFBD
1A67DF3A3703E922BEF2C414FDDA42482EB35D5DBB206B44C76C412A435A0842
6845EAD204BDF87065CE2C99B05D2D4080D5D11CFC3316967472C7DA44CC1F9D
51B83B4BE9B882D6E9ECB482F9855D024ABFBA502CCD624E0F88164A6F13CED4
85F20DC01BB15C7D78B1C79FD9FF71F4B043F59DB5C297768115542BC7C8A99E
ACE39A268D32122541FB441FF1364FCBA2B7627F12C49ED038BC044B6D9D533B
A72D35317A5AB8D91A9AC56CA90D1DAE9F967605C63BC9F406FB3D5BAEB4B38F
4934EE3D2F5FE434B45CF5C2D0E5E417EC279DCEC4F16504EE40E837B11620B7
7526AFF23381ED3E9A92DA4DBF4EA2BE4FE444B9A74AB60EFC818E20DD8B852B
DF8CB659C0A3956D0DA61F49A9DD467726E57E9B32EFF540D551A67213D40273
AEAA6E319D92B4B406377D36DAB85662C755D76ADF5795C52D54ECCF0DE81E30
B84F951233A0A400CB063911837F0AACF44AD2441A7CE08818D64705E1ACF7E0
F59AEFC5DD812981C5508385274817056B2CDCCA4C9F3103C92838917EBFEC94
21D5737AC634B23B6F7F63B166D60C6BAA8F33AF44379C5A7337E737190EB3EE
14272B905D08C01EA118964D3444A03676FF3B62E7626168FA1DC6220699780A
0BD5776DDFA26BF0BB335B3C978CDD5CF1A419D4B5C562B3974FECFCF0118199
E547EB287CD92E32E881F344420FA3CD97333BFEF5D7E1BA31FD20622E5B4F95
692DD0ACAF01D413B21C8608FA87B470191C3CC5AD333263C955B4ADF4370FCE
D6667FC93495003F4B6AEE4F83603D55F19EFBF56F955FC9CC01E494804952CD
D426FE706C13D41F87C5C668D8B6BE50AE0370E07F52AC0534ECAB1C19851099
FC0BB1EC2A649795A62299F73CA606EDFB1D28183DC63ADF67294553115E8C57
7CB603CC491A6065802B925E6DFBF42917EE6E44C714228AE452851D61BF70AC
844B5D800EF029357FD659B8A648445CED0ECAE1474E443124F4B3644F54C556
A330D92EABEC7F607C6B13FACF69CA928F835056BD1A8ADA20EFE6BD5CF4A1A0
8B9E415E4A5FC6F209EF05ABF2E0C55F6E3060D1C72967E1E68791499F303C8B
3960C5A1F2DF6306710DFA98C8D0815A06B5590374554DCCDBDC4C295B3BA6B8
8BE3200CD4421A521C06BE39D4CA495BC63F3F982CAE3C82AD38DCB537E617D3
34BD96EFDA7C6A0F6D97A6BC9F084645390E194E7A11399FCE4EEB9A965909BA
6EC69D34DBA081BB3F18BD1ADB1AE1B7FBF96E4C546498667690857EB6931841
46C427A5B7C7D99FF889582C4AD11A7D267B301C5A5AAD9DA99D5BFD438238DA
62DEB899FF0F7B7997F781315B2CC328BE3572A3903A33EC901AC6BCC7F152A9
8A6865C6CB17189A4EEB699006A5F9D4482D53A76E88438E444F9302C79F0DC4
B3033D29D303B38F5959F020337EE6619DC8A8C3912101B02CF8AD113BF4BC29
8C6B9D25AF6B6A787F222C05964475B49B6751E3A3A6EBBEA03677D5B136B9DC
6D9AC20193BFB0759E89831C9E2AF68BD45ECC81175DFE80DC0879069ADFA8E5
24CF3C84121CD9739A28BACB9891945FA4E72EC07136682E18FCA81938FA6A3B
8CEFBAED60121530E33C1C0E698B5923D6AFC4E907A99B1367C3D435CAEDEF5F
878237453B8DB2FE53073CF3319FD096343F42D68F097759D051AEE17E4FCFC9
86E17099799DE82A38F22D870BF7AB90890E3B5264976700BAE594C8563A218C
C985D9A5A7D7BD959F7E4E66286833C86E89203ECECD6FC4C6FE1F04010218FA
A5714881C4C846E85F13BD68AC250CD0E488DBF60BB10B2CD7AE2E30F9C21DFA
0E84F76B4E996AA1C5C056E64BAC85622C160B56DEFD4DEF86887C1201F7C20C
076D4A27BA69572BE9C89FF3A9D3BAA5CAE0A6F2187AD01ED497798A305E3BD8
422DBFBF45E3F4AD35240B07285128B59FA9E83D9F6A2E620CAF6DB05129D930
44CB241CFF84E776315114C3AB61FBC0A8368D9154CC5066E2B162E89DA51165
F9CC075F2524F9A8624D2B56ABE64AF93B9F0407CC770C1F2C76CCDC06345D03
7B173C2FAA201D8E1F6C0315987A7A13902F4AA5ADF081C2B0A01C77E4F7A3E7
6A4AAEDDC577E855D69D38AF6A1D271B02AB496D94D81996FB078FBED17F833D
C6C0BCE141BCDE277D530951DD6574B9CB3CF0370D74211E9AC00C7CD3A67842
0B4B72ED517E4906409DEA7993D0B8E92D418139960EBC86BE63A1B1D417C451
8BA13C230DAE1EC4E466F23351D410D9FC4A7BBD477D5FA07659B71CE9921B1B
6755C67AB3D4988064004CF75948879D16174E8097C91F7544352474C2D9A1F8
A1813BC6F4BA13E952678F5707F19B4799ADB3BD186DF650821DF58CF3C78D67
84E4E1DF8DACEC50D15647C3DBBC3C4355E602D3A03171FE1CB36FEB940211EE
0A5300841DD7B7CF91C02B3FC5D89C691156BFF8A38C6C72789DF260B868AAA1
895046E405661D97FA9A0048AF114A89E3ADAEBCE541753E4FFCD902391B5372
6A97E32F0257FA9FA1DC15BD3140EC7F0CA5A68AABCEDBE73C38B35FDF195F96
0F9DB0F592C188D72D73512F4DD92D2371D1A59254BC477CA084E68184AEAB6C
266BB21DC3AAF874DE999AD2A17C79621AE322612EE4B6D5BDAC511418EDE90A
AE75066AF19662C4AD855E4200A5D67BEE4ADA9A399192C74D35E59B15FB61E7
BB167282D32D538029ED22CC5C9860C1F6B7BA7F33D5CF108D4BEEFAE7B37E67
39391F9934DE17956303532ABB011540645DB8420749C9B9A019C3CE86ACD566
1EE8D8D5E0D8D0DEAB33B5413EF10D4EE650F82417002E436E0B3B628A657F84
074098C2E9F897D9AB692E0FB9F268E6728F94A79CF4D6B0A07C8DFDC1D67FD5
EDD5863EA8949D180B1596D0009D662FC429449D76BF13D83F0D0CF165982443
E9CC288CF7C5F2E17EB7F3736D1FB814196CCEAB8C833720E3733BF594E1B536
BC0063080BC751F9DA1741522B2967D07DDDA169E7D3417B4A39EFAC15EA5E8E
DE3473CC9DF991FAD2A971F44B09635085DB02D692F149F144F3DCDB69B72C53
A2AF34C65DF0D5F35E82102E67B733750646EC03A4FF47138F7998607BD93AB2
B63A0B82E8E225FFAD5DC468077FBE8C8C8E5B4BB10A8FE836B07367D742BD6B
D36DF5304B9DF363120504C279453452EB177FBCDAA6F6FB78A24848F4A1D94D
1E49F6C46CB36796F3F4C9739346381F28AF085C5EBDB2A02DC0570C7A21E097
77522D4947B51182431BCBF3E55CCDDE93A916AA40CEB577277FA512380816DF
9111C56F36341381D62368E70462577D0C135BB3CB4462B269AA8E0F03245BFA
D01DB8E23F2DFD5DAA88FCAFDD51D48E562EC649DB1FFDA0FD8CC8C48E6A9207
260ABE35733D75630053CC74A07E5AF6FE87BD5FEA69CB6AA20122276AD92853
6B225BC9E3350D1B1362E04C7795D473F1266852B02C83D02D938C55D8F0C671
7A9205F8CD058304DFA034D99A6BC16C582F02484A089602D42DF30D7A5716C1
D42A4CE56C19E40C01DC7DED931FA13679CFD2700B3826A1E6539AAC12293DA8
664DE251C5D1761BB45FE364CE3F7F7E9B67F86EB31D9626CCACE4DCE03EF3C1
0D2FD1B12B5774510D46C5C5CBF0A34847418B9A1DF0C67789422D0EC2D49576
9DDE72D63A4A98613461A6F730A05336C691583F96C3CAD2AF7C4BFD3AEB3814
D909858B6598FE19397006C8C4D549AA1635968F47144E7861A2BCE8AB4CA7F0
4D253949AA0127559FAE3161C810A8CE22A3079602E747C9398F9C8B2A868F23
D77D7AD6B980FEB038E0557E58E1D7AE471036CBB96B83595D9C96A4895971CD
C2A810651A045F876A1F5AE470BEF39F856808B1F8D736030A722E1576BDB3B4
4DF06F73D38D313C8A0D3504EFBC774750C9F6E687ABCB1927FA1BB3882AABC1
2306A030CEBB259AECAA646C6497712F6C1E9DB7E1365A60EEC5AEDD5147A77B
1E3A10D73C477876D54FEE853D953EE75F7EDFB287550B93CFA8250D1FE2FE7D
D34441F1224F3DB1D355188819EBB98A94DB193B9CA23803869DD10776647BF5
5BB42031AC44A7339DC036AD0292AB9B732E6FB79BEE852A103C3788BB0F4B72
EF37BB62356F9B2DF7F5899A26F1FE0A3D6469C1034B8AB14F52555EBF6DC592
3F24D6DB395A3A182ED4B8ECEE8254661C19CC942F236CA40BAABE818EC312D8
7F5762C210FCE8A3CB9A23A24D0A751A09F4FCFB72DD0FB3AAE0575CF97D126E
1669203BE1C8F8FF626F49E8AFA7B29EF26618C6D8336D4471314D5D009BEC8C
D914E74D0BE7D7C3A2511C0DDEB6FE04360D54FB3283AD67D9DCDE211FAFD19C
449E201F2913232DDAFB2043F674EA73C9F043EB73CC9A96289B3CF819DB3E56
5FE403D8C387C99979ED9F8EB2F20DF0D776F1361D25A06237063DD6B88E16DF
7BF2D7AA555ECE15F21A2610055B5D7714B14542D0D2BE8077C432BA54E94DC8
ED20F1B8921E03D0F51A13FA428A10857D35B4C163D8741F853D26886864E632
87F0E9080099839027B8C7C47A6FB144E1BBBFE8927AB63AD38479A4E0367A4E
5B835DF9983BD912079A720AD67A62987AC0CD08325B175E8244A616606E01B7
7ECC34D559A2B4E24CF46C8488C42495B035DEEB6D209E82AF8D579603D14580
29805941A2EB0D90723EB1B1A07086A27E6B3B73C914F1DC35A483982B022746
0666FC279906A7C21737CAA2865541EA2DEE411133A0031703704FDAECF7484A
13ADC5F7A95B5C7C4E225AE67B097CD532DD70BFE58A1ACDA3575E9A41338EB3
908C10DB0683575B3BB22C2B7FAB368FF1A35A0B0CB72F8C9B74A41D1639C092
0B3F5D6551FB0E164A41E7297031D6619D9049678A6C670A0A007BB0C19BD908
4117D35B7BDCC4F02CC4E86B8E41D8D5688B5D2F8997E29399F034FB75AB06C3
FC098A220FD354263B893CD1514B76C83B40D0204DCC45CDF1524756C8B7DB25
D1FE83A8B5FEF796E097623A4C2EC0103B90743A560122ED10154C4104AD287F
526ED228CAD3DCD7264CCB9AA12BDBB1B191AB7E35FCB6E8637F9CAD6524B00F
9777509CC2BD0F04A72CB1374393CFEB0A7C766B3C0B571763D4D6301661F3A6
9E3CA936874EAA36AAD2E1C582641CA2790B07E6AFF11C2DF711CEE16FF5AAAB
3E512255363C4AC408CFB271E77E14699DA3C89398C217243E723CC5A1D504C8
BFB74E0C784C78E0120482A6CD60D8784D00502517CEEBEE148237FCD374379A
AAF204189AE6D460B925D1D56A1C6C2CF88ECD224F6B8DBACCAA8B7F61063030
0BDF6224B94AE9B1FA674DCF40FB2C4C186A56C7A9F9205A0FE0E138EB670304
EDB18094F40E7F708245B6703C0A75410A422B9831F4430C96B56385FEE0647E
ED188740106B10484A397D839707F8B7F55875C9CB748BF83EB362653B4776EE
2AA67B3F19F8ACCA6C3117DE0E15A8249F081D55FBDCA19738790A003EEC8311
762FC05982EA8FA2AB2779F1A7D6E1B8947714B22AB6750BC207203C429956F2
6F55B080512B1A799017992ECBB435776FA3E6200B8778C025D2775C9B0DE204
B804882F354A91063D0384693D0189D30BD401A571B4BCC8FB62B1A9D7F932A7
DE1813635663D8074B487CDBB05D64371DB015710C075E28EEFE8C3E1BF2AD6C
A3CFD202AABA7EB34ABD5E4073961728641D82813562D6A3901056AEEB9DBBD3
CC96CA9AB68D7CB4383BB72A1478CC4E7D8CAFBAA89CAECF58A4E2571F7EFA11
46E8E9
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMSY8
%!PS-AdobeFont-1.0: CMSY8 003.002
%%Title: CMSY8
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSY8.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSY8 known{/CMSY8 findfont dup/UniqueID known{dup
/UniqueID get 5096649 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSY8 def
/FontBBox {-30 -955 1185 779 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSY8.) readonly def
/FullName (CMSY8) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /minus put
dup 3 /asteriskmath put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36AD86
1319147A4A219ECB92D0D9F6228B51A97C29547000FCC8A4D80B73E7B6CB7548
0E1D77FFC695988391DC44AEED8CC947B3D7E198B9620E2238DB3A2819182F03
14498B8CDFBA48926DA721920B221FB33BC21A8456AF10891403501D0F6415F0
7E041AFFE109F640E54FC1A365674711EFF94E752652A4C8DA62CDB1149DB899
2C4A4BD77A06E81E93C5698C05DD02F74A0756082738BDB53003B483752AE498
DD718AEA8F3FB5A6B7E2D2AE8F309065F3D556F9A34AB90C88833A54295E0982
209C466A301BA3372AABEE20D862C6DC6B6FAC1463C8CBA8AD766ED1B4C9D712
2BECB4E6ABF558D8AB5281C35726BB8D046982C0DDAE17BFFC9394125E4E84C0
B283977D31460B8EED4346CCB09F64DA0ACB640C6DBF32F2DC30D54668C1CC12
24C7280593088E9958C047125C323E9C842801346A9CE5F50413D69F6DE99471
65D2E387765E92EA4C43F17B467DF6E266D92551009C0E52E7219AE9F5E2E8D2
88852086FF3600BFB50AF3EAF8C009D8D5F084B510F792385F328F7EFA8C38AD
CDAB2EEDFBC6AA45F6DD7364C2F02DD2BE6C79C8361E83D4267CEC2407689864
B57B5D967FC80AB3BE8CA43955FB0FD3081D438437559AD24A7ADD484C1E4A77
B00BDCB0D1B121FEE983412E1EA5489BDCE5DCB4A7310135956B230C0DE7BBED
516369A92BC41FAC8D73490984942D930DC193BF0C774C1AEF627B969EE4B001
11381AC57815D7581E2372A1DB740B09F4A7FB4318B765DA4E7B44E8805CEF85
44EC3B10613FE7B397BF91B69A5CB2E9086D1E7A1FAE0A9ABF2A237A2D29ABFF
E392A18AEACBF28274E775D3FBAED4F46B982B9DA4602E24094EDCCBC9D6FC0F
67C60376879245606C0B9C9A678E8917516BE1CF097B1C75C9F0DDAD6899F08F
81FB7A198D45FE060CD2A550D9B8D58B882B969D7BC3EC018A1FE92BDB262835
26516FF97AC387EA525FF987E5EB1EAAE4EA5866C9CC043D183763C530F7D7A1
2070E4044507C4E5611FCC117FBE4396E0B24F672CD53D5FDFA56D561FB86D40
90A52A7C7F29A119DFFB694A8C445367746A49CA5FA83163BE448EB19625DF26
609A8C8672631A10411036CAA3D6C2F822A4B2505DCBE8E1CE6916AE515E78CE
E8C894B134BF811671D17C19248853131DFFAEDB24B15FF17EAC194662460642
48D23515AD434C68DF56753806FE96DB3A29F9D4980E0B6EAED7383F9FAD2584
8F85679D6D1933677ADF5D31FE6E43DABF137E834A1DEA632D36EA5728625159
8F33348893C9D1C510501628E4A9A80587DF6E179FAF68B158406A3EBCD726E2
AC17F2DF8B3607072824D2E5A6479F7BADE32E603E54E7A83BB2DFDEDB0D80CD
1F1BDD4F6C9025CC3A8A3685DF10A8183FA80CE0F0FE2BFF2500F76B1037AE41
56D2D7FB468C3CA7549E3599A2AACF66302572F1B35BC8EF7C23F6FC4B720228
1D673D903111CE378AAE83480B4DEB7EA84BB35F4F7BE997DD4FFF5A9B5E7650
3C7365BA0965B242DC369D03215651184024A08EC284F1798B0726152884B4D8
46411B3BC8F5CB53A70AD53BD7B1AF23528849B56CF2F75609FE715878CF6448
38579380688B47AE3D374B0DB6ECA5B8284414090123D47F3F9DF389E023F431
6B4C0DDEE4190DEEF4CA772742012754DA9A44A8F550FADA6D8FB0C512D5BA2C
BB7DF71B1DA41FB6936BA71B710CC6A80751E43436F0F5888F51AB370DD4A088
40F402661E08732C960705C7E0D29B8DA1A8A3E119409E51EE575E9655F47568
023977917C8EC610BEBDB9C1F4EBC192084D63EAA00EC87B53E86620BB5AE51A
579B0F8E1972CE1DA02832FC75184F45409DD9D413402C2FA27BCB0AE6DB4CE1
5AFB114E23232DE07C4674969A1FC94D152C6D3A611F029ACF4D949A2C0755D0
31C7DACDBB4DFCFAF7E87295CCF5D4AE28D87ABC3533D87EEF1507B9FF9063F7
F007DF03734A20BC3A198B049000C92D2849C62DDAA719FC28EB372793E20128
D786670E08948808BA45C4F6AA0DD8A8357CCC47228A760C5C7864853BD9C9A4
285E446CB72C5C9D3F03FAB000810DC5674061FA116153040743E846506CFA67
FA8770E785D7DBC7293F37389A0859CC22275B23C44B57B92A033A7BD194340A
D6BAC6E103402F8396A5394C617CB2A27D9500921D5DA06115EC81715EA8E360
4A95DCE8689CBE268B8E6C8B806CFB0ECBF634250243C9E1AFFACAD65311FA4C
1DB0988203537E5EF12B86FB454D06CF05E4F4FC4143D62920E99304245B6ABC
82E21192BE94F5E980DB21E07FEDF0EB0CAF4ABDFC20EF08A2A44A7940E2862E
08FABA516152DBA899D6CA561EB08C7C8298DD511084E5230CEBF28AB1D84C85
B5BAF4616C28FE05AFA4BABB3BA03F8CEEF3F3EB0D3034BD3D8D06629B8E9EBD
72484057E71C9EB4DFC7C2CE7749271AC926C2419D618FB0B60FD6F81F0F2C04
E529CC74DCC9E4AF32D935D7CA65FBD0842A7BAF162D08F782E65DF3AD9EFE69
198AFA9208B22BC21BC4ECABB9BFFBA84C8421B74748E1EAAACEB59E566838F2
C439579D6C75074F94493F7D5C8942D881AAE6302C37A61003AF77684EE99AD7
EB5EEEF050C52E75E4E842F8174470FA60CB213BB6F257EEB26CC55D1202931B
B981DE2535A87CF37BFF912220C117EE166CCAE58BBF624170FFBC0716726B36
304D698F2CA131675F7B1199E6581B8C812C4FAF75814282477BE2B7EBCBA7C2
FA6356B2876F89698C6C2493989E9EB252DE03BB374622A7C88B8EE9FEB4851E
02F85CF70CDCA7BED5EC94E81170FB557C3BFC6F32CD70B506E56A2CC5451592
130C6F570C679577C44D60A811DCEFB3535D855259B1021AC168DB76DD38B459
F1813E3DB20AD9275D58880CE94058490ABBBB0D8DD16D4A65F680B30057F15D
07FF54D779CC978E90A850A2D8D79961EE276BB26B594C16F56557435671A3D8
ADD3DD0BC4BC73B0652B9DA8462FE614A14A11ADB2214EC4910823FB4CEC8938
24354C5C62547EE5710FB5ECD93AA45DEA7411F6CA8D5B5FA222685E622AD73C
1BD5DFD1C8F253352D6C7D14FF2FACF07CA5EB11392C6A33E9CABFD99F743BED
55E8DEF49E07B9444171D1780C698E5B65B540F41F845AC188DC7C0C8B5BA5F3
546BEAAA4F29F0DF30D5AC12A60862742623100074457BF2D820DCAAB340C1DF
22FF26992DC02F276B40A7C528C84B72CD189A4088C90070486C49A1014FDDA3
5093FC12DAF309FBC063653E6A33E14EB51B081126AB5BCB8016E975060B796D
6CBFDFE6CB9E191F12E309254BDD6660E3227012F5DADE246B02B6D8127F1EE2
248F48DC5ABBD229748444420C868450602120664984FE3A8B2373232CE5CA15
E67172CAF7EA99F73A66AE33B1EDE5E8351DB02497CE3338930147873D4E46B5
E918F5592A21789FA9F46232BE693DFC33240E2649D6AC1940B101D806089436
F0CE230BF6D0363510378822891DBD3EEF3365430E74FB6C994BB40C8EEDA593
CEDAFEBC3B87C7C04F52FBD7D557A77B44855CDBEC8A8D26F44D66446B5662AD
15B6B79D13BD262D79BF51C09F8F690A61C7F11EC2E05F6BEDA273648E9E1EBC
3D5F1D6ED486797F753064ADDA8494405556D43D395B1487EDE877CCC1EAE954
1AEE2513DDA94897B733609E8179DFE1975590568202EF20D58A89B34874CC3A
A5579473AC65E0EE61545AEF578ADE10BE3FB3E2CDC96678F613E4DEF7BC1B38
8A551C93438A0540E292F65F1FA73D9AB30A5F545284085E4930A570C1807995
7108AA8194607304488616DD4AB189F8EDC5F4507AEFD7847817A8ECFFDD2DD5
DE95E04EAF2774F8AF661827229F01E769A32734097C457EB6FF056D90C46C5E
9F936AA6BF2EE8244BBEDB8862E56423F5845BB10C8809730B011D650EA18945
83C320A3F4ED095A5EF91929FC877ECC28A1C2CE74A53245E629BF46C6534983
307B1C94EB35CECDEE86551F0C308F66690E591C5D9D8FE14F534CF3F5DB6D32
39D7C799F392C4E65759B7BF61F4D8312E3B26C31466206A367A0DD7A90D25E2
805D36ED5CE0A4BEBCAC0A348FADD2D2AAD670E28BE6E33F627B4A9F35078B1D
6688084C4C18840673EF9B3526172EE14EF64E97C8B006C27DF6EF73BA6E6459
3608F10EB1EC4B824DD5360B42AFF2084788B165747AABFB2C9C0EBBA9C6246C
08F28143809315D6268E386F09BBAC54C34213438B56C386B34AA457D149CC39
A3C163F56E3C2E637C63A79CF7F2DE969EF3AAFF75F3F20499A9ACA61279D545
866FFE57D25998244F448AAB042B141952BD653007A889B1A716A4042CBBB827
C1ED5E3C616C22D5FCB39D3B3539F9B71D50D25ECD2E5D953C7A5194C867DDB1
75CE10B2C3A20E8CDE15AAE9F549D034838DC066CA649C31EE365D46450AF18B
893748D055DD88C72391FD92DDF0AA1A1316051BC756F87BC9A425019B2FA7BD
CA9F35E89E2229B3021DD24C9DF0DC3217F44DCF510116DDC9E92EFDA3E0A892
491C8961CA484BA29B8CACD2FED2E246FA7414F892AF7B9F08698FDEC82D2E4D
8C6ED1FD9E0BA2645663E7E97B0F780033D025F2EF3B364574C03F04FFC4E09A
3D4182BBFCCCD8CA54A92434E2208803ED36F931D31C7498B7FCEE4B78AECF11
B27123A10F031F9CBA36066680E4748E346D18FD0EFA395D1A9227530618ADD9
64D96C50A0172F712CB427E8F7170F8A1691FB95B247A271499F0E63676BD64B
167438333A3BD9CD9641AC637E0ADB17F1E394DF34AF5A2BD02030DD087BBA02
E1209338B74075744A9A9966039AB6D223F385E06FF359257913E6C01BF32F5B
A3640C7CA41A6C51F296E50DC1CD1D68491CE5D75E0ABDD4C5C4A97C8BE2BA35
D91AF9F8F38E7AB8C1778B06A212D0416E6137087329AAA2679C51D014CC4DEF
0F1543E2FD97621E552E19B29AA1368CB5046C188BA59B1E1875B25FB269DD2D
C0678A42CD310702465694F2BF302AEBC43F714F7C657505132DDA71CD23D17D
628BF3400EB5DDFCE2850F31B40C5913394649AA4241CF646F3939916C2077AD
C11F8C3E478586AA7931E327333FCD8A2EB31DF4B47AA2F31B999556602DD998
5848143C0CBD0B5187DF08E675550F2384D48C2954EA7D16AD2B94DF97C194D2
302CC47BF968CB1F6C9641A87525D5C6972ACCA1D4A4B4DA8EC54BEA6E7312B3
2737754A9FCBED3BA5F8220B751506BB0A5BB5CF706AFCC04BFD713A3BE3C842
9FFDBAA0CA5691D0FCE76134841A169970903843163DE68FF09649E99945DB64
491FD6D8B2DF237DBAF550D1B74263B3BF1EF6211F40D4DF2DEC46E4DE557088
5D458A7CDC6F34B8C3F5C76582C8B7D24A333AAE0B43CA67436F8ECAD7C50B12
35BAAD521033D8024E4DFCF01580AEC63BD5F8ADB778F822AC4FF0DA608EB7CC
1A52A51B9F38FFADC0D2F4D8394C5D598123B483AE5AC1215F24F2492EBAA134
3C58AD4E3B493AABDF753EBF1F04058C6981C353D6788C2D3294165B667D3765
7883A8493F5D772F789F73979B254BB9397FDE4F8B76CA6FFF312F4B012949F4
3EDCF1AC60FFF2681549DFF430B498405E79CB407DADFCEDCAB1E2FAD3B0F4C7
B575A33EAFF9F67D37F50BB06D06834EA683862991C5BE340D4A7F8D131E733D
289F72977870F9958102F5D835739F0F5A642E7194E8AF7FDA2937E5C0712CE4
EE15CB475725030CE0F238C32775D3EC95CE3D0886046E3EEAE322F59D423E83
DE88DDAB5CE0F70537487EBA5A16A9306BA7DDCA14A85A9F83B3BC3600DC9421
BDADA2704A5A24F7174A3A486ACE68739EC5960038CB44D969A594E97AE1F42C
42C1B7E3A456B3CDFC7683537B337AA8777F18CA45B22C8BEB18877DC624496B
9E8EF9F386B7FE4D94ABD5CE3B5786E76FE04A35909C472C04654A4405932EE6
A4A3E0F6DB088603FDD82F0EFCB85A962002A662D1AD0647A2F484B59075A1FA
9F4327D542ED7962620B998ECC3A95CE736089593461CED9B5AAAB05C2DA3820
5AF29B32904E1EEC357C8E282189C6D8F562DB11291091E6897E24CD8F8E2A34
67F35D261E01336152E69831B0CC6B03FF1AC7EA22B745F513A25FE10F70E74A
3FD71FE1EC9999BEDE7CFA6A97EA2DF621711BE950FF8960965685BAAEA71FA6
36F165573A0A6A92DAEE41A9B0C97BF03419FF6BA1F44524D00FD671EACC4233
9A857680DFD27B9F1E7A760058C8277B3761DB9969241D1824A7DADF70BBFC38
89C6DB9091E3BFCB36851CB9662B365A4B7384BDBA1D385902D1E5DABA72A159
63790096B927EA49299AE03E41C7F593F3B995D1155E91C62D5F68845ED3C797
7798B56858F96C2FE2E37D812873B7801767082A6D6B60602CEB94B7F6D7A142
72814734DC584A18D1FFEA7333D4C7E2DFE5B91E9AD92EB52533CA52FA888980
C79FEEDF0FAFB3B20B497F9AB668BDAFA364B405916526D5C48E57DC30BC35B9
BF684FDFAD199D9A28541327F3899AD505FBBBBB22F419E22E0149EE5FDD2B43
AF442E2724EC16934C307FA731F90AD1C76B74569B78CDEA7C19808233C6364B
D049F3F50A68D3EC5F29F2B96BC58C44AF90FE13F244B7129F14B5DAC3F3F310
B330E67CA4EB76F895DAC8025F11EC7630EEB4826B5721348FA38F28B2AEEB1C
5F7CA413C486C94B1DD96988F07F7A08D3635E28624878E55D4FFBEB5E183CB5
93014D8A272EBCF3A09133603CFFEF43A6FF059BCE525706D3795884FB495748
C8AFB50DB464459A5C36D7CD087631BC09C693A11BDF1C6011D9864FE66EE8C0
4824A42E97D16E017C0BB73732D4537E2A5BB283B3568950E5681364DBC1D6DA
058A122862A44ED85029A7B39F2FA7C362D859D0B429E056891339626AE6091D
74F6110CA32F8F3E9507216997E6AD1A2F1FFBE8B407C9880DE230E234F6FD41
A291851178BEAE5DB9DEB22E3443807E2BCEF12A4AE8C490AA9E3D2918329F47
42314CD258A0760DE5FDAC4AF7209CEB530B8508B278952A3638CA8491C3B493
516F461610DBAF32E923ACB834B15E2D169A10F2609EC0ACDF7BDBC777DD2C19
2DB330FD557D3B06B78824D6AB237D8F2D57A7ED35F02CFA9290ED6893B41657
A2485524A3F1642FF5808FDB77015D9467EDAC4A6BBE8A175833B1225A5554F7
2C60207F7A2632A4023255E8EF1F38C1B8216C9B03319B60BEC9799E5378683F
46E698FA75F2DFD40F17C603F3335F1EC70DBA1449C7A33EDDD46CC3DE4A6557
EE67BF349AA8680FDBF415DC527129288B5879500180F75DF80394EC7CF11BC8
9EE9A4ABD64DE3076A2963F83FA333F19FF74F79ECF36A87A31D6F125FD2415B
3F6A6FC33C179F54CA164835F3C3DB62AF444BDF27AFF23098C7212477F688B8
6F48D9AD080D544D57FEDD33D3D9AED9346CBB644C97C951D4AEEB2BF6F0CB18
E2517BA7ADCFD00FE44E290E731D53E5C0D762FCBA08004562DCE6A5EF2FBB74
B3053CBED3B6E896B1C3356DD9E8FCB69691AAF6BEBA0424D62B9F266D560B40
89E20A9F35AD4A7F65A7183761ABBEE0F7EF26ED3565A25516A3A5A57143979A
1EEED8CD52A69E4E1AE4795F3EE0CA21B9F4D166783A9AF54B08B6C56703932A
310197E328C6E6A6BADAA11D66A952964F31FD690082FA02D1E2A4512A9F2742
33B203FB770A3A1C7490ED630D0FAEB3066429D0237E18818EC368D0DA72EB08
1951C70139EB0DD59EB53AF5039A7618C77F6CED9F0A066FED6FEE0C0E328351
BA39746C1224A29D191D8B86491E0A306ABA070CAA2756C3A33990EB6DDF34E8
06EAAFF94AE6686EEB06A17D6D020D1F4E59428D533DB0EDA6434E6E1A478D5C
2A0D08CB39DA7D5F5200199FFFE3F41729478D4F63AE01FC0BF3B378FF6402D1
CCF0F096DC5DB0696208F8543514A437E397416E28B11F692521A6C01140D481
213BF1E96355950EA688F3F008193DD61970FF4E5518814287AC06CC61F27C9C
18E9427E1B368FE81FD75D5BF4C13CF381A7861A824A5746B5BCF0A4333AFDDA
5A76A9CE9489F815CDA35E075BB391D75D3C613526CA6C13551B1D646C89C968
D989CF9A313CAB7885F99F1BD11262CEB49A20DC897F59ECE1A0228AA42756AA
42387F4E040CADD9C1FFD5863AF72DBD4D51CEE19FB82EDC15E0C70418D225FF
26F832E86DD98957EB8272C546074853ED96BEC7AD9086F79C965ECD589CC572
CCF0800C4DB5BE30296910C9198EFECB9C1F0BABA3598C2B6414A43D58E12B09
097E7DB6E518C890DBCFAFEB3499FE35BDBE285F78AE74D762DEA530A717FD95
0F685DA06BE8346F261ACEEF73CFD86FBDBF356B8A8EFBFB0AE9472E38353612
4B78DB128BA7225F6E39BFFB76CD5D914AF903D85625F890F1B1613C325FBE9A
7AFC2D8E60AAFCDCE303540CF629B3C8156DC4B5A0216658C691721A77604F08
69B9A8BD6282A669E69053660BFC6458B17FB9078B191901933E68BDFCAA26FE
7D
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR8
%!PS-AdobeFont-1.0: CMR8 003.002
%%Title: CMR8
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR8.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR8 known{/CMR8 findfont dup/UniqueID known{dup
/UniqueID get 5000791 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR8 def
/FontBBox {-36 -250 1070 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR8.) readonly def
/FullName (CMR8) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 40 /parenleft put
dup 41 /parenright put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 53 /five put
dup 91 /bracketleft put
dup 93 /bracketright put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9928A7C95D3A6E9B
8E92F84CA0AA44461D2F4FA0F8B81C6F5B7BE98C9712BE166610465CF689DFAF
27C875C029C0116DE61C21DA0092D029E7DBEDFDDEE3D67E6936623AB53FA2AF
18BEDDD7AC19A19CADB6ED6CA7A26E6044BE414FFF59C0B98D5819A6B881F9AB
7AD0D03BDD5CD309C67811D5CF0B93F6FDC9AE64F74ED4E81F2E18D880BD842A
DAFD0BDF06300201C6946087FC0B999447BC370200BFB8CA420B668B32EBC242
6DB1546A7164CF55B332FE9D239B65F532B69EF9F4F93828A44C8F5C526126F8
B7A369114CA68D4F98638121F4E17F351723D9F1A902FCF087F94AFD23876517
2D15B482AF2D68C3F31FFA864E031596E597882578AC7FB0DAE2A713B065B374
3E2E72519ED6D50CBCA40A7275A7109A4F3ED8A4566AD8832890D3D1F4899850
9B757442B7EA355175CD5D6D8B4152ED2D7EEB4CE30F174FF672140354046A45
7098EC45B9DF3DF5CF7B417E201DA88308CEF4CED8E8903AF24FB8DD0187352D
25738519ECBC70304F8F620CC45D2586619205DA3955696FAFFE2082402B3502
CB682F410DE5FFE80A4DA3D3BCF02E35BD577D0DE55E7B8A33B7A2FD5136B5DD
A0BCB61F8E7F4363C21F890CF287304DDB8FCE7FE207C0D160B81E7EA662BED2
DFF8C444E19C91E72254257CD87240A70F1A964FA54ED9ECF27E27A57DACC3DE
EABB92C085030870C6CF5C40B6E47F5C0AEB30E84A73ECDABB2D754EF6EA28BB
16EBD6636BC288E62F4A38BFB55F5F4DD20FDD77D767F6CB52F9513E8EB75413
07F1877B2C01278675177499E4E8EB09F2657821613F5C7643FC064293EC6E9E
B519FFAEEA36B19C9D1302CF91FCBF87FCB57C5F995CB6712BB3D8681EB6F05B
B2A4195A3C73CB4ABCCFB958EAC533BD89560D2790CDE1444C0F2E4EF27A529C
F01052964E56F6D76A190E5FF45934BB711A3406284AF130D4DC0D8112BB3752
762CA0200CA262359D4F54C0CCFA9A50DE18C7DB14419E2990ADDC4A54B94978
D9174CA39434022FA77FB30179EF805E2189C35919F5EBE215EE2A00B4407826
CE56329C5586D8B414770BA5D45513C3AF1931D632FCE69B4CA504944E03362C
74A1177C6398A61A12DAA0F156543E2A8E9969C4308B7ACC21A5ECAC8F172541
1B1316A88C0C163E574FFD3CD22FF08488662FCF2F9344BC25D02146F36CA6F9
E2D0130C654B7485EEA9A110A33AA0C769121F81821E9A2BD062FAC158359D44
3F9D9947200EF1EDDD5860F10438B162A69683957300C75AF7546C70C97AB2EE
37EAAF0089E2623F787F252569B06C665FDB45EC9681C0774ACFBA76B98C4E89
7EB12AA5F8798FFC110B49C25E3A483ABE83B0BCC6DF0578403ADC369E013762
C9D08FC94D949BAE636ACA9F36F4E3F02296775A062077B011A705B6F1784D36
A926622CB3847533D7ACB24A4EBABB14593B5D8E1DAE2BFEF8A51835C8D4E76D
7543C126A4271C59A5881A5AF89331694F84489CA66725995DC3070F306EA447
CF30F63CD476A46D528EC1FFBFB8EACFA2BEEDCF54C92CE2BD26DEA5827186BD
3A4D1709415CEE7D51D671357B4A5D11E835F63521B9824EE5282E58F05A8ACC
FD249461181A38C2F47BAC4E79BE368D64F886AA493C61CBCB2ED401C8AFBA61
59CA6F6216D941A92AC52ACB3D7ECC28D6A58EF4CC70BA6DE23E80937AB38E89
6F05FDD15B954C0826636267EDAF9F2BB466BF79D2E10EED9B04297E6BC93069
79581ADD1A9D9FAE9306F46AC95B98C60A2E53D60CF1AA4069BE301E17E25070
F98DD67BD8642B1D07571A32766072E48BF27E1576FFEED300D7313A358A823B
49C8F135961B7E259095C9BB67F996CE0B90E95344F203922F47E11753F70D38
2ECB615403490310CEE6C03AFA97DA2F47ED47125D110FA69725BA0018F6A40B
29A307FDB3E52322A77A0102E6F57654CF1E96A134D13860D83AFA0A41112D3F
2247A09ACF7D06713BE443FA27C7E7220E875965D53030FE7D2D62EFD2F1DB87
5FB091FEAF599BA8C5167525899E578AB341BFE2BC4E53A047093168AE189237
EA55F055514EFA939DAE9E859CB5FBCF37D99484F44FE5AA5FA386B28BB642F5
5DBAF059A50FE96C7C6D834531D64F1F2E99AB2E96EE74D149178B1C0618495E
293973D9A03E1790654B67C0882376ABEC17D74785B3737D81644F28B3BC6FFF
F92FE29126995A07E0BC5EF3A4B93789A103C428943E045B8D1A5063AE71E806
568D48072E53DEA85253B01DF0BB7367A6BE4DD7BE514AD74E3F77C825ABA405
64DAFA25EAFF8F63344B5F6B523629776CEB090B546469F6A6008DE43072DD3C
DEF51F62731037D1FBD0C038A1E9B669849EB3BEBA281624F13D20B61917A109
A0A7871A73F7BAA18077360B38A4625C5DB9AB9E43BDEEB856FD0E2D3AA2E075
267B978B9EB47F2369302E87DBD5D5B422830BEC32411FE75D584C58650EFB1D
136FEB92B94BF8939FD63AFB7349C7511E5E46AA7324F8B1FFCA9C2A9E9720C0
A720918E8E860F137567D386AC29870FD990BD69465B3A3D2A0ECF2753578AD7
80DC87EBB319EB5AFE0B6F6FF8616EA30C51425FE3ECBC5F8D0B0BEFDEF32FA7
D168B4E85C804B7326A0942CFDE732B1171C643452B7099B31649CA2C38B62FB
46EBDF7180004C549B53F88021D029452C2B37D8C565BCDB0B11541039A13C0A
E45D4B68C7907B8BF08C6F41F564B62BB554235D50330E78DD02795516D969C9
66119D718798120442CB7EB9877FF84EC69DAE25F8559DCE3BD8042959F695F8
2F99845B1B5680DDCF181D806CC4903E077D1FF5E60918EB34C0B1E028422B71
CA63EFBF3F4F3CD813CE831EB54265A555BDD35AD7D723F9CFBDAB29C54F8AFF
2D35C6A3299E0A2DB470C7B141B1E3E10DABB7873AE302926BA8743278FAA8C0
DC6174501D6A289CF980A3F55F2DD5C3A514E7E7F13133C35D2697D64C25130C
DB78FC997968D6B3BC929E8A31B6D212C5128E4412632BC52B3A1049F7F2F61B
C74AE9A6AD19B9E2E240617E2882F7D29ED3A4279439107AF9AEBEE47CE85DE5
CE9595A96A118ACF1EB1F5929930321AF7732E351E18C6AD378508E37B4C327B
0E06AAE21278AFA9255AFE5C022034DA2968D260879B4B38E7EE2E11A593DC3F
CE71ABA050C004473324CAB6F3C50E85DEDA3E9A27388D8FD3A8F6E42A79670E
F7549CFAD4CCB337A6E0BAA4846ABCA059F1E1933CF11DC0FFBFF550CC4A1B47
CF7BCE0875FA747AA854534960F757884505A5AEE0330179A9547A4AE3E68479
7A457DE83326DC30B67F27CFD4AB697601CEE352F72F0966B3CEE3EA24683BEF
6D23AD51B8432C3F0DD0D0F80791E1091F38988B7A54E466A9AC7810DE8B7893
6B0AA6356597891D56190A7660BC7F657BC559E0525D41EC228078F2FBF89C6C
72D666DAD838CBF0861FBF0A1D4ECC069AA49DFBAE5C56B781A1D5D79DAAC256
13E3F9B928A2394FC71691E4355642764459714412D6F8EF803FC5F7353822DE
6CCBB8FBE5AA1F2C7F4D384039D85E7728527DF9FE0239E2CF8BCB7411C000B7
1FE660AE6A2A19229E5E8776CC83EFF3C27403935756463EB4721C51FE0B1197
86C2F17842A0FB639F28083DFD4F1E86D7D3BEFA922514ABF489C5CCE93D6F72
D2EAAE14F6CBA2BE4BBE7D7EA8EA19DB3A87350D4A52064137C3D15A5B05B03B
70B1DA7328D10713B83974C390C3270AF5A9A47C0BFBFABB9F31063B0CCFBB10
0F236C74446688198EFF039110F6FF42FA9F82D463AD3958B5FD205BDF85DE20
FE3F0C7AEEF350AEE6DBC1DE2E2DA4F4599956F59D6F121F7086DC120416E180
52DBBC4E56C09746938698860F30007091E1CC0351B43990E47208ED495310F5
7BA9C6AB3CA10A3F1B318FD47C1CE3B9FF1304321F9623E32D315AA9CE64B35B
F841E6C62B5B2488A311C94937879E5E0E170FA77AF0AC75C5E6E9F3E8F825AA
09C1702682E14FDFA72D27901C5BDE009B1E52E8C4511C6F6336251BD45261F7
401CA3DAE7C4B0CAEB91B9954BF4A97C48ECE7FAD401351D59DDAE9DA94E2335
74A2B880E4749D3D7026CB5299F16C204B6E00A20A6619C34922C7D3FB50F127
3157CFC08DCC5164C8023CD1B6C3556C73CB8E4ADA845339CA9BABA1457ECEE6
ECB9849DF1F0FEBC89E5F97C92978A500196520839CEBA6C0FD2E3D27BB4B4F0
93CB2BB565F4627C6DB62DD0E084E627D69B5DEF42EF094381B62C0D67EFD197
301B132420F51A41561E6106870147E0D597078435BE3819ACF0DE28AD779847
F3D2CF667DA06955D53E0204CEA2935E9E984E76963D3079EC092031E2A10E61
1227E5EE6770DD4D745A52655369EBA06A19BD7D95BBA271E488241199D1008E
36EA99F8DFD2A9F87B06B070158B466AA4C6EA3BA77DB0F853F0BF9A304EA291
34069714368E0B94DFCBA3BE5EDB6C8204DFA7EAF5C3406F60A7056407D1BF6C
CB85C1F432F97D821F5518BBA79AF8453A568FB2C2D025A70CEC75F46C545011
ACE3A99B2582793BA1DC655230AE2EFD24DE20A01D4A441AFFAB7771F223FA6B
9169849E727E494247F67D6E1EA9DCA06A082FE2094BD548AD7F08B565145634
E7ED832FEC1378306DDC796303392ADB0CBA130B63B38ED57B7828B47732853A
893E8836FE19CCF27002AE92C2B2CACFDF8A42F1B8066E033B965D2E9157FDF8
E1264B40813C1A4CE424274AA3528A4F09B3B53DD4D23789A68B3D17BC1398AE
0ADA2C2168427A49846DE0216908C2FFFEF4F13C1ECA12AD341E238EE46E6DC2
B71B54C52659632911F901660261E493AE2483D64E119D9924489779B62BC9FB
A052E822FD8D83178E09ADC825DF0DA07FCE7AD68EEB29FAA275A13691B4A5A5
B0BC0499CD6307610CD6209583C1152C559A2760823F8DC0B9B990BFFE7B7E9F
3969B968AFEAADB9FC0F1410EBBAA0DB979CF153F0B8C978405F8E6F2B6406D7
AAFBF4A655A15DD6D1E9A7EAE10EF89264659B09283F50B734236885FC09FBE5
98D780012FA77FCB19F15BDC522CC7312546C0730EF5225DEA8C22A3BC6554EF
4FE73B9AEB5C2F7DBD474221760E5F539A064AC450591BCF3499E3968F2CBD6B
F15BA2B37080A4129B66D4C2188524F025414F14DB3F96049A8B0E5EB2BBE7A1
AD64A988FE875FE4FE5186BB4F5DDA16983CB052D474B7D72F3E8965663EB50E
015C72407C3437142D3D7DBC055FA627139488DBC5A0F98D805C2143D99F491A
167E07AF60EC9F17C36289368D740B632CB919A0E74C412B76CE7A5906D5200F
9E79CEB9C65ADA3A0F23E8947E834AE7A329A9F0AA7A6BF545B1D7B4666C6522
CFF268634EA06DB3A82D91A4C0A9B227E79961212881A54A6762C335DE7E0831
130C45D94394D21C049B9D189ED955438C2151514F17BFC67E431DD9A8349202
2F616AEC1C7B19F63D5000EB4771370924BD4B9053FE78B5E4A244B9A149D66D
A8BF3B398396D2233E92E4A5FDC70FAADEADAFD255193D688842DBA865CF6154
C9348D590F3FEB135D4B7BD4D76A52CB140888247CAFAB25ED51F4D187041CA0
ABD956F83A5661CEC171B52AF92F9ADE27973B560C802E1E0FF51C4003D1289A
CDD09F8EDA8AFDFF666D35418CEADF3B0BE298F0D1E5C8E024D6A2017A7E71F3
3A9FEC9930F1118101E040339F9D41379170928DDF5B5875212B271DC843F612
E0C21C67263186E3D6929160464D4D5C8928E14D0845762C36FFBDE548188E20
3B6BAFE5EECA0385142F01216FB8A90C43A472C1D4447FE5C7C78CC088FC72E7
3FAFA062C338BDE8A430FDF1951B107D8D73FF9376FACDE5900BA362C66F8C1D
947F9545C5C13A53E4479B1C1A50472C05E8F8C266C6D4F4EB08E97B3B1BA972
26973B844545089C5732322BCC9A5A8FC972FA0D7DB8BD85D2F515ADE65DA479
0224F7EA2276CFED0B75B2C23AE7377F86F1F6F205D6FE19377D87E782143697
984E731F83CA888199CEB425643C259D4FB8B58DD69A96085198306494BB497E
FE7C9954EF35B679BBE3847A9C73507874F71FC97665E2A58BA41407A1745247
44A79B588D969D11CE4B863CDA655DAA53CEA5C3C263B345E782006CE9831D49
603D2D95DE9E370D617F5928BA416C362BB2B4DEF16A5D44BD24B34257765F3B
6223B3F9B54DAED69A90C7050AB97B06693D253C6894CBD7B497DA449F1D9B7C
D91B421891EC0724F59C82B9CB288DC42F2D2D7A7F22EE3D910E15953D7766AE
276DABED3820390BAF2700C4653E1C77FE63DB71A66D93ED293E25B8412A1EFF
809554BF04ED0DE83F7F190883ED793803CAD2C34A66524D3A580ACDF3C13B22
08F18905E7A4A16DA9ED2A112462FB9FFE481EC2069E484E8BBFC19D594153B7
3DED4C11762223B7586483B06BC164D824D1A6FCAE80A35DE0DB8B33396771DF
76DC5C05578EF1BE00A70BAF3D951A01C87328DB2B0DAD6E1B4C21F37D1BC0C5
A929BDE5EADF20DA60C4DE2E3C151005814F24824D33B95F700E09A0207EB602
3EF60DEB1622B91DB99A855A8F1DA96358F05CFCEDBDDDFC8446AE3391BEEC41
966E594E28D052DD5ADA49DFF65E79540EBE5329DFD86C23CC800F95221B9C18
CBBF941D2FA47EF1EF59A89DB5DD188E75EE94AD2A79E2221107E5992C00D531
2E00B544895A9204656867E3DE9D4CDB64B920B5CCA9A73E6514B36CABAE01BF
94C15603B86780190595560F792E5EF01650074EA4A9BBC6ED284B9AC2020641
DCBCEE0ED27FE58171DFE104EEE4202759E594159DF45113C00236127A46FB35
9EC705F21C0E456C1F0F924594C09AC64D4377C5FEEF764BA4A09ABA8D09DEB1
FC13B0CD202B2F04CF5D73DEAB65C36C2FA7C0DC236BEEF6D23BFFC9C493DC8E
1831F19EEF81EEDD976E43BAC6B5CED13F901DE59835FC75490EA528A72CEB77
24C38B258EC38B9E6B97F85CA8C10D8809BBE55A6FAA12456FCAC786942E123C
06D1E55F7ED04400088BEC968BC5081DC7A1B1B65166E7821679F76694F235FC
6854C8776AF855B83445D9FF919B1D80E98DE0741D06D6C5EEDB3E3EA6392530
F1BA817737D8162F7B3A36AC2A03190CDEC654383E31934C3E0A012B639532C6
26FEBE9B412F1C92D1943B7C18CEF510729D501349644C97F087F2F840074AE6
D8CD0FB2E620FFC908BFCD938B675A0A4A687F7FBE8F3DD06A62D7B6DE7DF3E2
49D367D60B10061EA86CD512F5A1BE8950D83C62695E130128E0037B62552D17
064319BBB9B1FAB9D79705E5D68AAE9B36EA14BF1A59A863BDB8DAD9AB5D7B8A
E30E2B499F952D65877C8E38EDD7DB29F9579D09E629AC188DB6A6403AB4BA3A
D358B3770D727A2B77D84B6C9EC17E29D88E3421F9B7D2D822EB78BB8BB50692
8C46DD6F9BBEF2E848A2B5669B200019802AD19661537A84D3514AEC5AA47445
2C791E01DCEDF18D9506367241255FFADEEA6183F51A9F42448A7DE413C08359
52DAD2A60FD606AFE14702BD3B0EC448720FE63438D020DEDFCDE3582FC31DF1
17B25FC152789D2F17FD60B8209D292D2152DCF8D28B5ADC04F6659BBB746CDF
145163361823CA343763AA951C640B5D4A99B7787105A1609EDD6A596EFC3F6F
2FC33D0D499DBE56C6668E137715D435D6B683E0113647B2765AB0F3D98AC717
5B33C3EDDE18506E73B4E392B022F30480BD30F59B2E3A59D93017296C3156B4
B5722E1955777716388AA987B2665669716F866FE6BDAD5E74A523CC03915F26
9B7B231F5D9B1F61DF7CB01ED3F27070E36547B263855DF5B2E3ABD2ACC440B9
0826E1D4A8D8F7E785BB9897ADE39ACBE77199001D9B2F8D9D073F3D8C03708F
56A8327BB7FADCDF3FD7FCCB0D5B3F70EB519DF33B0E56080F43D6A5ACE30573
3BF769E7130389A2C40AFA431E0F19E04A1F924851863BD746CD5878DA767B47
6E854D4252488B338255936D1A6A0DE230C4C2CE83CD2FB6E093D7E20AF1C9D0
89E0E11F72CA84A07EB8B31116463D2D0836EEAF639A9FEDF9C702CE30BA5CDA
8FA344DC36677990CA18502EA30994EA77958709BF2E6C3E62D4026AFAFE49DB
AA9268F3FFE67B519B46C8D467B18309AF41A25A8102607D3E0FFBD426E3022F
108D363A9255B1494C820C4E930076827DAE91E24AD85CC6251722856894A1B9
4E30A94A2E39F1D602AD93DE20BD7BE909FDBD62F05E82D85B3C99A8DE33BEBE
7200B1E9A3EDC071901D5214BBB3FDEED65AE4C1D0D766CB536F63A871DC3763
0BE7178A6EA3F2C94EB5FAF1256591E558AE4C49C84889D29BFE8ABD58B717CD
16D6D23AC25FBC0AD45D8E1C2254289B02D9C99ECFF1FB6A8761BAD694899426
27ACC1BED108946EE3E289E47D5CDE9C1CA5586CAD97202F90DCBC2FC3FF72A8
B56FCE62193A7F3476D7585265D62ED227CB8E364C86266FA8B377A71CA24B3E
9F8CB01E2D3739366CB7A6B686AC6A7DCE2B2583CCADA2194F7BCF7AAEB61A55
20D2C9120A8249942CA8163EBA3A9E837E92CA45B9A1078863F19EA153DD0C0A
5AD9E04355D49747782AEDCAE7E94BF2D9B8C3C2EDB76F89321DC8C6C871C1E6
3FC66FFE5B0854C415983DEC5DDAAE7604E533E533E19C8458D2E4B54E0CBACC
1A00A4CBC3883EF9D097D0B6584E736335F6B6C34DC8377801BAE6D10EF49349
387E69CAFB199EA55E8F8044410904E929211B5F74C44D0098B364D74403E33D
6107ACEF4CC5ED1CC1B12ED4E49AA55CEC2343AA0E102FF754DC0FAFFA0399C4
ED245D9F0C4BA29263159E930DBF9930E4F740413E24CD66FB2E210C6DE7CE09
A206681ABDA60DF91D23ED7447FDEF95D703E0636CDA949D7C9808221DED75A3
ABCB0D7CB68E9524365EFEEDBCD1995DA347E19D685258792440D2436EDFC495
DE23623D3A65BCE17C2B3FACCFB537312139537330BE39CAB2864636E299C641
7E504E2AA378D572F0A6CA4D63963BDC7AFB0220B54FBD8A02C71925349C05C8
59023F93CD25416067BBDC1F89E072B15EAFEA6294CA086DBC6CF980F5E46304
AC63B11C48994B08788477B417F67535F3414AD7F29AE91E42749073029C8FF6
28C06E173EC8AE34F645A24797E90D6B57A9B6AE4D11C7E111D57BE93C1FFB1E
013FB0B0125B71748CB8C23AC1A06B23577CED316C6B57C9B8116F42832EBEBA
DAA7134D66B97370B43475579EF10136EB44A8DE8726548433D9E101211352A5
8B4B9C05B9399325CC847153D9D118CB315F4F954DCC8D9A9EFAC77246C81EED
D5CF07353B0A342CC22A23067CE942BC6B812092E92DA4D04DA1C21D8DE29843
365DA8D17B511B7BFE5D775FF0CFD59B5CE36F1BB10E67A5DB588BBB0875F46F
F1C26B372EE8868D4E619FBC18D3A33A96CC794117B141497488B44657BE1B7B
F4C6E0A0B3539F2A38C52B97D9EED4EC387CCEA1D05696C2361ABA071FB2E37A
2DFC960A51337A204BB66DBB780713146D2BB39440445569B19F4BED17
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMMI8
%!PS-AdobeFont-1.0: CMMI8 003.002
%%Title: CMMI8
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI8.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMMI8 known{/CMMI8 findfont dup/UniqueID known{dup
/UniqueID get 5087383 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI8 def
/FontBBox {-24 -250 1110 750 }readonly def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI8.) readonly def
/FullName (CMMI8) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 30 /phi put
dup 32 /psi put
dup 33 /omega put
dup 59 /comma put
dup 72 /H put
dup 78 /N put
dup 101 /e put
dup 105 /i put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 120 /x put
dup 121 /y put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFBA9B440A6DD72BF8
97084C906B05FAD969086ED21AF0AA1471613182B26117D7494DD9F9270EF3ED
8DA4D957225F75D060237B6DAAD5A0AE3E702B3D1C437835B93B8AF1F9E7D966
E739CF3AD5E256F90286A34069E5BB4122F94F18F3485658D0D25B938522A879
8215A417CA2CBD20F71C5C5FCDE21EEA7BB27876D93BA667868A419287FE59BC
F538980597DBBA743DBBDBEBC61E3286DA7977833DC8BFC5E52FF5DF5EFD9A92
D070EB769E31E760A50FDE012DC0057835E8B9B046FCC83F1A0C40326AFB4E3A
0CC3BFA35FCC64E32854F32EB7DF10A19F95830136BBB8139DE1663B7FD790CE
464EA431AC109FCA0E03F3E0D355FAE20AC8774D6B1CE233C27680C77DDA7356
560A27C75993E8C980CD1E3B0683F7E8A05119B3AD567DAB4851B66E418687B7
F9B21B3BEF607918D5973421B68E65DFD8B6C8DFDCF1CAFE2637D365148EBCE3
FA4CC00052A2A522205EA3AE3461CEE02042E1A3F11467CB6C8C849B200CCE3D
0BC188EC7B934CBBC0AE2BF5DEA228181DBF0F774119F313516E7D97FF532621
9278F856C166CA6547504F34991D588A0631A5CD06363F3FEE9FA0772C783447
ECD0A200929CB58EBFB6B72008E4082B5D14AA560C24915B9463A92F38237886
C35CBB2D4DD6D0CA8C1D4EC46093041C6181C2F6586EE3E7D4E647A107B6DB23
DAD9AB5A0C2905455FE58075EFF6B48597078BFCCDD84812B98986F34987CE49
7EFB19814F2A58B0233A59331F6F8EB66401F04EE7B1ECAD9BC90A2BCEBE213D
DDDB1F75C83609ED6A669A0CED58B2E269E76ECF73616D94F13CF827C9BF354A
E82202988DCFE856786B8AE569AFF3105B55C72C58D310FFC0E10B2ABAC8DB06
40D5F72E54770E9DED1AF4616008595B8481E3D9AF4191CC9A5BFD9DDD01C9F1
FE7165D21E488DB40879E863D470CB31CA06E5B5F1F8C3CCE04B697CEB0F3557
ECAA358D2EC2B370519CE06138FA702314BA01F1F33881825EAE1230098BB3C9
59666983275CA4E8D9DB34979F86535577E79393A72F84B0F768FE8C92692907
15E9FE9894E98A0EBEA490CBC8C7E5A9F3E43B24C2C5A4BCD71DAAD3CC0B8B82
AC13933543E295C163F61C9FD18371CB514493F90BF7FB460C029B8DD2E2BF05
FD66B451DF277864DE1EE42100BF29E01A50258C2758F3EDE211BB3457B8243C
20BE72983FD6FA2581C5A953D94381E32E80D6D6095F2E93A5455C101BA71E8C
E560D4694E4C167EFA25FB1E9D214AEA745CE34CAA5468FAEF8F6BDB6C6BE8F4
3D58836C26A2392E4C4DECE284A90DDB3858A16D6135FED655A600929DE71605
6CA32F6851A2A6F71A9DF3D5D657593BB729CBCA2F4B059365B7263DC08AB211
9C547096E6427F6AA53CB2EB87DF0AFE2ABCDBD15D7EF228D3396413B83C6B4A
79E41F9BA55A2688F62A10472675E5658F151F9FD6634EC94EC0682C17448024
CC1633077C07A93E4DA8749D974FB8F4332B5DECF97D749C10DB60D4C90ACBFA
E65AE928C88BAE19234690EEABDB30BEDCEF2660D7464D5071058C30C572A2BC
7DEE5384BD7614A4BEC4C84E18CF7EC81C810256E8CE6520466C033E2A36D3D3
5D6074B3857415011D8D9D49A474D994571CDBB89AF92BEA879BEBAF67663F5C
17ACAE809C2231EDD0A76641BA52FA7B19A2798D54A4A9B62C42F9905851229F
2CEE0191C8AA5AC12BB0CE9E5E3E862683AB57DBB4AAD6AC0FA8BA4F408D41E0
755F72B82B7C18EC6B13995BF7AFD66AF4BA0EA7523DA8B75EE751744EBA9CA4
4E8BC1FB37734503A5B24FB9F2C2D07A47CFC477F02413D55BD7DC180B0344E8
50248801FA6BE26C97F397797F5F9DF762967E7CD92CCB8B2E587C92177619A4
BF8046CBC72C6E69DC78B8CB6B7381A290080EF59F5B9F29C1167B261C932E9D
010D2D14BB425D157F22BC0305770AECC5BC80000F8CCFB9930255A68F299ED9
D3B5B83A2CC00E3305EB281E1A7054734661B175C6CA0AF168790985F173DF03
A8693B677BAFE23C3CF833FF6463B136FC370E4F0C29E322DBEF637F62C33CD9
B0A8338FD67EC628E3BF2FCBF7CF0347D5CBA1DBE6DE878DD670176B85F69EF2
3C5CCA1BD2B8A385F113EF1CE522F5A6AE053B9C1E39408C9459DE3E7FE2C4ED
77F026B0081BB80D40185458139C16333EA27F43EF1204BFBF80BC5301B2A3AD
B10F7EFBB4F5B7E04DA1167F68BB6D4049440B0F57385FF0A95E72760C6A12F8
1335BB31CB74081FBAA319180DC00113CF50CC5A41D2E751E055DA1429CD75BB
0060C21CED634FDA106C49A12B356129D010E29F2919301AA7F80222AF3905ED
672FF85C9897A70241E8DDB9A53034B6BB44E140D9E739848E7A782F24B98AC8
00DA09EBE4532787E5CF3ED815705F659D8E52DC2C2D4949374A3BF192BEEB99
1D9A90A4F3250BF8A1FD40D91F5B34AF2CC561FD02FED712500B24330D87DA9E
4AA46B6E34BCB40B1F73A1DDE07E002B9478E9651D2BF85E67585B6ED812BE03
A594874A235B1C1840C4BF4BA6D863583D8C12DB49EF7F8CC24DCBB6B21FBCA9
378F3E2DC406291AB324571F76E0805DF8826090F0E8B50599CA58D124653D16
16C782B01C91A6F3DA6346482E3163D28D95EA49866360147296838A3FD0CC53
920F91D895F839CB61FFD2FBA296CA4C6304EEE579782AE5FD33D0FA652BA7E2
CEC7C01DD0D3E0D56E6177EE5F609A396F7FC8EADABB465DBA7F384E215C4DCB
E64F807A50A461545107F9C3F7D7CC7D33E6EBD6D9228B1DCBFEF160703E6129
0DCED8D45DD54E2A36E698A616E7906A50901E453BDB2A363EB77144E9EA6F2B
6BD927495EB0EBA5755165707CCFBF8759CE5856881117C7F3EF6D494EDDA7EF
E499BCA56C86467AC573DA9C2724FCC74BEB331E736FB093DCB67DAD42296655
415D110F2729BD1D55E5C9CCE2E724116F45FB2E66AE0F790258851A5C808762
68B8A110BD326F8D3EC45004E7CC08DA42F6CB80A6B6E7C286F139534A275BCD
2F812993DD9C9A1AEB5E7E4BDB4805DFF3A7030263AB060C9B74F0C25C5B9005
965284884450CC2815DF28D5F9B0496DC7A3AA85E1E42741E1538797175C28D9
FD904699C771FB066397FFDEE8E8DD1ABBDF67E6BFEF95BB700A7C1BA91354C5
42EC3864F6E19B379E79A1CC3C786C0DA146C6B0B8E507ED58DBB1F12F613A98
0E1F8967991427A22ED323901C4B83336CD343212131E8B59C2F5D232702ACC5
7891BFD4EBA5D0FA35AEF9F3520CA82D121BF6885BBDAF15248A9E4649ADB94D
0735CC4D14E1D7275427D00C8E709579612F7F74DB6FC218C10C278CC63E2AE2
37EC996B10C0229D687F0DB5E38A8C4DAFB3DD8A9E7ED37186FEFC97790A1EA6
636A88FA9FB4D282234BAAD301A1F3AD33F252C5EEC49410562FC52809CEC466
A0F6D148E9AF19D6DA2337C8283FBFF6005C37AAEB0B7F7217A8DC6F949B9984
72DEF163E4D5ECE4288404448C96A7FF0AC76F732D50AD63A1D286C9180E80E7
C218B1F48E3034FCABA6BF262CEECC284AC29E9F3CA1CFC1639A681ED66C1FBA
666F073D45C84A286E05FF809D4764FE819B6A330E73695CCF2F448B4D4EB4B3
F63E94EC289807A2F9A1159CF328C002B467B19D6E9454CCE36FC19E0A214190
B251818DD456EF658B0398E275514B72D9C1DA5F806EABCF1DD56BC025D69FC8
A0C2FAAC1892B64D2AF79EA2F57F103CA623E440307600D50E783FAA998EBD40
51D23A0CEFF8D8649B48B982DC38D613F882DCCAE5F51233A641B3CFD783F830
D984F116DEA3ED8F0D3369AE629A006BAD4523F8E3C7C6B39A6C972508B67AE9
32613F28CCFFC4BBC86CF31A0C25C786554F7A1F3DE97F5CFD1A941F775067A4
784385E2D02EE1FF886701B1E87D966D3F500E15591A5012E645837FE2DBE3E6
A3D375C6CA0ADBF96B33EC3FCFFFD888D7344B31D40427B8A8BED0FEC6FBE038
1FB5F0714C4B5A0E607E215B5B7F76ACF0FEAA4C9790EB7E13C0E3933B7C63FE
5B934EA34F4B741C3667BF1735C685CECA63507E6FB9EB06AA010311F12AC1AB
4CE3FE8D1EA1EDB3C700BEBA516FC71D740B1CA1A60D4578003973CC3EE21DB1
58FB1CF7E2EAEB2A4A6C742EBC3575EE6378531C6EFA6E6986E68B8E25CEEA67
A59623FC1ED2ADDA9D72DBA627D179E47DC7F5551E07EA4D54ADB6CC8109D340
7279F288E552EFD79C17DA3431E53EED66D16F24BF86468C2FE7EFF421560500
12FB048D6CE2F370BE4E560F8B4AA12362ACFEBC839351C1D5100C625B14CFDC
747B66082D4AD5474A63EA0054E9C3E6295AF6B133348487B0471395857F4B73
4BF8337DCE2FE2E1A4EAD7E7BEDC822BDDCE42B79B308C11897C98E3ADE253CD
09CEEEC0CB1DB66AB072E36E1E04911F40B535B0FD85982C21B8A587D65C38D2
DBC5A07A0A26DFFF7460F10781069490AC1B611CF7312A14B4AA6005A4582C5D
336BCC30EB47749193BE8D457A43F54204B070DF5AC2057B6437E23705C7FE8F
7BB150560F7044BE3E48EFDDA539FEEFB0D2A7856CD4E405FCE0F5EB190D91AE
578E2EDEB9ECA218573BB1A8EF116043A27DD17A4047BCCC7C5F3C563A910778
45ABCA32C7347E6180ACC86F9D665FF025DD8AF514FC3724B5C3510F3C37E0AC
5101D1667C6ED4E8F37F06CC2BDF66CB5A9FB7C52CAD26344FD1557571336A1E
1E340EBA149B4EB99016D1A411FB874914AAB2A415CE3F5FDFBBF5AFD7959B9F
CB127BDC68D2A2F3F07FF3D4FF32046C0371CD2E68A6471E46B08413FC3C7A80
A107EEE57979DB387B2206D2810DB310B7232B2DAA385256C8A58964B512003F
A0C24ED21809E2576229627278118107B9C32345C1EE8C0CFB452CA362379369
31320DEB5371037AFAD093B61E8AC7A6DCF7D49C7F8EC32DC0ECEAFD7E892810
039570D2956289B15E078C2545911BF535F72F7DAC619BBDEEFA855BBAA81704
18F7D351B0936357085A32157AD8E27438A58B2397D69264E748B0B8D01B33F4
D04DC59326A7DED39E247A1C1A1AE49382BDBDE9478A1CB48F88BDF14A268B40
A40B9FBFC4C87FD3DF1EB2464C3C14E36CA41E09EE0A9B75FEB0769F9ECEB1BA
EBF73B818427FACDBC33BB95B9654F31C59A766E931C698A8608F15290FCDBD3
5C535D9036A19CB7B55BF54E96F9B2206DC71624E2E55FE632FDFDEC8757AEA3
1D83D190ABED5E7A7AAE2F41FCEBC7C18626BF58F9E9F02FBAE0C8AA85E9DB21
A3D8907522DCBAE4923C6A2A09FD2F08FE32215C544AB577B337D929E625E704
E041C2381AFCFEA37F3133B6CA20093EFD457C772E428325E56C9CBCC447EF9A
05A8C3F28017DD4FFACC51B38E4896C5044266EAB4EB7C13FE855E790DCF8A17
B61B1D30DD866BC57397EF6297C4891451FD6A5C6AD6D7446F58F56A68650908
224D9F4C31C6906FD29BB51DC947465B808438E6260325752808963C808A4AAD
60422ADD62CAF315F6AE92FACEC55D5B682089AC0BC051CE1E2C06A3874736CF
0DB5F7C8F178479E4F11665402781D80397C75456F5CDF0A4F382A19EC6AD64F
71A9275264800E178F212269154DD8352167C57EBC0A38BE794AAD1601C8E541
7E1AB8E969A76E1EB4092644958FEA2AD29635E70C4DFE2EB0D9B3E1644FAAD9
B27AD5466EFAC724718962B62E7B8C32F412B69DFFEB792587D571FB5C591D95
4CD441662CD1B07595E245FA537FA9EB5A20A97E5C9251EED22C9961B48B25ED
85BB7524F635F9CBA3714C6D60A6BF920C45A64F4C366C1F9D22F53084997C9A
EFE2D79FBE3347111F5093E271DB7E3770B35D253DAF93653F6A23FA145AD775
AF11E188EA0428137D9A14542E3EDA6F7B2E5AA86C9F3D3649A85ED2F020C696
01A339FE6D7E42BC548C8F92A4E3809C67A986C99418772403D16D0E8662595A
1F37563671D6DA0F36CAC99DAA8FEA215DF7D45E61314915A30A22FCA86A50D5
2FF2EF08E240F9FAC030D92BDFBE40F1972DF413E6B452024CD11792BFDAA2D7
C82716528AD4B3D637BB43E748336DCC86A952BE96F1EA423E31340FCACDC1EB
02EE932F58734AF3A5B2279361B63F1D824EE3BA9F4D2EC7B33A300A1CE8CA43
24616444176DB8099D85AC68329B1F85E4B5B16F3B396FE2AE7774F3065D0203
AA140DC128D6F935C44733EF585F89E8639A2096A225A2E5E49D447D8AF9FD44
CF6C1BAD5C5E5262AECC5543EC8199B00B72BE32A0F110F64A1D0D5CCEF38FD1
155D6198E9A343702F8ECF5052333272CAC2FE016681E12745CBE14E1065EFD5
407DA3686080989F6F6D650A9F1EB3A813B070C30C0D3B4A1E9C206E2E4DFD51
D8DCBE9AECF956640A2E79F1B4FD0EB8E0449AE1B8FFEBC43275743B4D7F6605
0673B61EB3189E74F51F3780A91E6A5C6464C8CF7D563D9958D46F39B1A12087
6BBD4898BA9ABA468AE1F24115891FD3CBC2195F75958E26DF8BF1B93F7B521A
C12112237AB23A8E5A7B7D0DC4C53692B35F3CD813EB463C0BD3A6486B0476C6
3B36DA71FE512E5745D097FD4AF5D056E434DEE2AF926B2EE79F7FC4FEFD4130
BB4B4BE01E5C720325A4884507CB51CBA4FFB615B78A4182444F0ECBE4161A58
E86FE1DA2E39C2BECBCF1F1D7B9B776A26078FC252128FA8108CB83F673CFD37
CCDA493234FB93E1550EF8D2DC049ED95B00A8A57834B024B277D3DF062E748C
B61F183F2D72AD075474F8165528CE75E4F40B38B0FAAE45751C1907F8D31619
E88EAB02EEED415F3EE3BC5BECC6AF565D34E0BA2958FF337A2B06012DD1858E
C53DE52C108BD5AAB76C882198C72CDCC958D68EA8FD26F76F04EC1A08B2AC3F
A6D0E8724D2656555DBC0C8C42A3E22ACA7E1BC8E9F897D9AB692E0FB9EC32EC
59E31CCA4516A3C3BFD5411BAC3DEDCE374D48681CE7D67DEAB93F5B5C5290AC
FEB29C5EA2C98095692873D36C7DA24847B66F31E4CA4C7AE5C79D7CE4F0532B
78620582E3731A2A6533A03E7155B33E7CD142FE79F72721862EDB24959B9783
F834CB616FFCB2A23497BA6D99AE34DC459A2F7B3E4DA2B54BED118ADCD92178
66C40F4E60F6E1327D5DBCA645A2A7C770807E6D7E47E1265C753F8793BD2D1E
BDCD749CC24D4AF9315A93F01180A0F9A7F420DA1B87664DA5FD967131273271
9DCC45C3D57EB9B8AF14771E8E751D88B98D2FFDC72F5011D402EC34FD010ACF
D3B0660304725191D64FEE106253FCB3470F1A16EB7B45C1489D3534BF94F740
C2781DAFA5E8A9E7B25A85BD7935DF3ADDE08C960E283D8FC3976FDB4085DBB4
B6B35FB239C28C785B18BE4FC98F3A5F410F562DB5FCA04E8074E4E790F4265E
F88117B3D0833AFAE6E8B8A71D7731BA6F14FD6F217EDA3F8CC687A494FC3914
B84FDC37C8C335AB1E7E0BEC7FB6B7A595C50CF8F0080C8D461BCB8B579A5155
F963B6587873FA31C3A6572740C63EFBE58A2EBB723B7517D2A243F6CB08A038
54F4DF0F6692022B2EE8C6F6B73735ED3166BAC58D9216A06EA6FC7B63B20031
D0F0F99D83D9030B413C2360DD2C553E34BD67851B743C3FDA676AD63C5BD759
9131358C6BCDF05FCC048F4EBB9005899ACDD8E9EC9BB8C5A08E83485047D263
0ED69B4D1869A38068FDA03524022A1D32FA2AE0BF7785FCA8F089152A57EB8D
5467C28AD44E890380CEA0B0E0CD0F6427F2C3BC1A5257BF03D902BE94A449C5
EB8F33DD607BB4E0A1A7A24431E1DC2F03596EB2039CC1A9D524E10B374E34A6
4DFE6694F9E158DD6678BCB0B56BFF435FC4F5EC442E14391B45178DDA235B7A
07AB6EA76230B60456344BDB08C929F9453553452C97E016C26C11B68186024C
D1AF6C638EF54E26AA88856FAF1FA9A0DC5A9EFB7130EE72EB3313510EDB1DF4
8D8E512036A986387D8E96689E912149A342974F559E7CA473A1FD2E01CB1197
990EDF8444CC83F1AF738200D6B01348FC84249D77FD2C3792BE507B455AA8C4
8A47C53FF9832AE74389132337E4FEB6F45B5BB29D6F597BA179C6592145F301
A46ACFAB07818BBBF40FFCBD118D4DD0F87D65E1D0E9B88EC830AFE34BAD1526
2CE90D193D88877AE17FF093AFF181232A335E7A2B13520FE2DFDF2600CDDAC6
68C0665D9A85BE2D2CB92AA47DBC9DC58C73FE498C0188AB7FECB942C019740E
545F68F084A66CF1B76A2223BCB6C2DFCC98EEBEF4973716E780DC086B4C67D7
36C490D81737976089C4050E25904114411ED2C308F340513CC1950186E0DB76
B46397A56CDC7E536E32C9F988C1E56835B9120A1C08C2E1251F2E5BAA7AEC51
3B86F5B46BAA6C912A4DD180332C18F9EDA97186FDB4BB946921EB37CC232173
25588AAE9C5B531853AC0D06996B98D8CC05E3EC1D32A33C42A59259C1A17790
93E74976EBF665563372A8DD1C891586F794831B9DE2BBE456D89EAEFBEB0B6C
B15927F3E0D219822F50D190668F4A4A8AAB61724BAA688985E995009CAB20A7
EA434839681AF4895D9E420E03309EBD39951A392AD18EA34E914E01CE322B59
71F3FF05A8D1C1550EC34A2AF940B1D4751F3ECC500E9D47B90F8EBE4604C6C0
ACAC62E2F447404D47DA437F1306324C5D9796EE7907DA3A762D824752186413
87E424E77A86B5706BC9BDBE8612B808B95FE15A5B035735EAAFDE30687CA913
53C686565AD6B32D693064E3DF73EB99B73DC4688F244ED097584D8285E4DA25
86698FAB3A91CDBD2B777F1B1C0E64A17C5AC80545A64BB37D133C1B2D425EFD
1D2EE28941151A23F1DAC65453D348F714310A4CF1E1E7024924FB3CBB3A25CF
51661A6AF341B0D9B8A8197165EB83F6BAD9ABA30184B6C088436BE5780A39A5
7C6F51D3E9DC4C70FF43D33E2BBB14A6677F6B8CBCE74BFCBD2CC10F2130BF5D
9AD853B05776E3044EDBC618517DAC225E5B330DEC6F06CC185B652E087CC6F7
06C4FC9127A414BB8B981AFB3E43AEA0790062F2F1576A099BEB6A05D6AA4DBD
921A162622DD3F78C56B0617F517FAB66D3FDE93A6C5B992C43E06E8387F6848
B3692F6B5CD9597B91A4002BCFAC46FB92753AE008BC4ABDB249EBFBED98350F
F4585B384449F62275337A56F8D098A11BF22CCBCFF847BDAF5454C540F3F9E4
30F7540C01EC69527E7ED12D9BB64779EC73DEB6E44BC05943EC994AF7EC14D5
3DB0B680D1CF61D06EC07BE4BC5FE7E05C464DC1E08A1DFDFAAB6B0A3947D9D2
EE241AFCF83EA09EC1FE60F60251E75D1CCE0A715C52621567E23797AC555B10
E081F7A4DE6FE00E246DB5C88269ABEE49DCBCB7BFE16F414321ABCE41E18F2D
EBAF637B4AF205B9E03DB5264E1AC4B10A61A5CB646AA4967C6DE5DA413C1ADA
7786DA8ECFE6AFE83CFE6D04AA2BBE5E701AF9EFEC896E4EA0B90986555F12A7
5F1B098563B388860DDD5C6EB118A626D0DB73156E3BCE303AA2E7E17D8E6F18
B8336049886173486C47D27CBA0D58FAE40C0F5152BF13BF106431D1F86FF724
F05DC58811B7E467D0D5A40F5FD16EB23CABD075F9EAD683C7B111BF1AFE5A4F
A1A48A4071296BC1CCEA86F9AA892B9F7CA8EA91D1DF34553917A67B3CF859AD
B17AB7EC755842499ABE8AA05E0443E4A7F19CB54DB408B5F7B9378D3B366579
0439668034096C1CEDE681DF9734DF3023A8A152F7F6A95D16549D2FF228A4E2
E5882E83E56240011D805038D2A105E9B56468FBA3FE662451800157544857CC
524AEA4BE612D027D6F2E99F7B97659C53E8B5A7ADF4E2E774057AE938FE4AAC
6484384B36EC28D286A74B34E761E1EDB0C7832F241167E5EAB1ABFB6A8F3CD3
61E0702AF313098C75AA30B1A0F4A08856F574CA0D29D8C1261E0B0DFB8BDB52
64DCAB77F79696F07AD84C46AD07CE5151AD6E69AE849BD194B8F6B41755E636
F563B000BA56FD83ECB7E93A8A14D55B3FB9EC8105C53F953BA436F98DF4FDE0
D0D9E163498302BB65F3820F4AD8F52C6B89D48FFE2C0DE8EF116816F6CC4F08
0199B14559982323CFF37D2712CBC20E155EA7BC7C925A80FDD8AE77FA001B60
76E79F1AD39414EEC99945AA4F8F616FCCC14275D92C8816203B23673DC0A521
1A3E91A2E3D5E0F2D774BA66F77C2874B4B99B0F22EB0A9306A45C7DC70C660D
AEBDB72DB3C0F876ECA5491BC6D10C1CD3293C0ABB51C33901CC637A41B11CED
9C8C2637DCC802754092184EB0F2D1D64A43D6A205B45B259CA5588E75ADD7FB
3B6E47889B0A4F359E5C5AC8F3464D001064042A241E3B6E052E1597B5E0889A
C3876EEF365B07BE466ACDA69041B9D7BE17EF55A579E15B463C5D668D4DB7FC
C1DF463E1CB7D22AF04A25B5AE623AEC80D93BC71F78DF7243F0F32AA66AA80A
C1C993B6CEB761D4B0F7DA0FF4F8E56F0754F68D158A8BB4314075DB8E7B30DE
3FDF4FC2224603E2918D58284D728BEAD6D571AC571E0C35F7D5ADBD007D8298
EDFCFA72D5A9602023857C88F7036333056D69813358527F5F0A94BA98E2C33E
41B58DF7D80CC1674600584588EC7445BAAC29EFB868A542F9A8943CD555F85E
D57EAC04EF3B6B47E4855D20041B0B8AEDA15890912F5CDD58AEF915ED3EC058
1DA8947E7CE3E6ED9A038D577681DA0C4B8F5A183B708DB30AE1C7A027C26389
0D0B16C462E3B25F63DC137CD98A328B8ECAFC3381994EB7DBC77518AB2BFCE2
93877D462B8E800B13C7EBD2DDB2031455F7885F1F710F0582F103C2354D735C
3684DEFF82699CADCEB2FB786482E8C751887DA0FCB487B75C8223B0664CF548
8D599350964C9E570C80A696EA1EE6056E19885901B6FE46B29F3D374418D790
D285FF78CA79205E6C7C1FF068D79B7506EB6D07598B498677DED83E121CD069
30FE2389351A746B049D59538E4E23C3FE48A1D56090428348B117E1EED517FC
D33A6A234B8D568DCE724583E608C34481190250F5AF410C0D5B519B2A884A44
7BDD53E3C49513AFE3F6B6FF4BFA905C95763245B020D0C27E274B903F9ADCFC
F2099128D108A5862A188F50D45C88CE03ECF6AE98CDE6D20C2AEF6414CED527
3B941E9B8C64397A241B877C800185D1C381B5409137DB0319EC906436CFC3D4
5A5129F36F04B5261B24EE833BC06DBB4B9C0DF67D83F5286318C590A9CC1734
FA6A450C74B5813C223113D62A380F5E9558659B5E2631E8F910E40CBCEFB951
EB2C56DD16C00A7279379E9432B9F2F4484DAD7297556A327DEA3D661E3E0169
159F51BCAC83ABF1B5DCA89B9FC337744781995E2D2895505C574EC5C2234956
60E4F76C9B7A5D3F416035FFA21FC3C9ADF9EF37DA464B81C61C73F173026DDB
77983D6629471ECCD44DF0421372C3EDB47E69D3217A43CA3D741216C4FF005C
92D15D3710DE324931CE910A352EB31D8A3218C8424A92A49AFF4B885135CE03
A1C7A2AC27038CF71F47AACC5B6615D41E143215AFEFC99867FDAB6A9D97771C
07C25F3A2E737A9DC43C2227A30FA16F2E98A1F85B0C626D1E11FA8DE3B98376
A99804A1CF593DC6CF354EF94C5FCC2AA639BA7A33F5021C3AC0ED48E50D5B37
5925F5659C3DAD7E0B018E24E66074B9AD049BE02D377C64001C4DAB87FAC50B
EF15460E2C39639A0AA98020D307125D9627FC21441B334A8598D79FCE674303
9FD6B9068981F8347FA3EBD52542EA882B98BE34117F40AE716BBEFBD6E7A5A0
8836CA66D60B66859F849C5317BE7C87515C7C0369E40C7CEE09C9125FB62ADE
E06C61342E6AA18197B9DDE555CF6181D4E4B3EF048178CEE87247888CE4E27E
7E568CA2E32F3CE1685F6BB12D7755A9A1D296B9E2C710DA59618FE6A86B8FD3
F7D922303D58D41AF3CB9405F89C4B937634AFEFA67AF1C5F4678A62E6826224
641E5FCD23E8A8015E69437B055059BF4F7DDA5611C834C142732C79E90C5B51
D009A621A215855557BFB582F08AD50F39F11E4AE89EB28DD8B108FFEB8A4F45
E8E3D4FFDB831BC3D74353922032C6D511E831C80AE7DD159CD927A56231F617
FA201051EF0515A4EC4C5DF8B1D2B27F7B39BD374E3E3163527E39F6AADA423F
76A94254D0059EE9EF6728BD18A4A822268634A61BBD9BCB7E3D665E3FC717EB
3B72ECF1815835F7E51ECFDA0B0717F5A3ED02DA5CBA915C97524EFBAFB9647C
EEDD90525F5FCAEFB8BD8C4A40E281E3D30852A756A185F43A37532B72BFB6EB
E69E2A152DBA7927C090AF2703846B4BF749093F7F9914811959A5AAABD9D4D3
E942
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMSY10
%!PS-AdobeFont-1.0: CMSY10 003.002
%%Title: CMSY10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSY10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSY10 known{/CMSY10 findfont dup/UniqueID known{dup
/UniqueID get 5096651 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSY10 def
/FontBBox {-29 -960 1116 775 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSY10.) readonly def
/FullName (CMSY10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /minus put
dup 2 /multiply put
dup 15 /bullet put
dup 25 /approxequal put
dup 39 /similarequal put
dup 102 /braceleft put
dup 103 /braceright put
dup 106 /bar put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36AD86
1319147A4A219ECB92D0D9F6228B51A97C29547000FCC8A581BE543D73F1FED4
3D08C53693138003C01E1D216B185179E1856E2A05AA6C66AABB68B7E4409021
91AA9D8E4C5FBBDA55F1BB6BC679EABA06BE9795DB920A6343CE934B04D75DF2
E0C30B8FD2E475FE0D66D4AA65821864C7DD6AC9939A04094EEA832EAD33DB7A
11EE8D595FB0E543D0E80D31D584B97879B3C7B4A85CC6358A41342D70AD0B97
C14123421FE8A7D131FB0D03900B392FDA0ABAFC25E946D2251F150EC595E857
D17AE424DB76B431366086F377B2A0EEFD3909E3FA35E51886FC318989C1EF20
B6F5990F1D39C22127F0A47BC8461F3AFDF87D9BDA4B6C1D1CFD7513F1E3C3D3
93BEF764AA832316343F9FE869A720E4AA87AE76FA87A833BBC5892DE05B867F
10FA225E233BCFA9BB51F46A6DF22ADCEACC01C3CD1F54C9AEFA25E92EFAC00D
7E2BA427C25483BA42A199F4D2E43DFCE79A7156F7417ACF78E41FCA91E6C9EF
B933450D851B73A6AB6AEA7EE4C710CB5C14270D1674FA334686653793FCB31B
491E870D3C2BC654D2C1DE463EC9BA29D7371AA1078800EF93D3F66263A2EBBB
F5723697BF7448BD0D2E301544BECF497FD475B85DFEF52AF4F8F8BE445CABE6
019318806D10C5952157FF8F8286C1EE701545C8F60EFA854EAE66835A2046A6
915D395F1E0366EFE0C0391583FE001FF16D82A2E2DA5F57754A2C6F69306E36
356ECF8EFC3F1188AD6FCD2427E0580C97A5B69B4E0E09B85EEDE142F5ADD2F0
5DE51D6DB72B127412A0D57106C19CA493048A4F815129ABE767D51715B1515D
9C21067CB5BC88741B7298C83EAE36A866DFA87D8981F179B1C31292F56BBB64
3C430779468AAF07C8A8B4934E1E775FE3F35186BD1FA6EE3689C1C750678AF1
FBF9B23195A124C5C991FE670AC0C86FD39D2B07B9A319E74EFD498B45820252
720ECDF7294F7B0B137CEB86D33BFCEB8606985A3260FD669E461C8BE94216C5
D434FD8854F44EE66E5A289A9F9E32BC36AF645D53F96652602BAED418C8D726
BD04A1B4617551FE4DEF54083D414F7DCE004E6BB2DC9C2EF7CE232B254BA2C5
7DCBD36C2072ED46FF711F121A701E2284BF1B718B3164382B8F453D68FA0377
DFE106503B8401D4DB87F5402A3AC9A442FA060B0610A9524D530C7157C26B56
AC970FCC1D5655FFFFA39246E6420CF97D08ADFB7B05822679BD40C638DDF0E7
A97BFE8918B611A145AC965C203F1428812F9D340AF499B3A915B22BE798594E
0F520109FC81E452180AE45B170FF999C5FC2761C6CECD8742A5A6FC97F16743
AD4EFCC6572A6D3F3E4E330C5CB2FF6FEA48A5B64DD3DBE943BD9918D4A18E18
CBCF598AEFBB6AB3CD2CBC9BFD6099272F6543F3E532E0E21E614BD2880B1023
0AC234CB705827BF016DB84E00E8C255FDEFA0101A842929540B7B4AA8A089BD
5EFF05B72356B6BC3727817823B5CDBB1B963103000D7F2A4E2A1472FC3E614B
5CBCB6D6D784023173DEFEBFA8F9ED87EC1A0A9EE98CA59CFC964CF943DC683F
E9E00DA718C4425A705A69D99988EC6F152525C790912C2E46A2381A569424AB
54DF4798BC2D7E7A361E7991641D4B756CE2A7FF4A2848927092C59C2C4B8809
E13AB84FB6B111E680D7FB9F2FFC2C5C66B0B501E4447C2E46C10E2F6124476F
A140C404CFE2DC9E0199BF61E035CEB481D438139A9630934E541D261FFD2906
4CAD99E20655FA746AFB81EDBB5601F5FD6B1D6832A01D585E2C55053F6A7378
4DAACCAC7608DBDADAAE732D66B3E7F87E79756337C1A961E53A4651BE7C77F4
038B89C87F650C54A2A90EB7F1D525BB353F33318551EE8D84A6A83C718EA5A4
B2AC0F7306B1E095819B87015A90CA3ED739B09061782C28CDB36BA4BD5E5308
5CBB70414E4112193DAC4A1FA30996327230D1E021F3CD8115E12D239D93FFDC
B645910EB29E40D830E7BAF2DB255FD7C4E776557BB38157917D993EAC245837
A3B515147043574157B8342D829C7228CCEA843ABC89D1785A9672A5923FC4CD
2F3FF27E6FCACF84E2D3136CA2C0FD3EF1EE7354CD04C38B5FB874553646ED2D
CEDF7E362EADD04B18051F20A8FB0DE18E152385B9D05F98A3A7EF177824E246
455ABE69E2F700EB78185CCFC07E3B4C6FA301112528D977367D30D0D5D59EDE
FAEB706DDC970A9E296236C725B2B55B09B9C336B8E23CBA5FB8692D56F33B03
16294E5FC7FAA42E96395A57CE51CA8DDD77442F142E2E576B778373FB31C81C
16840BB422CA827E30A81829648BDF1CA36700EA32AD888D097C1FE0A05B2D9F
483AEE40269DF09AF0D1AD3DF80C45DDC59C2A03FBB661C79B87853737C6D352
67626B657321B16198DBD6DB98A092F17878AE4698121E1006E53D6F9B0A3BE2
3FB68828EF854A0CDBAA68B37ABCA6AD4A3D809AAF0BAB1697A81FE59C98C472
1E33CD70A75A22C249DD11D76C2575ED3370A25892A16D2FD569CDA70C130770
93F493C7D47D6F9A5424A7A542BAD726BFC3AB225DCEBBE6AC4BE006F8C7C0EA
051424B08305BF2D951AB2986AAFEA04E078CA79B399585BFF0F1ADCED02E15B
8765EB6BF6A8E4D0901EFF2C3AA104924EAD9637A35D877E0C51A3C37DA78CD4
8643C8CE6DCDDE3F116A6C2390F948E5371BEB5AD2E87B41C5F01FB5C196C436
6E256A88D082E3F46E4EFFBF605B2EFF1E9D9AD5EE4DDC323A137CD9451EDEE0
06F7D82898D71FAF2362C0FCF1F726F97F820305B7CE20728CA08C63575083A7
84BA28B7DE2B916432475510E274C12FFD1660A717F51DACFDF0A102D85224E0
D6DB607BB72569ABB8A7BC6A10354CBBC01732EFE35B72062DF269CB25EA3DE6
DC603B04C90C5912D2C38D7A5ACDCDD3F6F116D884F0D8C528F69D5D47BA20DB
0A9E585C7D8CC3C324FE8A1DF150279F7E8FB43BDB720E624E5E9918032C02CD
8020636AE5C38DA2484B7F4B34163E0D0A561B43B80E97746DC05C871AB620EC
C5D47101ECED4A7E25F291184BEF8B80024AA7BB456C1B83A907652B331DEA34
754226C39C6889EBEEFDAD081E01EF8FE47751987667836FDE4C8BB8A3FD4406
1E643B4EA37BD370734D1A2DB17C2F4B74B4ED75098B433601F75A88C9A37A05
CCB157EF6E32023BFA33973F3E655A4D58289136996FCFA61EEABD70791B6523
1FF5DE71AB8A17038923118A5EED8D59C4C58D246FFA9BB26472346B40C8741F
153D19CAFF20DD2A86C6DB89154A630FB1761929FC3F0448EE2F089C1C953E02
905BA8DE75D101A982A611056C4B237596C10951DD98BAB838B742D3CF7DE718
617DB72E5268583223E37E029D1C8FD3F1D21690151F76B76C52C725CA135CA2
8666553E863CE188BFC9B99AF56AC2DB5BFEBEB12FB563D00244EB89E478657A
98AF2E1223C1ABC25A4500E8119B86EB3C26B8A2F3505A3E5610F89B7C34E278
53FA0A54A7F46D84A35EFEC36AE660A9E3C37EE3864106702DE5AF6C45ABF64B
888A4A51323138CE77DB935576FE6B4824B6942DF80625098CE1B5B32B234F1D
052A9D6039697118A9D793793775D8729D8574A2E74D7109C7B7E23BC5E2E87A
CA8E019203952A4892544E1AD3D4EDD22971611358AB230E9A2ABDF00A288501
A01B67C42B33F6B78C39562DB50F4663B922D9BE0D8A150311AE44B83C1F129F
07337323E9A23211EE58E16043E127C6F9574019179F5635648A011266677B56
B5D0201A4E1470B952A1579B57AB2329CD4C615395023C653F784D36B5EE3672
10D191F29EA508CE84763CA4CE7C2C5229E38E241255A5CABCD6C7CBAED901A2
CA53B5E24111921CDDF83578D33D463D70EDACA0E470D8F592303FB6BFD68B4D
3F3BE2D7C5EC8BBF10C90111A33E205F2649B56E8443F6FAA6C721C66575AE12
D4C40F1F46CF9E9DA675AB5D5840D938780CD9E4AD6736ECBEB6A4397613586F
849B51048AC5F9405E03E14540A5E5582F61CDCDB57EDDF95A8C6705F433EE16
648F098C03DED8A2AD94AE3DE202D629B9422ABB031318D48F2C85F9DBFA17BE
84708AA3B6C9F81F4508F7A5CB7B6646AB8722ECF817877B77D473F577556DAA
2BA0ABACFCF5DEA7498C47328E873019A956FBB250FD9D8885D21D368FA70CBD
2709D2DA44EE7A9869963EAB48789541906DE49FAE785ECE1F18A22C7E7ED204
9768896B78E9EB7A2BD6EEC1B26083940656ECD689D92942CC8AF05CBF82AED0
B45A7DF4DD7AA6526FB597322560B9ED3087A65B5EEF1371C328A021411BFE3B
D9B5088B2F1AAE381FFED52D2D1E02CD0DA78683E3B06171CBE94BE9760005D7
135893D7CC2DB097F6AC664D9594CF1C650F84DA80D2EDE04802DBA33CE3DAFE
EB7A37E8AEFA4FDA6252FF21E8673DD98E67124D5DBC7BACF361E57077B71939
C1D1FB923E4E35C075CD1BCBE0E80DAEA1320D55B43EAB45D9B26C366B278782
7519FDC482D98839BF0DF2E7C3A56A1C1A3FC0E57A75CA414F6536C1FE8EB7A0
4ADFEE3BEDA0F53BE8CF5F64230784A797133E8CD46BCCB3BF38BCE38A73CCE2
9E073ADE792F7128231DDD1F63E6156ADB2609C200837C2E8A2D93D2A7BC9171
050C709A71E44E32B1B03C92EB5CF1D3BAB1C38E027DC4ED9AED633D98CD7486
3F773ACF8AE332631CF2ABE6D606607593FE862ADE31803964E3F4DC3CE3A271
C76BDD95C87CDB3B87BC26FC7A16D567EEC62E6FF0D471B4853DB8A94D4CACF8
843824F818083F10E88D52FC4253E8203292CB40F1414AE7E51DD7347007C342
CD70E8E9F2D2A13D71213B841DDEAAB208AD9EA644591C15DEB084165F9DF24B
B91D3BBEEC2E34E38EF16A0C3F00700A7BDCBBFED2EC0D09601AD6538288DB50
3478B051B5E16B604A0341FE621A58718D960D699D3FAD284310DCF54EB13175
19A75A539EE98E804AEA24689D3540F0F12951A3C01FACCE9A7BAF4D0DAFA946
FF65A4D2A4C39969607272C6886F44E90ABE27CA3A1F12A29D9B32E60E8E34F0
17C5FE43D0E69A99A922D98909B2BBCD145E59A5E7F5426B3988F73B09A525F6
8BD4915663C1301323180E760BE81CB874B020FDA3AE63340E4261E4F3E4949B
CC0966BDC4426190BE9F5D77F76A72AD925662E5FE1CEF9CCAB68F0BD33DA003
F11EB91AC4502FBD6AE48DA0F9D07C35B96B103E379B8A83A05FE728F1716194
1F650F75BEBADB2E3810388F3E2DC7B19F1BA9E32925F2FD9F19F4E8701F3E4E
4069125D7C401144740691E7A460021A47B1E27997FC1DDABEC5BD0EE0B20194
2D579C7D6727AA124083242BDA46D8E116E2751C5F298851A62B60AEBE82A929
9B9F2492BA35690D1EFD16215B8EF14E7A3803B93C28FA41D971B05B6AF3B593
E74AD1E68A5FCE12A86E63B78BFEA87D3949FD164F12277A4688BE96356791CB
8671C49365608F3EDECC109321AF92B4C29CAF073DA3A7D73E913D0D83FAC5EB
BD884D4C686056404DAAAD6F82F94F803FA1FB0DD8908D1DF08FB87A8BB83027
04DE0CBB1C6FEB6B517FBD7CF065120079E608CE41893C2BC96A347826CCDFD5
C69E161217F2127A59F1A6F22037641613F191F22D5B4CDCBCC2EE5615623404
ABA7BE6C5FE475481615B2AC1A2412E54688DD21E44CC9AF5F16E634AFCA389C
4D740B7B51BB141BFAD1080E7C726C1606A28ED492E6BDE9F800EFACD1513909
84E98CEB6A0B7A2A6F3E1D1DCC3B2552795E0932673E59ECC56DDD37A1D52BA6
C3F0E905978AB568941A163F4CE3AAB5C5B16F86016EC47BA6F3F7AAAA77C3B6
09C8C3ABDB6D514A76ECD37C37AA88B5860630B3406B494F7725975596F84777
D9CF48686EC9C5DBCC1D78513F591C7C10AB9D153B3D41426B7BF668B0D04503
56BCB686258462C1DC61095724B9F3312316262FD7C1AEC6E54DE7E5A7BD8EFF
035299B8FD8A4A7B0F51404F4A760F4D8B4C0FB7A32FA4B2383AB6E9C78FDEDB
FE6A5788D38A6701B123630C2A6D820A684166FBBC83DB17069494FBD411B333
CB37E2491C5BD035A33867A6D3A3D420CC31ACF43AA07182CAAE67E40EC63663
B678F71D4C6E0EC3A0AAF904CD3AA66E0DE5E3CDE049E94249B39A1C06E3CE9A
F974B2484BB2CDA14282B9511E505B3C89F9C802218AE40D1A7541335C5736DD
CD565D4B9F4CC78F3A393737EDB4FBD0DA299E21CCFEBA5478EEF013F0552A8B
0BB11FF46CCDB784E8BDCF730A16363E66572049E42C695886EAB42A9AD9094C
B635DF4B5B9BD9B9AE8455DFA3EEFC77653190F9A8B1E93B7281C2A21EA7DDA9
33484745BDF7E3DD63C7AC66C286C9A5A698A5E4D7A91710B7FF943FB23609B6
4B442F83CB795788FAB5E9CF3F75D5487DA26170E4561C7941C910B088C3B86D
F844B0F340CF82786A3FCF347048463EBD2006281A816627065DDA6CD4D3AC5E
2024BC96C7D896381BBB567951E7A1F29D4E95351298B000D29E5F3D0448CB5A
CFDAE1BADE9403B90371C3A07D208948AFA022A69C519434B6813086ADF518D5
88E0B92072A44BA1B3EBB630A13B7AB90992E85B6D67361C8D96F3E0D826FF37
17B67E4B1EB7BADFD98D7F4FD17BECE740ADF13C141EBF0A91CB105DABB32FE0
55086D56A0D358841D15FD349E6B95512E4EDF4C430216FF85C2ABE995E4B40A
A6044CC8820AD885C07E052B3F91C2E9A1D163BFFD210F7BE95B923E2500DB50
2075106DB541C267BD450B25B670CE80BCD068D4DBFF2D82634175B61FBD3BC3
406131F44C7D6F18D375D1F2270829DDF29DC14DBB58A30AC193245D18DE91F8
AB88AB548D8138605BB5A50073295534E314366E26665AE70482B890E4101D6B
60E4F3B37ABCA1346DAAE8FDB8DD9C832EFF3E73BA470E2BACE7B8515CB43388
C27AF99FF9322175CF8D4947E6B3846AFF5163E972156847F58A66660EC8A3A6
5FB47C9F637B4CBB4C73B6A080B0CF6FD1E9665E92032540570FFCC747C67C50
822811AADC404BC7ECD1673E8AA6C3A2F1D82F39430B58C29145E2F1B679C46E
94EDC711883F1E4EA84117A54757E8895A40401A26E1437B39A2F65CAADD6E02
D71FA8AF7453668DC613F326A3344F74AD7AC67569AF399385500ABDA5EDD3BA
343CC5EDD4B558467626850E752B9959FEF1454E53E7A3DCBC2255AD8F6AB4FE
894455118A61C58840CB68A925ACCAD75CEACE863D806916228F0614191A1CD5
DC9BAE256018615AA3725834519449B0A88B4F396654E74099C007930ADB1327
DD119BF799FE3B0B223E1EDA04FE2DA7A1C879143E1C33B6C6344F4BA033AD6F
8E88C33DEF1977796B454BAB2494C930F492A518E8198C708A75FFEF8C49C324
A718AB59B889DED521229E741FFE53F98EBE88B0405AD523254FD3FA4BBE96DA
DA1C27C1C979A0DD4E61C3B1F4C4DE01E42F1C4435EECFC02D97994BC8AF5270
E7CB1458D76ED0229C5FFB4A23B8716018F9050970895D51722CDE8F2EA3D947
DFF374D84915D5C5D16463A6FFCD079D1ED416C4347BF831FF0C4ADFB61295DC
4D5785BB0852BF472CFC97EC174491CAF961AB90629F055E75DAA6D9898E8653
5BCF379816CAE46FEA62E7BE8E9B953466E51828172C4DBD0E1BBAD1CE28B5B1
02B3E36403BE80B49A47446A6677FCED438F01D60EB10F478C89528FA337D0D8
88D3FC123C076507ACDAF783A9A6E24ED73BF24B6E0F11C13E532DE5F70B15A0
657F5ED27D204449A841ED19E01432CFFE928E921321113780D036D34F2797DE
D4459CFD15BB117B5C9745EF3CD2B296D91FAD48C80B136D94476967E255F808
AD2B5D522ADEC64176833756510391815A1D4A8DA1D0AEE7CAD36A1D161889F2
3347D5B6BC503300FDDD48F594F391D5FB42C42113C538E707C16EE24A3F375E
7C506E8F49CE50FF9DEF3B4A4C1BEB3848EAA3477349833BA22D2A9012287D8B
A8C4CB4307A1188ACC0E6E9338E1559BE5FAFF381BD82A6C71C267409468B3C0
2C1A29F4281D565836EAE57F680490FEA4A952FF64C8CD11C377C294DCD1EC25
CEFB2B6DCE959D0208F85B6E32E9B44FD455F9B134A5306D95EA29F37BB8B86D
9E592159338E1293F449380E13C21AE42E624AF013D70494D96E0CEC7E694D0D
846AD612748FF35B07E25B8C62CE26D5FAB880E7F11D01974534E1D5E3EFA3F9
34FA137E98D0607A91673A3DF6295DB262C4B8B708CE7D844B585C5B531336D4
C38472D92E5A9C9914CC810BF0C92AD4AF90BBDBA18772AEE279088AD69F2F9B
661F777617AB04AE697BE375BB78C14153A1E6AE7465246DCF3902EAB323C070
06B8F83688EAE89DEA676ACE1307634CDCFBC5FA6356C4C9AE86B1C1BF72B2C7
23E18B68793B19E5AFA5B59AB5D1A97A4575C9A90BE1296EB5029331C7CC7FC3
8C9A6768F29D2ADD237DFE138A6051B4F712F2779F8ABC9DEEDCCD20D26D7093
9A1740027B868082E1ED15ADB23CD0B6067695E018B724842F0A082B27F32188
298D8C6EB525C4E5D59E7B52EA123AFA185F2A12E74835F5C51CB15396A2CA32
88E2AEA043EBD4A5417DFCA7BAD4ABC4318E6D374AD444D06222E61D3F61FDD1
71B127AF2D8FEFC29FE8E0BF27E667AE8C1E462AB6F84E52611AA38C9722E603
8F7E9D1CB71C2A82F5D0604B0A8ED5FCFC3ADAA611172CE20A20ADECB86DEA4D
40CB999BCDBA99BD0724A72FCA917E17D18EF408DE98EE6E536B7181371523C2
C082484C8E57AF4C1056428F80BFA25F600EC81C2013D05A810B24B07D41F264
E36D299AB6F73347D1A9CAD068AE7A0C22CC34873CF0C9B34588D32C0FCDAD76
00CBF460F8B7104EF6CD714A9C95BB06B2B755FEDF41D624EDE46B85A691BFB5
885EEE2B8A8259C9BE06D63E6DDA22C0ACE09036133624282B3C72DB239F1E51
7B727E07EC84E40FD420872C61B7C048D4B14DF3F6BA11F35111CCC6E793CB44
364FBF5C557F12433157ABB6BA275111F3D527397E7BFC9545862CF8EC395A7C
C6C9FD53560482A608600913EFCE5A0F7020979A14F7B4E4891357FFDFEF7E96
59F5EAA16DB36EF4D20C25D90A91F9DB76F84E6E75AACF6E49FBFD664BD3D05E
6779DE47D872A59F8F025833593355C7B35D68EB74D57CA505BAC71AE2637134
17E1AE7EC8D9432B9850698272A1CA19F45F1C66F8C79A3F645977311C620F8B
15F6FE55D81E6F28E19B9DA7049A504DC9A0E716CF8987A90EE213566998A0F5
DC058067CBFEF94E39BA459EB64DC6524AAB3609922B53D136481D79A6A3B7BA
8959876569E49087606D7AB7507BECD290649E03EF75688976F522FEA9615325
82B5E7A659137FD0867D655A957E5897D2E21458766379F55F2C4599CCB14280
CE0181DBB555F5740855AC348F890FBDAEF6E82B94D81A648046A4AB4480B1C4
A874954361E8DC3016DCB35794E22D49D1F59AE4821169D0E9B8CB7F42A88934
56DEC335CD1DA5FA24BB1AE31E72040472988E57CA8F6C73EC209CFB920FB83A
818808D0724A05E01FBAAB7841F92986C322388280141405605FADEC5D49A730
01733489C6D7B3BCCC55E05C3192319B388DD0EEE4E918D3903D7780AEFC5AF2
1B4BDD25735590FF587062565C0D24A8B97DB34F6A347A056C1B4A77FB5ECE9F
561763BCE3FA81170EBA2FA196F80801C400F3815424A2BBD453916A2B8812DB
14A4FAB5FC1E809D76219F1630E6342E8DFCB6D3F81A59678FB9253936B99F44
2F08443B892EE2409EC1D80972BB01C74370A1B2F179B17C8F151E6707A1188A
C3B13F80E9E104A631E5CDEE8C85D889F0DC5FAB8043BAD04E0F39DC5E78DCD0
B6D58BCD5B9BB83F7175C0A8CFA61FB9ECB0299100DCBDB82C4595742E
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMMI12
%!PS-AdobeFont-1.0: CMMI12 003.002
%%Title: CMMI12
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI12.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMMI12 known{/CMMI12 findfont dup/UniqueID known{dup
/UniqueID get 5087386 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI12 def
/FontBBox {-31 -250 1026 750 }readonly def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI12.) readonly def
/FullName (CMMI12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 21 /lambda put
dup 26 /rho put
dup 28 /tau put
dup 32 /psi put
dup 33 /omega put
dup 58 /period put
dup 59 /comma put
dup 65 /A put
dup 68 /D put
dup 73 /I put
dup 85 /U put
dup 100 /d put
dup 101 /e put
dup 116 /t put
dup 120 /x put
dup 121 /y put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFBFE3573BF464E2BE
882A715BE109B49A15C32F62CF5C10257E5EA12C24F72137EB63297C28625AC3
2274038691582D6D75FE8F895A0813982793297E49CC9B54053BA2ABD429156A
7FFCD7B19DAA44E2107720921B74185AE507AC33141819511A6AC20BC20FB541
0B5AAEC5743673E9E39C1976D5E6EB4E4D8E2B31BEA302E5AF1B2FBCEC6D9E69
987970648B9276232093695D55A806D87648B1749CB537E78BB08AA83A5001F7
609CD1D17FFA1043EB3807AF0B596AF38C91A9675E2A53196FEF45849C95F7DC
182A5EC0EC4435A8A4B6E1CDBF9A5AF457564EA72BF85228EB6FD244F2511F5A
CA9B71A65D53CC06EF5F7EC3A85106139A4D312378BC22183C09A229577B793A
1B7422611C03E84BF809F46C62CE52D3AE29CE01C32B202ACDAA5B72733EB0AE
C31D7EF7BA88D2D14F85313F7A8B9B7A5B124B03AB923744D336C969E5CE304D
3AD977A46664479EDEFB69F113024E761C05FA48A54072DF9E12C2F352ACB3E6
D04F6EEFFDE209E7FA3DA22E5B1D1409461F4286B7F4F8251B44E5CB7805762E
E129FF4A06A7458F3191926B1CAF70E32C6571AD2DC07C34FF62840896F4D200
761B1A7FA356526D1E3AB4C542AF13623BAEB9F61B1BEEF79A9205B1FEFDAE24
8799D516A9ACC30BC0139C63C9A0523E9D5439213B67D490C96F902958779B8F
68BD8E9FDDCE8A3A2E35877DB6C94B7612382ED8F218EB1157D2ADD090A2448D
10B99FBC9211C5629ED1C61C74FE93041E5AA03EA4AC3FFDA00C2B6E719CFAA4
262FE17F66804A6B54D3669836EE4367D2A2991580C5564463C973CA0DA38AC6
922716E13B4A807B50304B8826CEFEAA47C305FC07EB2AF25FA7945797237B16
56CDE17AB0834F5C97E0CC5741B061C6FF3A8DD1A79B9A173B66A6A750538E26
32FBC92E75BA15CFFE22A7302F47908547007402569158F62C29BA2956534FEA
7DACF1E507AC309DAE8C325F2A6023D2FBD81EF42146BFCE6A16A6310A650460
7B07BB7647C8760FADDF0DBBCD3DA6CC4645D1732DB3A22D8B76E1D2D48E4D4A
46F4BEB80CE65F3517283A1AE08391FD1C10ED452133706BC6725AABC80107FD
754A8BA47B0281D479F052CE26A723EFFACB79B213041A536542AB334769A2BF
88505D82C498ABDD5A73EB539530F47CAC52825D16A969C8BB56D4A7F2830B8F
CB63B92B576E7BD922A4B25E634751F8A3B7C4EBAFCB373EDC8B8281B1D1371A
7844E9AD990CFF09F0D7ED73A5CF873D2D5C9E8A9923CFA31E1A4B4CCCC40760
8B3AC8FC3C88BC08BD7407725281BB879A1A822D94997826418F1B89D303F2C0
BE7A0102E6F529630CBF1BC5BF3E4578C164A3DDE45E62A957EF3FB7F0FBBA6B
CA1E79A1ED195B6A11CFB345B663C5E72FA55D80476F604F6C4257B51686AE25
8F7D159FE605DDA0AC74BAA5034F29FFFD403070013C6E2D8EF6A0990D91173B
D5A3AEB98B64E412991505C3CB7C2CDE13C091FEB3DFBCAF30C4C19511102300
135BD5D444BB55692013F52056908DFAB2ABFACE81A58423ACEC59344CEF7D4A
C5A3EFFFFF70759BC3E593D878281225060B97D1BEE6B26EED90571FEAFA1812
1115C0EEC892F5DE6FDD68321A0B3F10A2D771B79BD85476AF6018472A499A86
07D64CFF4550866AFE590C471C80EB12CB3A989A60BC7BED39097C12D9286E39
14C7952C4C64820B4DE44A1827B7B0B535244E93FDB80036D6332F90F95B472D
7031E7E3819E881BD0313CFA112EB3AAE943C99C47635CCA7E34DC0306C04E5D
2E9F60FF037EB11602BE74E8E6B711392E866E3E55D988F7C856417A2B9C186D
639819B4786D039B77F8578EF63C088FF28BD08D8353031445C8498A8F445BC3
D08923D32AC04BF3CAFEFCCC1E77EA894F4E846F47EF62D6841B8D8576FEAE8F
90044626869D04D61D64D56E8C51AF8C18D6CC3FEF3B6C4F7D56FE3260354948
10104F69B117FB8269292579A7D52FED688C663B643D8D99F13956612271073E
1A337AED059B7A93819A28CDF01569CBEB51069D22ADAE25C47355560F402B2E
8C9900DA82B79C64497C8494F42FABE5AC41791C2010D98FB7E593C744F250DC
D837DB0EAA4F75D0016970F3AE8359878A08CF9A697A06C5EA945819151265B9
1A12122B98F79185DF852257BB4798E7DC03712EA6ED34F6E6AE1476788DBC33
9229FADB8D581BE1A63F596698DBD6DB98A092F67197A4FD4A50B648F2691875
EE2495D6BB310078F516785A0CEC7EB6E8305FDBAEB1D15690409FE32DD9CFAE
DBD3866FB63EBCAAB73E3E4BE5D7F3AA44793938AAF3F8341683F0790F1D46A3
60CE083F9BEDDA22E0639A92393960F86602216FA51E2754BC2F4CD0BDECE3D8
FFAB7E0E49613DD4956C9A10AEA798BDA1F756C755BEC12147ADECAB0FB73B7D
203A11D84DD2AB5AA98FD38C1C2573570FD49A4924A94A106D2A7D850E793608
FB135853E8C4204441CDBE697FD0CB330B1C3596F32D2BCBF263237EAB362D09
DA6F531B40384DC91F30674760CA7B64BA1968F6A7FC9EBEF431A1AFC5E76D7F
2D44DCB7F61C7F6B16196B3E8B47343F572DBA8B8B21B43E35BB6B2DD5C7982D
244FD4304D254D6CCB5E8CF70E77F50812F41A988EEB3B26BF0F6F69BBA18077
31134B5A5823D10FEF6201D045AEE7A24E0F25376E9FC66340C56C05F6CD810B
724D85CC4BB8D789834A447CBBA159565D08BA5793D8599035BB5063271518E8
F6C50E7DCE71B1D186270DDC860C6DC0CD506010EB5B1FDF6BE47A9A18CC15D7
D657E58BED9EECAD5CE5D49F63139A39BC52C6584BB2C3264D51BD584B40F8EA
AFCD8B83F548594386EB2B05CE803105E84931DC6E7A1398073D48E130E0D907
CD0F1ECC3254EDF5D4DDBF44415DC9BA66C673820CDB0FDF033D59BE2B5EFCEF
01FF9D33EDC88F8D522E07F1689D024DBCD09A16A63519E1764C8630FF36058D
CFC07027E0ECDA01E0E85B166C613B22F587B4D355EB018BA93E92A36007B4DA
287FF5A91F7D8A0EDF5554ACCF45AC8066E88865C5692E63EB99CAC81367B605
8E6C19EB98EBFE0D2D161B447B9A70CDD1122C7B78A413369016E6D8481E2AE9
9AA97B5DD0ACC9B0820F7742CEB2F46F89F3E2092621969A88DC0156B4F941A1
6BF1546D4B136657C47B082A8A35FE96016BAF3D9679B8C32EDDD6AE6DF3BFB5
7854074FA019707FC22BFA82299E72ADF9A980AE29A8E2434277E58B01F6B03C
192E1E25DADD49F6E3F69799AE62B56E00B60A031BF8721DB8B2CB6D4A4C15CA
AB1FDE010AB7DC0DDED977389B101B8E53A949222FAA126656E02817DD32B0D4
A49516CEC2B97EA7C78FD66229B044EB92F502384BCC6CCDFFF995EABE3BB7A9
50D5D1AED861E7D3BA8D333026C673C5762712E763E59261426044583D789C67
A606B96F97663F92BF104CE02FBFDFC521EC0D6670B7D4F85A229F51426DE912
3B729C4A535FB7C88D0A5E78074751B58885DD6BDD2DD9E9C83F105E8CF63DDF
CA7DB39D0319CA7CC2E73F42747F007574DE25AE1538B4D493D22D0D5F0F80C6
5F6FA3937C8391DE2F0116F81DB2DB0EF751EC838A7F85F163A6F48804E84B96
8D715EF25B7E2A5CAECC558D80F421052A1D698F3B8452AC27E30A4E6226E3CE
084C8A83ADA0818A110923CF7AC7AD4CB92AE4ABBE0A9EC1FF935FD02774C1F7
92A278E513012AD17722A23C55EF82E18F8847B5CCE47F4FE3EC508BA563F7B2
AE56C94285A18DED4D432FB0CEFC05A20BC17DDF9FF919C724810A8ED7358A27
97EC93C1A13C443A91947FE1F6F528EA7B628917FA7E554A1D7B31ED46C5ABCF
92BA57961C8876DB4041305EBB029B03D8351D5E2819FF87E97ED214D8F1CEF5
7F7668DDE223721C0B810F4A4AC81CA4EAC86EAE546E1B15D91E626FB9A31824
5BFF17C4E79FD56ADBF6DBF01BAF6453A81EBDCB38A5FC0FD0FF0646B3B0D199
13E2E59A1B5CAB6DE5329BE389BA0E2A2AB55CA40B711ED746C24F1E48892E76
6DACF7DA163CDC90CF076763008E7A899870CDED5A80758E6177BE6B93B07EB1
5800A3BF7B9AAC3FA825CE594EF5B7546B181375FA8F37608DF17856D2F8EBD5
6030A9E6F6BEAF224AD2AEF76D03B023E2FCB922CB8E3C6816AABB61FE6E4F83
F21B4935102C860ECA03DBEFCA461F0E5B93E5A8D18440BCF7D1D6252A24CB6E
A64FDAC8B67C4888519AA368D9C4A8C08C7155DF5BACD75C5196C571C3C456C4
7CE8D90215FA6EE8CDD72C48740F7F5930EC3632DB63A9C8D2DA125088C0F05A
9FC83D16B7F53163F4EB6FF372C6C3115F1E68EB35967D11126EDEDF0BF80817
E68A698183B3EB0A207DB43786E1B9D289359D75AD5E465328CAA90E712C2962
AE2A466173F2FF30EB535A6054BB0B875DC8552C16B49DF17CF84D98D35497BD
F55E273FCBB0C735899529A69990E09149FBD2DDE64B7FA8D50AE83925DF03C8
0B63EA158FBABB12A028803DA4B9DD6C48C0FEC469C4E730729F4BB420D5B003
1918B4AE9CF35CFD31E8E62A44C0484E3D00143BF1D330235E821E5CFEAB4D31
7CB4604DB1F310457FCF9075A3527279644D908DE847CCD00B6F50DBDEF91D3E
38238CAF550FDCABA2C3A46237218DCC5A09AFAF69997E1EBDA7EFE6FC99ECC8
5D4AFD5EE35FE2346BE79B499EC8EC436868154A947D13BC02C780EBA4B9E64F
3026F1BF5DC1F8D64FEA1281EA40B4BC355638A3A59BD9055BCBB232FA45EA0B
B405131B64F105814019BC55466EE78E9E9ABB62DB30EA452F7EFD7196C76A85
15B2CFCD89922CADC0F392B0C54A231F3999AEFB53C24EB0C63B0C8A1A1ABB6B
AAB2F93E5ECC7AB90EADA320E918106BAAFC1F8C425C617639984629018BA674
6FF4F338AC43E23BC3740542911C058D43A49A11CB3A0CC8E3088BB5BA6048D6
CC2AD250DE956BFBE83BB24C945C20D9C22E7105983F284EF478F9B68BFB0322
EEB7D62802CBAAEFF1C2332159DCC7243EA40CE15C734EA905E04C476B178B82
A08ABCB0B86A7330C75E62EE7844C9E22DDB013ADDF20AFE08122EE1B930A81D
806A0F8CC584CB7FF5F56F9B35E5FF78FD93E7E4A40C64537464EAA275FE88F4
461FC6A467C8A69B9A9FBC10D44AC1B753D313A8E7D97F5FAEB60F82855658D1
4DCEE043C8FCDFD8A29DD091F3BA55874A458B2B8989F35055C72FC411382361
9AADC717E602B48D7C9521D3971A6F7EB19D539445DDE9EFBC5B58FA9E5E426C
172C45CDA24985FC4632287FC3B15849DEB56F5A061993AB10A6BC59868534E6
69888175053108B77E4978D971B4EC57224C0F93EEA4C15AE92254140A94704E
ED5666FC06C5341F643F779CC88A9E81891565C63B6F7F6286E664F4E0A48690
356DC96F1B98026C563700772485B83BFA06435D4E0793EF822F423C93FBACA0
E5D889D2B76771C6F0EE997A5DB43C2F6921132890406E3C33F6F159B14C5D78
7C151BDFFDD02B697315F191B5490073EB418A4FF2A398C68D44F0CD1B87CF9C
B52F12728B72F94D752D23151196A256908135C87991E508B8906CE2539DCA8A
31F86809C8C6C18A09F6129BD7CDC6B37E76B648788056851F22BD3E3B5772FF
EC01D822B57FFDB3BAE624F05531292641FD6A7E3666152D18F6C653048DD7D7
98A942C840C4A0FA662F260B21C64214152BB86F03662A330109C5AC0A5EBA30
C6201F558858130703DF76AF4FBBEE069BDE45C0D9467077D85FFED4F9BA9C61
AED87D67CDCA453A6528AC5BA153E1039D9CCC556CEA5CBB542265FF54A1B208
E0E13740E7E7C26AA00AEE909F8F3ADC2726081A744D8EF6BB711BF5F611A900
76F91C26A338DA13A7160A9F42410CCEB3190000D963D036FDA05A29F598EF40
8FAE6F8E7E6F50C99C3304A573501C13A00023085F057DF331E3354CBE65D573
CAE73BF15B3B96B502E0AAF2B4A86237E98A997AAEFFF4227D5A26E8972C48E7
761F430733E6EF8AB2D903C17FAFBFA21C25F8A0AC157D397BF3CC1AE7598F0A
2BE4FB46B29443CE57F41FD5F91122E9D86F903E94D5B55E2BB95949C156D138
89883BEFD634311F9280C7F028DCA6408D3A682DF5B55B9F7ABF08F019190F60
D39E4F0E80F0594235B09A5320109638B938633A2C196E4ED2B43DCD8643C3CF
C6123B076B7F73352F906D96FDE0FBF50CCCA432712C574D5857838BAC30B485
D25024EB254A7EFE57D1DF0892C275CDB3DF77602F0FED0FAEBC644BCACA04B8
B424DB125E487794CAB36E01B5E1A26F5E1E97A739AA36D77A12F5B45338EB39
AF36CEBDED55DCBFCF497FD475FC6BAB5530AD6153C6BD982564EE8712185F1F
D5EA7ADF4104661168A01994C1FD773A50C8AD6A3E4D332E4D59521BB8BBC6C3
866EB4AC3EA4532477E6CBF6BBF0860031C3B916AA25E3492670EA67F55CF4FD
207C684A0DDB6F4AD21B2909CBA71BCE2E762012B0927BA72367A6AE0AF87F73
756C9BC85E4EDE35317E2CCCD138C02C7A8013AFDC1A48C3A4BB8EF257BDEEA7
60E012F54D12D31D18DC59D5E526F12567B8688B4B67E16B56713870300016BD
A3B9DA87FDC865246AF8E94316799110D86B1DDADB8A673402D4226C519C058A
1D1E5A5778584FC28AF12819B1924060BC4F54B1054EA6AB0149E04B8C4302D4
A56D8A347EB5D3D2A0E12CF7E35059BDB53D9FF6BD25F6D9619BC4669CFC1048
C6C9978B8751B840F27D82A69075832BE59F55C1737CBB1220FB8FF691FDBDF3
03BD7D225A9372AC221C38245E48320E1CCF898D9EEDD678E5B8C65B7F588321
1A3953EEB9B39EA9A8CB72DB08C3E9234DFFF5FDF9DF804C021D57E97DA7622B
97F4CB6E0EB640E0DC9EA15C5193F92A3A7565F4C7A4C9CC327F7CD2C44900AE
D9E76FFE62FC37FA376E77131B566AE67C3E09DA80F198BBB995EE8FA47EEDB8
4B467C6C7DB8AEA745CF8C56B8BE56534E9C56FCB2B7006426DFE93D728FA4CF
94F131C549814E54ECE7C914C5FE8E4961D3437CE7475D03534B62650F551D97
201C794AA877445DBEB11C85ADF6119B05360700F8CEDE4766E3A1D7A35CDDC7
9ABF7C619E3868A39D1852DBE1EEAF5D7898C78323873AC005542B68C43C5000
CC58F675EB595F87C879694751494676465891E8A897158B481F11A171CCBBD7
29603F00210CFD7FF31FE3D273933ECC34AFBCC4108D9B76D9ECE63EA06CF939
4799092A54A749DACB82C1424E9879672C8BC084C360014C9C1B6D5D65C68AED
66CE329C3AD712C0A36BE7EF03FDF339CAA2E0336D387A693B1DFAB5D5164E31
14755A158168962C9B399F8F1DF3FF5060D7464D5071058C30C572A2BC7DEE53
84BD7614A4BEC4C84E18CF7EC81C811724463BD46CECA5FB57B0F55EAE20CC74
6AD815D1897B037C197D2456797B992C20C70B663BF99FE28C513B4E221C8E12
49779F8C0AE8517048ADDF7CDF0D698E3EFE60071C4997B7F5EF12B6CB65390C
224F13FBB99FFC034C0710F05019899689B6D3350BBA65C7CE7C2AB03D81B9A5
5F3D65E4D462DAB189006669F7390A78A1B8908A4C913B15DB8827DFF15BB9A4
A6037DDB643103B937257A7DAB025F09D53FBBC2BCB6B0BCD8D56B2B2784E498
1F6CF8470DCC892AD0CFE11578718948BABF9C142709013933E3B325C8685C61
048660562D70CC0055BA8777786CCD161049903DF61A5AF6DBFB02668AC5DE57
3D52C3FA13DBD74DE4AB848DDC5DF11DA16E7AE728A1B19B8832EFAAAD7263D8
DD78BB34C58DC2439747CC82B1937B920E8500DEF5293C01896B10A6DA71A168
4F6DE6DDB7E2910A0D9226ABDCDA689F20A867450D5C57181D23CE3779136295
0FB6833E98F45B76D98F7F115A67578C90CE30A316B3A041849901838D0A12D4
7F8BCF5CC5768C0AB33CE1B23EBD4E3C802D8BEA7EEBE241E7C7DA1E4135D3DB
AB5C51E5FFC0F527C5B59A59FE5C3360A0C3CD978DEC483D4DCDDD173894CAB7
0B73187E5BB9C5480BFC02FC45F2B1240C294133F7627AEFC03823146D0735CA
D73632F8EE970DC0EBA43D2C700A1D5DFBD179A2BF9BA6CB5818D72CDD90E52D
FACB64955479363CDDBF4C141FCFE9A9A2D73D1AD3D3FB7699F4A04B5B078DBE
76729D694396683D4125C68AB8F0DEBA88B876C71B13A737A00B245A1571E9CB
B63FB2EBF35B5F89C36AC725601404210A9C215E32796795986C129E58F278AF
879D60E7740297C69A87F38B819021DA5383822E8082CC0FC218DB80B701C533
69EF2AEF192771AE178DCA3133DBF682F6B0F87163888A053067C9521405F653
8F88EDDBC340047733AB3AB0D27866E2FEDF5240166D84A2C48EBA62A63C347D
512DAD1E9A7B3E06EFF0FE425138A90484712D9F38D9366BC725B20BC0CE5C72
512D196F8D1BC0B3FC12DA2D13F4B9ADE7CC6A62999A6D5E428B4FA636A6A315
2DEA4674B8BAF5FC2764F52DC679F76F34D2D9CFC9F2114183424B825144FC87
98D2B6E2B78A17B802EF4CAD1ADFA51D128DC642E7DAA9AC41ADC2B0DC8D5E8B
5C9AA012A9D01E04A412631402BCB7953E285FD626E103E503DF00AE4AA5B339
C187F52630B52309834F266D71DAB92F8F73013AD9CCB7B29C953456EBCF09E5
63800CFB03C0423997AA40E8FDF374779AF2363367FCD8D00B221266D552DC69
1C78E23E6FDABD6C8150FB4EA5614E3C5F230481E4243552F11D567689D0A96C
82AD0DD16D94EE5537FD244DF8D6AD68ECC29592EEF335B0B820176667500E58
782156ED77373459669913DBBF8C5871C78DAAED58E7D84095FA260EA13D49E3
35F378DCBC7DA169D8A9CD4C32816A189FC1FBF3E7B9A621CFB33D7C6D034EB8
530AA184CA8A5E111CC81E815707D016DF2EFB584ADF8F82E270D23A90373BDB
309E79BF38C72A3F14BDF4E46B0E95C35B6057FF41A74D1489DFD974588112D4
CB630389A4F601F285A0FEAF88BE6DC191A3FB5ADEF3FD6B2286FC177241A3FA
EB418BF5FC0965BF7B274782C8D608698A04F707570758CE347F60D3830085F5
B2B4D380F11A63AB690A11BE0C3F9CF0F3B9E559727DD5308332B7A223F628FC
BF0126FC145DF78DF99D9FDD85AEFAAE39BA88935FD90668FF86A9BE37F550F0
87451064170705F1D0D336C9BDF01077572B7FB2D4365582E4B187B6B9CC3C59
B6020B097082E735F99D999163C041623C3C7D496134B5039D27EB69001E2426
1089F5EC2E397F3C78A763B6F500FD4CC204D2E5B73AD604693ACF3C0F88E785
F6818881CF22384284CEDB8F2C33B0CD8E781EB59569E3D0D54D8EFAE0F3EDE2
6279776AB957BFD0B62B8429F77FB1EA332C7A1CA8B004C73187046C11263A0B
11C7D838FB6135F9BF8DCCC03323F95FC872530C0B2473F20BF05A0E8F35F212
960EB14B505EFF50D3FED593E731A4CA4008BAEFC44D1196FE34864690A5BF71
4549FB4531FE94C0BBA8F082FF7D860FF5A7239B9C06625138DEE7F4A70B311D
C0A2D8A3FD404F398D43CE51FFF298ABD660D2E68DDA91D3A4B146B03D90F392
EA03E3F3BBAE3404AF40A5B6F29337C801774CF4E8875896B5B20819678CF793
348E8CA988354FEF664F76CE5D61F852FD8D758F765CC69CFFAF7E5250B2C55C
E457C2A32D60C927327D5EEF1FA1CCA117FDBA455DB56EC612F02FAA8471C96D
FFD8508735AA629F1CEB69949E954ADE98B28D52E357D7898676DF7420734933
65570F2F58F10A106D04A99147E6DD05281AF99D6EC944381E44FE5E57C1F81B
D84AD562E09521DA2C5AEF3DC556FE5EC6068FDED4C31F8C26B5F078FA5BB8D6
C978DC702A72D4092B1FC42BF9ACA9DBBF7F45826EDB9C969347AFA0663CE368
48755C10F5578EF8B031052C771B667CAE16729CDAA60C5AB86B692CA2768424
9A7F09D610A5AED17FC75AC07FD88E36E2D924B0D0272FEEE8A0C9F83D08A5DE
01485E2E5F3BAC4299046A039AD2AF4592ED43B32BB043CE440632B6111C3501
6C862A9069147C5B57A2C09F51406583877243089295A2108EEA1D13254FF385
4571616FDD3A74B3B8B751973349818911782F820607D39990AB5A839CE41574
D928F4E87A8E6AFB341FF68F45E5678A619200CD2E394F4D745CBC4626DFE416
F46AA8B2C1E39C4072D59192761FED6B04D8B0888F839664085FF7F2C9F62BDD
BD30DD05713BAC58EADA1D290708A822E1CA628EC45082B692EF40306E0210FC
DD9A9A2EBBFB6C95FC133116F87EF611DE70E79E77B96F2EA371A5887F5B650B
1F9107F573094B5C5A99EC440051126F1FCC64A2D37AC28740B294E0004762E8
649323F0A9C445BC18B8D5A1A0B28229EB307080EF8E0316A8AD84519EA133B5
417F65C51DA43F8EB7E880F0C34344E92A59C00E17114EB449ACDD92BB0DE381
3C28F120A724B35AD8F399D91EABAF6985617F40803EAE58560BF5A7AEA515CC
3A11C75A1DC0EC53F32C110A2D07824D8B5E59FBE48737A21532034F993FDDC1
F71ADA3FDD13B33F763115DBF917FAA679D3E09DD6B46F783A56097E55AACD76
8C0B841E67824B42D689B020B11D383119B49EF4D7D5205722D89E324AE2C4FC
7C1D94A24AD740F8515AAA2E01CE9ADE315BF1226EA670CD653142F8DE5A36B0
59351D45E83032F55CCFF884F0996FA5E10FB18017C0DCF00E50E972F56B3622
88FE904F13BCA543F5FFA0726BD1A021520B787E3781A541D4981B40715019A9
6B013A4FD421304013DF34F1B138123B620B0E512B107B4341895F4F6A835BAB
4C78F66C451E08A8690D689BAD19E42D29A655C8895F45AD8ABE7F0E70410432
70F4A7635921AA83F41C2363B25504CD845BBD4EC75D6DF3CEA0E5C976136968
4F01BAAFBADEEABD0244C4D93E82A78A38DF0B006FCDE4D2642112F727A44E59
945FD3ADC0C170FBB4FA98E0A3C168403904FD3D45275C48037C55C8E3423687
37CA8BC74B747717440FFCB4C0180075AD6B448A3E4ABE155AFBE89E67734ECD
3CDD2CB40AF0DD2506F8BE045DA395D254C1AEFCA73967D1FEC85AC9698B3D2B
9A5ACC280F484B9BEA73E52B9EF2127E0D68EEDD9F00F79DA5A61ECF145CCC77
EC3901E859CA4C5A1828963EA161678D5C2616E9C71FF3CBB9F17D4412FF0DB0
D4F4D4357B63A2DBFA2BB2DA74704E7E2DCC1CAB7737FA8CA130DD694B913A62
039C06CAF3DD860FB6B58430AB6D72921462A6A574FC6B13D7E415A944FDBD44
52CC73BF7E5D042D0C9EBD9108BABE9685E0A9262397677E6F523E09BBDC5AC3
D68BDEFA626072CCC7234E07A7FA8904F488638C6BE61B1E8C50E5CEC13BF432
6AD3409C62F356DD92B0AB0F8F1611E13CA733F1709BF6B27922EE4277D0621C
5FE49B54FF391607CADE0FF82A43D64F463DCB6AA31F2C1E7C7F0E8AF2D70972
4598AE18030721096A13F7EEFAA5712767A4A72989B9216AEF5F0743B6B7C2AD
5478F76B5F16DC3395166ECC28C43269D594DA826E66CE6A0C37E97A27D5E1EC
43F4B8FAD407B86F23FB9496B2CE28EEBA7F4B7F92838D340333AD737F5B9DB8
B66D8C0050343DE09AFEFE4A6FF7B4407FDA641E54729D411563F47DD7686E59
FB9F0158E7353580C04453B31418226F8B7814D0B36664A56E1403E8EB68B400
1102285FBA33698AFFD0BD80623CCCC3E3B7FCDA3A8017C3B17076874752AC3E
26F3D29804A13837AFAE0AF8ECF6E9B35BDBE10401D3F57E9E6F915406B1E11E
9926EF3CE031B45696B3568B2F4A8B99FA70C2A85C291C4B55E656E2FA1991B4
1BCF0BA0E751BCB861E331DAB31886D6DAB754657CBAFBED81C8F0C864CAC3E4
B3C65ACA3FBB6FB19ECB89B9DA9A93144790992B0FF599E15429DE098378A272
A968FF1679CF93EED4C0564BC89AA26EBB45130716BFA08FCDE112716B596F52
9FFB2CD7432BB2043B89D77F8FAEDA082F762235FEDE0B21CDCF5D3590873574
C6AF7EB2AB747FF0C529CA733423701652A9305A573C48D3C88B3A4DAE2DBB1E
0921EBA52C3924989BAD78DDE1D618D8AEF93D15143600B0C6AFF4E1413907B9
FA39F013B79679EB3E60F06733E5B6F5E5CB8189587C93FC61FE84594317C51B
EA54514DC25209522B1A3C02BA09FD5AA73855D93FC7F32E66672BC25DEF396A
C0DE1F017B7D7862D21FC06688AB938EA6048874E17648E606A4CED82A67828B
EB25555A9ACEF03AE9C07087EB56ACE15E5F2DFE8DEB28EA2EDB812D9ED67700
E3ED1D528AFCC6A32061DEF43A24549EE02A9B213D61EEEF59BABAB27DE0C91C
275B7B4784E00E901C77E9447935EFC850201592B62BF76CE2FA25FCE4FAC894
CDD330CFBDACD2BBB82FDD67399E89C1D14C1A2A5BD633006BCD04DF0C6FE956
3B8B37770A2D8EF0DAB3774C2EC76F8B84A0A33D68C66E227740C59C633A6A09
996DEA740D744963AEE081FD906A6E2801D12FB584D73DD81CA253A8BB0DB916
D1F6A2EDBA2EAE6B4FB58CCEB81669B663029D5389D1C643BC71BD79FB871788
35495EB10DA2AC03CAE8FD2F2483B3C641D0385CC036601A00605957FA00FE17
3B9D3861F7818E2DEB97AB32EE366BB3C8497AF5E57F7CE78F4BAAE46A6A9392
BBF08664903A04040F98D6C2D3174873F553074354D9C695456F471B74B37CCB
3F89667C07A71CA1852941C6ABE0723C45B589CD1A48FC4DE019D2DC1E08935A
11E4F58CBFC3FA72E6FF42C8665033D7472DAB55E8334A4963FE3DB994502BFC
BEBF2C2335CEDE6D510B7C9C5C03383F3619B9A24BA94E6AC8BE5A699A8F84A0
C2F370DE64C4932F02A59A95E8A7F9D56F6583CE10B85EE3DA651312AADABB0E
47A175B12EC1D0FDC91DCB571982706F10B71A6A311D66A305DF0D3D22B4D571
1CDE050B2D2682D581B859AC989E1AD29A67471AC30A63EE4CB41B58908C1729
3D9572FFAA3C632789CB3C2552ADFD39AFBB0F804CF374D4C3C9BC6B873E2057
6A5D47D18A50E1985366ADDAF073D702A15DBF5A384BD8CC294BEFBAE634BE1C
E737E70DA1A28A162D3F802F0113BE50934F4B56E54E7CBD8C16BA65E2001E4A
9DC7DAE4F08F4F4FFEE1CCDAF5DB573C62B68F3EFDA7910485FB558EE239B4D9
9847258D9F65ECC23E5A44DAAE47F0CD0AEF6DF3653E5EFBCA1875DBEB48C3FE
438AA854053EF4763623A91D94866AED275AC09CE5AEF44A9C3FDD4AA54BB427
8A1C2626376210BE64F496FB5DC936FDF118A03E13F334F832F37DEE220A1712
39D0A174615A3000FFA1D6CF96C105AE2D998942622755AD64E9978E503F62DF
FDA48DFBB52FA68DEB0491F77DC036998280B6E3DB5933BACFF0AE8DC0F4A179
62263F2F5BF70084823A7293FE1F2A38E08D76D3E9A9537DE5D7A873EEBC1CC4
133657EBFC0EC30D19C0BE5FBAD0D18AE4D17CBDC2B605E785D8C36AB10318D0
4F488F27DA0BA7DFF0CC820C37E700167CC69782DC85DDEAF5A0A0CC0011F895
245ADE2E575ABC7ADE7BF0036EA221BFC3957A7151EDC43C0865EC449B5B0ED0
93B00AFF79C3E0E15B3C62BC9B8F7F8D6344E80802C26D1703E6F01B30A7FFBB
F865B7B709C155210ADBBD75E4EA5C00C2DBDE0A8F1D896FF0E79D615D8099CF

0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMBX12
%!PS-AdobeFont-1.0: CMBX12 003.002
%%Title: CMBX12
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMBX12.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMBX12 known{/CMBX12 findfont dup/UniqueID known{dup
/UniqueID get 5000769 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMBX12 def
/FontBBox {-53 -251 1139 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMBX12.) readonly def
/FullName (CMBX12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 45 /hyphen put
dup 46 /period put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 58 /colon put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 71 /G put
dup 72 /H put
dup 73 /I put
dup 75 /K put
dup 76 /L put
dup 77 /M put
dup 78 /N put
dup 79 /O put
dup 80 /P put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 85 /U put
dup 87 /W put
dup 89 /Y put
dup 90 /Z put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 121 /y put
dup 122 /z put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2D43A151FEE81296FBE
0CF37DF6A338C826464BA5198991445EC4BE80971DB687336AE8F74B516E333D
2D8AB74D362C559AAE6ACFAE49AEEF4F52E28C869222C1301D041E7A0BC1B608
1BF728EF9E98F3A12EB2714E7F16B14E055FE1FA0EEFB058860ACADEDA9D0E4C
42E3C6F1E4869471BFAA3760175F3FBD842755A9D7847EBF605F18293B42F557
FBE2715002669091BB033E1AAD657532F34F7C66E4F04D63ABB07E6CB9D9AEAE
78EDE8B79DD9BC87A1FF445EAA05B5572BB880E69F4DE1F82D7F0E9980AB0C18
22C448B0B1722D3CC33C56FF287CECB80658B3AF5E7675BE82CEFF3DAD5942EE
A03C955FF979E41E54BCFB5316A9AB8945C403A73180D0961416EC9C92F49811
4B91BC4C788392994587517718521E416D469F69952149FF7F9224377EBA1065
4A727BF806A112A7B45B0A1BA1D5A23683960575368D9EAC8C04753BF7465AF7
95F25C258C63E4FDFFD0B412FD381946AA38C0B961652BCEC30322C47BF4755D
9F91880688AF066E32FFB22E1A52DE741307AD3ED830D6BAA1D1F562919666DC
5E8FD9862AC8600B0AE0BC7FC779252AAC57248744ACC8A8AAFA836BCF09B0DF
9253DFBB1CB77EA8A59D42D1B18FF25E9AED72FA62FEC3F126F030F5D7DED9C3
CF60FE890BA4A48E39E687BFFAEAB96AE542A6387F6624486037C8924002A511
BEE5FBFD780AC1D4BEC3FBC47A930BAD0280D444259528B6C565DE11DE36BB65
9BADC55C1EDA1A80458E98896D782DFB5C137897419602809F9BF8CA39F00C68
EFB9E076FB324C2963F23CBFED28B9EF70EAA4E4B903225D1F199A7162AB239A
D92D71C18B1B682D04C6A48926275BCB16D413B2A0E953E1257E0B12D8B717CE
2EC84CFBC046A4338A69F454A469B12118E562B4F56C5FFB3CA5D357513E6FFE
947A564B229C7FD873057D5C7CDF03E958294A1003B37D8DF565A70A00A3734B
0138AE5277D383D10C2BD853EF806D3CCDC47739F0E374A3DF3B63638B949ED6
4EC25869DC1C0B1F4DBDFFCC97382841D8F10F3635C792139A1EC462FDBA379C
BE0990CA2E70FE73137AFBBF30CA54954D7E7377CC50BDD780DDD4C7FDC77AD2
F3EB1169F14A0041F18160F43C24FAF556DB5D621709FBC544CE55424F7446D4
6AC07A51C8CD5161AB0AD5084A96FB35D77F1CA155147DEF8D7A590EA6939514
D4A226588295CE0007BA8A550895511C8D80BBE5CDFB8A50D249C3BDCA974415
F5557914A9B805782F399E4078DDB6264F1A49A9A5BA45E284A5196E9828EBA8
481D357B8D9E6ECA631A6204439FDFACE7D7E6A2392726107CB7D2517CD19A24
FBE592C119626DB221BBB635B6EB84845C16A9585282E34958B961F4A543AF9D
419B6A9105BF185FC767712D923437BE08A9C0EB92AB6792DBDC671029B6FCA6
7F717FCE379C0F3B51C6CF042A762ED04898FBB4B0105C3C4ADDDC18C51BAA3B
70A93666669547081D9246732CFF74C83EE90DA17F5B4F8BAF47FE4D81590988
2858C9B96071341FA0A0D23BDD4947FC9BC2297913CFBD4FD6CA4303AB3179AE
0203F1BD502065F90CE9BEA3B52DAFE4A29446082EA0E6B1D7AF1F31D0AD02CC
9A7FACE2CA86E5FE0F6A425B28A5940ECA306891CECDB3CFC7A5BBC76B5D9E8A
C754379ADE80B4D72CE493010317BF21A0CF4A0A55C1246218839DCA3F4D626D
1F4161D38F54AD5142C1CEE95C61D8BB10FAD4B772F4955777AFDE8AE5A837C2
A2BBB11D0BF5DA2E63D0B75ED421DBA9C789B281B01846B65DC572BA69591969
21265DB722AE86BD8CAA3D887C975A617ACEDDFB7AAB341F47532AC0F354A530
7662C089DA3939588774FFA16FC4A52555DED6D6F51DE718BF5F345C23C90198
17B77CB8B5D53A5CE7A79F3E286B6A59F3F6178AC8BF15C0A15C1A8A95D03B60
30EBE53DE328CE085CD9A1D49C69AA299C5B58B24334A546F6E274C1B534DC8F
3289553F560C2F81E413ADB92FA0E7DD1C2F39D5FD268EBA97AB7335ECF28257
96B4EADB7D0778706CB41C7E9C882760E7670936774A1088FFB2011115FDADB3
B69EBD5108760762521C25C968C3E282DC3400001AC8FB1EA27FF643E3025950
1D617BB8BB321281708E496277E11DD3AE0023DA9F25AD06B39C7CF527FED27B
57397E88D3DF70EE4FCCEFC8A0927D6B05517E571B3E70ECC99F3CBA32CCD4DE
B8BF22626B6C94FE65598A88AB90D238461EBD9A098DADEA4091AF1CDD7560EC
8E1B9BC2321686E1759E6B8A270C8CB4A254F7368039602EAEAB86ED21CDED91
8F2DB9889F46981C494C7EAF5E819B91C129F0740B8002B510014985E5791F59
B16879CC6521D8E9F1C4C1890AC85A78022BE614BEFF318AB2616F0C3F02405E
BB425D1555472A2642BA7686E431DC3FB8A1688B76660D9957C3FDE8D58109AC
21B1234C9DDF3F0FAF93BCF7B2F88A001F23162E1A13E5E9118D51B485B70A91
D0CBC39CF44413FD8686D9030782DAB58064F5B987E0402AF5B264B17BD31BD4
FDF63951BECD73ACA6138854EF35B062D01F33073850D9C09A818828C581241F
A625AB3638081DD0F00F946BE5450D38489CECEA4E66B4D85CC8AE0157E2AEE4
A22A9313829F24D573101D84CC1784D1CED7DFAD5DD966601370C6CCBB723082
A86BBAF0A5D867D0D2E3CA16E14E5109A29EF02649C47E12E88B3B397D65CACA
DEB9940B92100744D686066F8250FF30E5F13D81428EE238A2E4E07ACE0F5C38
7D79D4A336D0D26AF9C2B84088ED8ECDF94A1E3FADB45AFDAB46CAD6FF950B0F
07AA2CDF82374DA76C56D29C80138841EB13F0D02ADD32F88B23E282ECC845F9
BB9AAECE9CDC644AC2D49577A92307A83A99434F6493156DF25DBF0FCF2EC21E
8C50A312C3D19E0609C0038554CF4FEF3ACEB7A833FD54B06EF0D617C2971C89
E4C06075B09B84A4F78A82152B9A9C540B1D881313C2C74F20ED064A9606EC2C
B56D7BB4797F1EEF4A9B13579CCF311FA4A4DFA62D80FDB7F535CC6526D1AAE5
45C008EAF024B48C377522F74D939A475970533E645B1BFA81997549AFF26F67
2AAE6C2EFA357DB3B525276EF330905688777057F4E4CBF584520A534A8587E5
5A8360891E75A15205E8ADAC4A4E5A6E27D0C4A7D492216E4BC023AB027F37AF
A8DC7579BA50204D5F45A51460C5BD8A5A7F87668CA6451137F2F59E117BBE28
5C40820882A5546FA76F0CF49F8A6EC445F0647CC3227C400F56E7E9B84A6975
E85E243CC1666DBAFF4E07EEAF3AF71BDACB30DAEA792F2B8504CAB071544F01
5D66243D529C479D276FE22F7E275D9E7FA9C6EECA18716B2F213916E32C1D94
6E32397B41AC6779543218E506569E3544803BBF9B404A983EBA62A494187B30
8D3DFA4E1237A2E5E08224A60492C09ADAD8775B7CDB830520829BA164209ACB
BCDEB2D574CEBFB7AE4BE72DF4EB1945FEF2458761AD8DCC0D378AEB7DA002C6
9C14A665DAAA532B0ABA98D7BFB5A6151FF6703385AF7AE8FD315A492FCCDBCB
B825707F9566B3B4943A3C61C3DEFDC31A843A2D67AB06891F3E110DD8C73D3B
B5E4151B51D9F13905D7D94DB9ABBFCAF35F43B6EEE256B1A80ED6D1739D8D5E
8C767F6F0E8704C5345D028A2A6DAFD9BB7AA048B8B895FE9423A7ACE858BADD
595CB074A128DAFE08FDFFD6BDAC0114159A702FDCBF8013804B0CAEAD7AF38E
FAF086A3248AD4FCA1401A85AE2F72E3E6956DC0996FE8ADB18F89B14A208A15
13F81AF73D0DB72F78C4DA634ADE3C73756CAE6AF2E149C26316DFD93370BE1A
FB4A79F77A67C07CB0A53C78367F21661D4AFE9E27328E077B522B50FD9AE2E3
DA087BE481515B5DD7BF894A96A84A6C78874100505B7DDE1D22EFCE8D58B3AB
313AB5495F72E2CA4E6AE22C0CB854302B9990372F1661D9F0A517F90686F248
C5643008B3D29F7296E5C8FD4049886662EFDD4106E17C879F5D41CE84F87E89
F6A3117C968B95A35940CC29C43E1E0DEF51C1E46B676301F40D59615C3F73DD
DE37B72FF7105DB84227DA5241583272AB1C3CD97AE11C1EE98FFDB5E5F44844
8FC41BEA5C54B26341AFF6830D9D0A5A2901B0653D8BD0746838194D240FF753
E99750D3383373F453723D86BE97B571B8B84D8696089B5CFDD53E6C562A2197
A8C4FB0CC690C27761A816B441029D3D306245052E0C41B53025D8CB7267CFE3
C17FDFE348E765326F91AEB700CC49162DF748171214252CBC821493DD01AA20
417D66DF47EBEFFF3E9BB2B0A2BE7D9B8C68BD570FC2EB0FA54CECC318F04C43
19598BDE93F2F13DC7847354C99059AB20593EE51E94F9D4E9241869D605AAF4
9D9B5FD88C3798A039A67993C5EC68B6326B132E647F67EACCA7F7AE7F718D85
12666E90D7C73EF210E344964A38228B236679A2B18F5E081234CAA2458F8D83
3F0CA308D19663CB12EB904076EF88E556407C33C9380A6A3D68A9EFE65387C1
A1BCD2D26DFD2AC0881EC30E81C0A4E76C244A2BD822EE88C4A60B480D107E68
90E419A1F512E865BA922A7830909BC2611A80931CB2E9344529586726614D94
3AC5200FB9FF68AD9686506C5EFA8788C0AD0251AFE7F95E84683380CDB421C5
B1A783B6D5F3A6BD1BC1C14B363DB01C87C0796DCDD5BECF41A1A9F43183CF6B
82C2AE49F0BFDC5DEF7729F2E638EE6EA9E4D059EB9BB1B992AD8C82D501A550
1BF73CBBFE740179B54E193E84A55DCD61B343C1852780FFB44248FC9426AC94
AA2B3FE20FBA30F6C4D1E0FF3EDCDD8C0F57CCB50CDB0EFE2E04A8927E239C1D
9B026C7929BB48461D4D695FFC766C8A0E545B1BCC2AA068D1865333108E7985
2D93F9B00EA0A90939D0D3840D59B6CC0CE2C147B2E1A9A4F14270FE3ACF51D5
99F7349106165AD627CBBB0ABA01ECC6D3A14C1DC1ED23A9DB9865BB4396C51A
31ECD001EAC94B33C34E29C5611148EF3E55DD61813470B8F3CE32564C749414
3C93C77EA5A3538A0B5AE3FC4DA32813B06772E0E48E25BB39F3F6FDCC077E86
F86FA50E18FD19EB2F37311CE87F18F3BC85CE7FD71CA92D5C3264E34E04A2E5
70C79D99F54D6C6D9D527AE45EBB48411221134587D2253E7C8ED7658EDCA34E
5E768DD14E0200470F73C44D006CE8CB35DE1CA3EC10ADC668B0662A7774C891
84EC95A31DD872F0728D9F65CA80940080E04630BE4DEC77A2C49E3913C39978
BF145F8832AF2C4385EBCDB15F9D32C22CBA0CF950877717D6F1591D7C0B8047
8C9BFCB16AF7124ED83137695F3D69228DB633053208C29E0ABA1B06A7FB3EE7
5625CB44927E2DA6E038A6E62DEBDA2D96A03177982D8FA33BAAF4426E05F4B7
9C1748B3FF7691F9888E7FF864A10B9DF761A41E6B5CFAD2BDD7E1C4924AC97B
F4B352705316DD1A58637CC12D71C18A5CA691AB2AA8F171590EC24582B1123E
94D4DC587D8F99E18A711776BF4013C96446BFECFEE4C809EA94B169088024DE
0CBD20199A915AA406F0BD5F3D63D1467C49B4691AEBBB35ED6624F2D7BB74BC
E80FD92B9FD04DD9C2BE9B6FD29EC7EC07FAB447511C61DD299C783BC09AE2A4
7B3CBCA6A20C6631D06D0B2E2482A50612BB7C29B7E7D0A205EB0E8436702581
596BC996ABD58CD8D5BAAE4B1478195CAFF98FE0141287296C4EFB8D2E7A8442
F0A3AA9F9264329982532295A176BA1867EF732BBAC49AF485D9D0F7130F617E
7F7DEEF935874D55A22240F8EDE4F247D5F73481373A392D40A8076BD91079E1
1CE5998BA13D48D56B49A92B4A18430E316405D2E2E391B496A1934671FF1785
AF42BA3B2D14B8E04014437FD194455C50289DFBA61B5C377BCBDADA48E82DEE
4E70EF5E9DC03064907BCB8BE4D59DE069FB0C0CB140DA54708E630767313F9F
744594AD8A499CFEF733E640A11FD74E46A749F9C7D18D49251BF85C6EB4668D
67598C31A8F90922FEAEAD4B83B6E7184567DC798E4BA1C4C9B3461A478D63CA
054F13B502DACB674EB49D6BB935E5EC82BF99FDA7D47C581AD7F940DF4FC6FA
6C6D25D647033AC69505F0CAC58DE99087F365531A6283CB89CB644688963C3B
8B2203A94294E58739EF23C7803630A1F9121D62BE1977DE2F41687C8CAF87FE
CBD7AD3B98E0D95C8C6E1A7CCB0E09465AA874DC90A0F5DB2C5E7C130297FD39
EFE63B0350B5139D09E6864D22C3F1150B29196E40EEF9723E71158B7ECFB8E4
C426FEDCD439420B7F1C251FADA347C9A2C49738B5A17922E1EA93CA7B125B76
57449EAA9C1D591CAD327D0E98EF2D44D614EE9ED49DD31ACAC0B956620B6BA5
5BF6D08CA7541059D5ED2EF00AE2EE95488F5645BF6837D9241C0D3959B7580F
C9ECB2BCF3E65C07D52EC9CFB21C11CD4C883E44C173214C900C44D2E1E43DD1
CE8DFE3DA93C38B548BC4EC46FF91F30CFB97525E1FD4E77686433B20BABF8D2
848C1CDF1BCF185CFD7A81D2D4BB826E837E2AF35CFC4F419F698DB0C43E9F9C
B0FB628AC9A3CBE9B1FF4A067016E70333E78B32AB2D89C483834B31F5808FDB
77492E099F1504DABCA5722C7860CDCEDB2DDEB512FFCC7D287F4945FD711F28
87BC3D36173566B81FC2C1290C717A09697DAC6072408E20926D39270121CE58
3EF97CE12EDD7F87F2C8CFE36C3C0400869C0D813B71C425343EE0CDF717BDD8
409D5297D0F8F7FDEB0257C0A391F5635E0DB1116058942FF3E7C94D5F2873A7
A3B0ADAFC3835AF2BE474E6741319BC6695FB37F59AEE388F81F6E66F910000B
72E6BA7531B4378CEFEEDC79CCF4947BA1703823B5AB4F4AD73D9615C66C489D
99D68E49C9BF765B7FC547BAB9640D51D5A7A2396507AB5A4DFF3D14F52422CD
8FCFEAA06A56C6C7FFCD29C9A7A59DDD2A909A9363FE5F1E9629616D25ED38CB
E754C059E4379318CC491C3B1A90128693AC53F80F8210FAEA7EE638902A7D3C
82B95B3F5AE340EC1B648DBB9FB679D6E80B7F426D8671FE7136D97F51E2D2F3
C9CE9183E4061CA40091A2A70DBB9ECBB19CE3F65ADD0FB346B54BAB182E2CD0
EAF4C0F402C25573FB344EA771B297BEB615FCD0595172E84ED2A62FF8962634
23C19076C2A9ECEED5135994EB397303A9619C76DC55E032DA83FBA441BD484A
59F70A5110A8927F6239A14D4E223E189A5462E4A92EAEFFA4B961A2A32B320F
C2B4E8C1821FA67A655B5042C15E4DE1FB3652B55078DB123573C4E986B19DB0
1C5131F3DFAB271C30A5476B4A19D8FC922E31879C34BAED94C07A4841B8209C
403369FB8E842610D1EB4662B6171A4465FD0E819964F62EC5B0ADC92F08CF90
1DE0B410FFBAD16F6D355E8AD72CCF67961EDB6CDA82398021007C2D0462E893
75EB0710AE4A6CDD15077C9DEFC5774EF4A657734D703CE42174259B58E5277E
0DF26BF59AF8D1A3E7DC12E3C12AA4B67CF35B19962F6950C2020B698D971B35
82FF84E72F72FBB0C54A112BADBAE6C4CAA358BDE6A705AB59332C3850CA3D25
C7564499BC1319121CE0D93218210C68080AFF33420E3CB3A48BF9EB66BC07C8
A79D8CD8E78C200FF7CFA3DAED0B9E87E6141C88B436D8FCBA50AC195FCBB9BC
9512B95FE3A37FFAAB39850FCEBD4D50A243EA416E73F53B4B00F3B6EAE0CA06
0693AFFEF215D00BFCAD02E45496D7C8F5E99EB9096FC4300D038C1AFD31EC4C
5ACA6B72C1BE7204E37A4CBBCB1EC26AB87F2FF82DE20601025169A5FBD2D060
62B5B2DBC288C79C33B596832AA18D730AD572C6EDFABCBD36DEA87C0F323C3D
6E537AD3B43C6F3A905597570A8C6B0B4A5E08C08EAFF9731E745F2BA8ED0C0E
1ADF7821CFCD4E38F3F4C243CAD31D9F8FC68B9043740852B4CCBDD37BF728E5
648215961FA82A0C847ADCC5187331D0863A4573BE520C02CAE14AED4F06B3F1
FB4A318AB54CD86DEC824707B29F858FD726A167F2333855C0575EAF4EBEA0B6
754B1775F967140641FC06F82B191244186FF347A351FBD8FA62E8C978B21F6A
E124929876488AFA97FAD1A68A0C3496BCA768F4AF8016D7A65BBA3AAFD7F5FE
E75FE714FFF3D54D09C9747ACA01CEFD260985C6E87477C9C7843343C7E9E3F4
0537D461EF019E046DB8B5BA258462B2FAEA1826B3410BA3333480CFE0DECE61
CE2731FDDF7FCF2AEF7CC2B1EE7095F480B3B27D78FA90FBE923D372C680C87B
7F0E702B8FECBE0CBCB087ADD6D28549FE707FCB616448B0D94CBDC404915943
66539B177D5940370C2035D0FEBB3A3C666ADCEB45F5B15DEA729BF86BBCC309
0294FF267657EEA805DD28DF5DABB5998A144F6DB38C3ED88673F5594CE7E9E3
D6D2FC27389337E95E6D0272FD1B8220A275B9982C830D4DE43E330BDD4498EE
7A423085D0893A31E41E4CFA92D886B237E83B9E45D6D46C86AA0B71F340DCA0
FF6D5E118B8C87846465C9D0198FBC0440F5934ABBD47A39CB2CA190F7344C1A
929049047F1769F441EC3A8DE714D0277B9192076E5BCDC33EFFFD3929CED012
CA148931C9A1A14B3ED106D64B6655347AF02199A7976DD571F2EDD6A375D9BA
448012098400CC21E437A0DCFA55C2D707C36AD9DCBDC9BED442171A1F00D40F
EC513EABF7B68C79E13411871B964D0518BD1FFE18448D73D7488F02D95C8ADA
965AF97C13C782E9A536B2EB535F24E67FAA05A3C0C2EB7AB618B457D710C2B8
14ED267AA6F95562E850CA021A75D4FEAF68399343E006812AC95A192728F2A4
F9C7C4D996D68A3C1F2FE6C687916C132BEBAD9213F7F3B4709C22ADAC69059E
89CA4CFA2DE1F998F546BF767BE3EF769E59E91FFCA82F757A8B1425ABE0583C
85C2AB9FE6DAAF0D8C49FE06D960B5BD1C162E4D880992A515256795861A03D1
F5AB7248524D78FD7248BCB3D9B8871F451D80BCF86639E8E72D30CAD6AEFA44
7F50EB1FD6F40D463EEC1714CA2FE51D8E77B00E463EDC2181D7E7963F87EC61
AC2945D0E5F9629694D613807F97CDB61ACFB20FDCAC3391C62B5D232C6CE416
A805A2611B11B03601A297A58758211988431209AF8008D1755EF864D54054F0
AE266D757D2486B0E7FAE281997D6DB9C08F935F5E57DC988D3A40B79A3EFB63
AEA50BDD5D02BB3BB7A589C359AEE539C5F16A8728CAD0797EE59B926A6A5956
17DB9D15A7BFF7D0DFD3A448D777139D3460EF74822B4C6AF34E739DE8C200F1
793134C7FC47EB6DA5626A72D79CB919D7321324A91673C54703BF92AF65DFEE
8A936DF27021D56C703D699E15F84D7DBE6D75C4F347E3EB9CAF1B36C7DDBC4B
33A3FABEDD48502CDBFCEC95F249DAB95F163DADDC6FB5257ACDA54B3EF99C88
2D0DB48865B16747ED6CF06DCE01C38EC4742AA3136675B5573BE877309DC76D
97E8369A62B220A7E0D68B5483F5EC343516991E78FCFBDAF0F6FD306787D121
D04316B806FE5B074D886C629718F3FEF5C96233823763A69B8B5D6D2BD0045E
112C2A80A6D61E42EAE39E0272EBBD730C10CEF5E5F651F8484C4B2CF727FF5F
8C08352D2E69C12356826806A54B2FC42A1BAE24F07B20CBDAD3797416D09D93
8F2BC39FD89FC3A12D6BBE140F9B48615E50EF3652714C1F777261106C8B56A6
AE4FE8B45CD7626E392AF85365B60FE2F49FE9DBA1F8FABD469FED19CA293755
86899C9F36710D109E4844CE240488DA29010FE075C6005B59B995C32CE97546
E4F41B6529B6120EC49A31B413ECD029DE955CC5C27BFF5F0334E1C1ACF047AC
E8B0A6FE9FDB9273C3874887E8A4AD527DF3FD2FFD6E0DB08BD3301F817193A1
8D45CF8962196EB5A2028AE15F32359E1E6FC75F792A4D0401442FDDFD7E1484
1ED1A31AE70BE750220FCB40074946855A649B8113956788DF2274303DB317C7
F7C9F4C7B40D49B25F08E9B5F932E3442C8E262729BA7976A0A1C95F88297ED5
756D91BE85315F65253A031B7AD6CAC3E1B3305D796439607A4A7719EF3CA963
37AFFDF8FD97835745303E4460ED5B5C888AB9F4A9241C3C8230BDC490640139
5DBFA339B1235A2B7583BFE94832240EE592DFF4E73B01CB1E8D851E9B91EE38
9E5C1A5A12E73BA5C671A0DA332CD33D3183A8C548C404A14F37B0EC27983201
2BCECFE6E3BBBBABB8AA1F7EBA14FD0B27AB36841C4E1868C942F844E087276C
CD1ABC1B26733562CB69C4A5019A6820AD44E0306E932151A711F10C007AA7DB
1469743327F3599546BF9AFCA05B7C46509ADA938238E64B75A29EF912A3361B
859A9F6F013267EB2D36A0F6762380AA8BA724E3A1189767958D786F61526F0B
1CED6FBDC15823248A35188BDC34A221A3E4663695906B72701EF0A316331B98
C96D02223318B9116CA5E13E88344B497F272C03E7035B19395C5764407EA2FE
85BFF84C593BE836B19C17AE70AFB5ECF219FB43F80D2B033377DF86B256B667
D5C763C2580EC7339CE01E28A544E4ED75E662D9C9BA864E456891B18CB96E3A
E5A680C90CDBF02DB2F442D56D9E7C7F499D0018976CCB04A580AA2C03690A3D
A7778C495D52B1A60875AC4C028BA6BC0317AF0B08861A1E5EE6A6108315DF94
E3D372D9ED1D2FC39E75A0AE5BB40C7DE0F82D892C861E0A81FA35B56FC00CCA
AC072DC80EFB0B4646BA5451CD14CC7D2C213AB3EF1A6B16F769EA01A80BAA6A
8247A64781D5DDE9508058DC566BA17F91CAF7859CFF3F7FFD91F2D385FF7084
03FF82DBCC27557CA338A5B0025ACDF3A503AE23CAE5676F5FEC5AD00C4D082C
3246E25C46CA15969BBA35D725BFAF16936911C8787A5421418A2E9C396851E0
661E47B00BD285D635F1FCC63829493A1BAF9B1CCE36016063790AD96A99AB5B
AB5A0030C59F6BF92B377C0BB28A191251870B0FF612E77F37B35233992E61F1
2FD3B1AAE9BEBB9991E365F4E74227B5A3280471991DA139AD3B73FC41EA9816
233726EF58FD4BBFDA5473B73BB6C91D0D663D6728BF18875298CBA73982B409
E5F3197D33AD3DC0D2E5DD2C1BB23E5FB18789267FD4D55E741A1ECCBB11EC83
D76A2CE0D67E8522059BF0DB5C50C851F23D0195F99190A4FBF245D7D68D1E3A
D86B51A1C6CD8F3BE3CF03FE0C8816F2CD8A899FC39BB72FE9BC3363E1B2FA44
1CE0C6D71AFB3F319B2AE0E27C9AE21AD60DC1971B754EE206071F7C0E471569
F2429751F4CE4B1E1A17C347DFF4B416890096313840CC530025D7461900F673
C63B92F54DE4EB585D34B0E5847C4C0F1F8557F8F6C5A18B0A05F1C77AE439A3
25E319E3E19DF15BCA8995C0F9E02E5F28B2A31791D1275E32A253D7FC24885A
CD72D3C635376F8830FB4E7AD8278F46D608EF4C67FB6C0CDB7D83C87A5AD175
02780E5B07DD4692EAB83F758515F8C50725C44C116012FDBE11527950637DBA
7FC7162087724A241682F0AA579EF8060033EE1C305BD4751018FB35A01C1AB8
6B147908D1F4A517FDF7BD500E69C0D35681DDD3B00FA9DDD9B9F04135DCCD6E
D337789A821F04B5695C8C78D8CF70EF148D507947487BF766D34B001F9F1015
FCAF741ED46CF748A3D1B793D71D2724D80097201C499BEBAAC8CC43334C98EE
5A96272BD4F86DF6CDE25BF945ADF0E357BC651B59935629D9F05A66256C03B9
7FEEC15EB9CB4C32BF9E0D5937F86C56745979C2C96AF8C19D796AEC11CCFE63
409D6EEF31BB80A05BDF9EF262CC486E277DCE3D854A925C47873B494442D431
B6E6DCF2EEF62F86BCA304B0ED76B699A148358088CF38F702F3EA2F613187B8
ED3463BC433C154C7D19238DD87FC99EFF0A4FD0621E72AA84643A62A0D2AB0E
14952381C4982962496CEEA759362B2B277978A2F9C608883A421BE04A008681
97B65C61669BD57B241FCF55E89B0382E0A3E6EED2D8CB945091160DEF58C7FC
5D454D6BB236EE25C76988B09F65557CD7AA8A33D30FBD31E6821E6FE1F33134
237857BF058BE0C31F462CF09D0D900F20D2076738CFB73A4911015D83597BA8
FEAB3C7C2D242A9AD62F695BFF5A1508581FB9BF2E3B944F87AF5E2F4C5D3EF8
40B9639C1035511775BA46AB5B04EEF62E6F98B5EAA91753AEFC599DD3F280BB
7F56E9868AEC57DCA5781CF37D9901BE2E42F097E274C448ACC644F4A8A6415B
77B38D923DC98F7C61A39D689D35F437EB732387A38DC8D2E597933D8CC75F15
51EF688B1550A2DD20D199713F97A788BE276361F9025EA0E94169AE8DF64D83
4E1F5FCAA7AB81B6E482D39D56FF8FD5BAFC131E44AF00B1910B7CD0FACB0397
CF6D51D4F036AAD4917ED2B63780C92A4C1D6F373AD29C19C2E61735850F4DB6
5642A3B9C0816A0E9AC841E92C11E26EE838A51BE03E02673F60CC458A70E6A5
F8CB60CD17BD4C9A6520F18EFDFE51104E72F9191CC4B3BA98336EB3923A7EA4
4CDEC82EB08D8F8D18C54549DB2EDA378FD7B6438371792A23986D2BD60C8061
648BDB329B89D1511B6DF637C59DCD405C31D782D8C7465D25346A9AE860BE50
9848FDF8531CB6FF23BEF12068810B2DFA41A3EA5066E4B6A8BEC04A3EDDFBBD
076C0CB02EE0EA45DAB74F96A8F59263B5C048EA44EC860658EE48BA490896EB
A2DFFA7620480FA5F80D3A633BC4E9C67A74B321D49155113B5BCDAC19FF1716
4BCAB8CAAADDF197293AB983AF72AB8FE528EC8E23D7175C09F18162109C545E
F6E53DAD3834D90A85DC5CD7640E6F9E50FCE0D7297ECCC8D23729F7C70E6FDD
2E6155A4D8AC9CA320791A5B29C73688ECC8F7E61FAEDC6801769B657837F4BE
9F312B838147F9D5BF5960597EDA75022780001023BCE902992AA7A407377BEC
3BF486547036E35A2DB7F7F1ED1E51F9C5D5BA8C149AD58999CBF639FCED448F
9BC449095EFA75F3205E0D648627A915FDE6B1B21B9033E94522FB0B8F70B264
AF5D9477E9059E8459B78FEAE2515B1DFB38F35787207C389FD612E0E72E9F3F
8B30D658026980A1A213807E2BB77D809A557F7FA18E6A2B0C60AEEB49236029
B93DC983BA77ABA7914C25CE5D97AACD80FF15D9B3597EF46D8561B780484C33
D31EC58ECF9B55E2E635FE8EA2616B4E4F0DA42F2A9AA5181183643A7049AF2F
D8CBF7510AF4A27DE123040F7BC8F63C814158C11F7D32751D1008F77D156941
BC93B66E3D51CA6DF71AF08A1F6186F309857F0C9582C15F99417697508EFB58
A9375BE4F483BF4C4B7620F3E782BB92FB8AE49D7DC27EB9B6E1C8660EB7B476
A69F111FB98FA1456BBA573C61C8F79928EECE680CB13725AC8ECAC9F6745145
584BC7F806DECDCE4DB4B3ABF198A49F3C939811CF258C90DF285918781C8391
58A17D7B07588BC8FD5EA6E4984912674C5F383D0C001559512125BF4DFDFBF6
79655F0C6A1772773B91D3FC221E5A4CDDB0D7A17B1E50ECC6A21A26DA5D9E94
FF152F9D979FC60144A23E5765A3A9E037F49C2B00EE8250DB12840919033DE5
EDA6485307D761DE818B4A41DB3751D390C52818A559F966A10DE06A18AB5B2A
4A37E5F65AB066AA62DDF99B86035532972A70BCE22094C93E1FD15AC6AAD7EB
2857EA2E00088F6F8E770B7C23624CA8F7BBCE646D3F25001423281A75D93CAA
F03D6312A6CC15426FDF9D728731C30CED1BF205F4FCDA7E414CAA57E629679A
D7E8AB8C281DE765B42D86A8D90CEDCB05A6A0D0A921E87868D0FB066D2E882B
99EE5DD423631CF2AEFC409CBDD64071EA99DF790E28D270C6ECC178E9C89FD8
D57D76A6798AFFE72FB356D52B00ED0DFC6B9C78696DF1BC6BE512A0EBF92768
98A474E898F62BFE90F18880BCB36DC4A7489228BE6608DC2709170AA3F00115
28322048BED00F6BC0E37DD7254C2274FED019A2E69C957687EC28EF842C0B26
3437028D5C8AFC584BAA2D0F5F86547F8292462650EE85E11A29FB59ADC3794B
81890A327514FE2802B7C235282CFCB2C420B5C8C4386D0A1183FD0D25614381
C634B8B7D4C1CA7E1CB76B9272F28115C53B7EB5AB14FBD02D50316E16C3790B
A7208ED5B83AFC9F28DCF327A0A4F6AC69E62ED3659C66309126A95805B1BDC1
1E50F45D2D636C204AB3710C5FB896FC58A46BE7CAEAA49E0AAAEF99BD42A039
9D562545C4475F983B67E0F5D37D2037D0CD4DDD19938B821B97BA1CA6767848
839FD2C3F9513C9E28966ABDF7AF2D2D34E7A79486674E1A14B479E64982AAB7
6F07FB1ADB9FA639E07B3CCE127B11CADDE90CF39467441DAA897153A9992207
8E22D666F9B0A390D2A00398F914BC5055D525500380C39CB0ACC53CB97EBDB7
3F59D7F8855BC42D455955D24796E0958073D89DA1A5EF783E7727E8DED93105
E295ABC0CBFE7A48A8918B2C4D4496F79FBC8DCDB7BE62D43A9808A1F7626E80
DBFF20712033BFD3EB217678FDE7A0CC046C7826030DBDE09E8573D3D517CEEE
14634BEA504475742C1A5144B7BF4BA5CAA60DC5CED3F52246B62394620C31E7
E8E10B2900182CFEEF7A565DDA916D2AC613AB830E590959E586012543AC6494
65F2A33F96B96838CC9954DD71A3E896C06D2F4F273869376DC676832CF321BA
9D1D7B9C53B6F2DC0E693DEA5FF1F417B204A4DBAB77EB242825F39B0D6AC9FF
F055B087C9F72BC990C4C0A06738B7E9159B1049BC2B2F8D89EF5F480BAC8A36
F46D90A66ADE289AA781A7E1BEB30D96BA4B3771FC4210C4BFF54939AC8DD6CE
13BD4AA74E11A64577D288EFE5C29DE211638AFF73FFF726E7E5F7546A94B286
BCA06834B53E2686C03DB833FB273AD3C707776B607EC15B305DB0F95C1FFCCE
B652E9F8CE0C07E55FE09506513DA5E53E75380FBC02F42AEFCAFF1EB6513E0E
709A3C8AA82E2928DB1322020B3DF66433E40D7C9FFC0640AC5F5B646A4B0BBC
B2F58B383AD4F9EE759F760D6AB0572A9BF35D00099F19C09E6DF1B345DE3779
49DEC0AAE2F3191AF6E60E3D47CC6D57A287EA378F9B75D4480600476312820B
7C33200A126094CDAA9666554F84248A4B2E86F4C3F40B65EE9AB00BF543761C
5F56DF57DAC4DA870A1CBD3E93A3505F5F88111C4FBBBD332D877DC645910613
73911DDCF0E9AFC0887C6D54AB19AA7D28F635C2F24D34E8F2B02B4DAB15FB66
3A04001D430F4309045025F9DE59B928E159AF64EC4A11854365634833E2A4D3
10331662B8481B096A7BBEF169F926AB52402552C3C8F3EE674F499B570D99CE
1A20EDC3C3F1B7777DCC9EFFEE77C386DA7CA44CE5BF8F732EA9EF9109FC3BCD
3681092C399167FA59D67C13B433EE81F2261CBE74C835828FDD4B2D9824F659
E23B9DA1BC489FE5B8305CC8F84874B1B86A5C90828661298CE01C767BC6DAA0
316440660D89C78690411757768D8351DBA0EE568ED853F0625427617C3B74E8
2041F89E026F1974F9127C87C803D813834E763359B4EC229BA26E26ACD9986D
260A60DE44FB1065F9BD010204F552C3DFAD74EA8B238AD7DEE8152525C8ABB2
EF39D391F65A37596DE3758FC6E489FFB8E7DA065A1DD269BD4183F18D162ED7
44BA27A20E4340FC8EC468A60A801CB9E975ED475A8333E33E23F4AFF6A73EC8
775C2FBF49492E7D9BA8093A4E52656B48771FEE7B0857ECEFA2DBC83056BB03
B6556126237CB62B0549F53937116FF2AD13ECBEF0A9466CC7112B1415795C45
7310857330A9944291D95F325703B8950951DC3AB52759084E5EB7E48433D354
8EFF9B1BFE57010128078CC6F50740E4D9AA25A8A074E6C4A917C5BD16A9CFF9
067DB5A80BDC0B6CB3F8A1132DFC98556134772CACAD0C6B0E40FBD75E1311A2
B3A68B43B36D039290C48356CE15A9B3960BBC758754D2F266E479A655AF6F6E
39DACDEA2AE6C8D0C009EB7CC8A0AF2262CFDE6E75CCFE96C44A37B28521526D
B8C9496C8EB1B23C86B3D8127CDF0A8542FB9634B09D782B8BFDB7387DD54B9A
E88047071D422F9FC412CECBD9E81024775E87E60909DECD3393EB3F1E9EBCA4
9C70E409BB8D906B5EA4C36A2E9541D77770D83E94791D4639D7D474E4A5ED6D
2564BF8DDC8294408741EFDB5109E7123CE6DB57771B688F3732B0018B510402
9F6C6FBEB857D978B52D8672DE5B718F7BE527B3DCFA208A14EABCDB38BC0643
3B9B936E781B47C962A2EB56331BA0C36FBF24737A6192DF4D088F07BD9D4609
455F2D2B963BE33B3B93B2B56022F058F775B66815CE7BDFDBAABECC884B5B57
B170408B07E2628EC67765E9889B724DB5224C27161748515E48A8D8C00911CC
204A0ADB2D2FD39B60754479295B670F862DF0F89CC6A17AB6A0210CA276D8D6
B6ABE8B87B5563CFB4C274A13BD72A7816B40798507F4AEF81C8E073D082BFDC
0D62C93D4EDDC4AAD394F1718CC12CB68B527CA588B2F8BCA179BFF6C8994232
73037551AD6D467299CE057496A0A8D7FDB934090C0DAA1BCC7A1D276398707B
066DA2948B01C8DE17839C2510B60898E174F05486DD112F6D1993B48AF9B992
F724E127EC76979BAE31DF5CB1F0D486A907166B9A2EAFDC63C6D7D7C69AC619
6C82667048CC8057C62771BB4EE438D0E6D2346AE410472B1B40BAD6567E33F1
764DBEC8F18E0DAEE24158A6C3C6E3C5F6F16A49D95D9499747FC35B7D98E992
0C85C15451EBF292BDEA3691A1BA6E7F88322ECDB183A0222729E404694FA58C
CD2176D424D19CAAF9C0EF0C3B209E113BA41D333F43493C0CA560D010638627
5AE51A800DA3B6B7304167109A60F498F8D28AE456B528C3E7C36BDE1FB719EF
D6A84BE725036DA285B485ECE609333D3F044BD8956CCE7D5DF7BFE51F72D9E7
A89559477C3A9DA91F37B37B4F6D6C219D38FA5A60BC3719653EF33D823D5CD8
DC1D98450DEF0A41CE33A8360878CD4347905DBCCE00BFE15B656CF0158FA97A
6AFAB17694E50249254FC071AFC2F4AF93FC7D60C429BCBD59CBDAC361F3ED1A
98A7D3FAE15EEB914EE4560E19767D5BB39B71C9991DCDE5D21E359492460808
BBD5DB236C5013CA5831DB59542B5D452798F303B59A0982CB25CF5F0BBE0ABF
CD9878FDC8AA79AD887E70CA9DF4CCF5E28B55AA8E1CDBA68E1B4EBEB776891C
26C90251651FCC25C2C6BD706DA22AF9D7B640143384B2FA76C9DE43D598F7A9
267394C4E79E32953316876EB1C62D480D79E5366B78DA35723626CDF8BFE22E
B6F3919A4519D0D61B51F2ED5901E53DB6C238D0B3D9F91E28493353754562C5
D68A58C72C7003BE1DCB6BAFC1C6C6D90925266B04E918E794FBF6FC6DF57568
BA322666F6BF78049D3083ED96E640DE6F5CE1D47CBF127D5F106033EADE06C9
F4831045457FA48B92927653B9F84A8B345FB6A803CB6284242572F1DE8F1032
B7E765B114B33444E485BFB16A9E8F100E7487BDCC53F9FC5AE9E654F724CBC4
0C9B771370E3360701AEEE6B855AC991276455FEAE574437C53DDE9332A89D7F
42ACC3E77A9D37AFB909C707E9CE1364108945EDD3F9626AA293FA9498DF271A
6380923678DE63DFF7291F9B4D8830051625BB565F47DEE74CED4EC1B66C1B4E
5003E4AC3C80CC156C34EF3DC731A3CC86943B25112CBE08423F110E24A19D62
D55244D1D4B13292E2CFD033999BA6FF6257010D15ACD0F47D0C4B6DCB63FE35
067271F9B38A4161ED30840B923BEF268B87445351BD1D35E15D5A4938565746
AF629AF35363F9700D758FD8F7B9CA379A261108E5297117BD1BD05260CB6636
4546BEB8A5A568FB0E5ED491CA732D384F411D3FA0668C206747E097450B6285
1268F610BD87AC2A43A5409A4EE644661CDE632013122DB75F3601FBDA9ACBFA
EFD558E715C29249C3FF6BB3CDB4303AD1AF103070A239C4D1A3896EA71CAC96
CDE220DEB4A7DEB909690369DE49155A749274577FC513A8ECE68C9821590C79
8CB2CBA3D9E7EA775BBA923952D384F37C48A7EA757B99A1423B4D212AE32688
BC9BB9CE0ABD91D2BE3922C56BCC0558D93F6BE1FF5053C4DA40E9E475B4BB07
0F6843BAF62F5686EFBF61371F299475585F1A197C0D89D8A4EDD370C1D87719
F74C9F2074E4E8063A75AFA97832B39E4EEAF481005030E8246B42790C66648C
C1A74E06257249076C7633EF1DA737CFFCC8BBBE8A8BAA7AC21228B8551C8946
C0AFA4C9D1CCAE3F21C77C509643EA0E951A2B70733C1612D32F7F8ADD7474CD
16BFC45389CD0F978CD06B1CAAE669E7703CCA5605CFE245BC61F5F9DFA460FF
594B88B54AECB53B9DB9D2AB23D72488E5C6C63C0ACEAA1B023E89B5754210C3
26EECEAA8D1BA4866DD840FF3F0AB4D34AAB9FD6F428C12F45CA70F1CC5AD033
9F48776EDD4CC5AB0724BDE6B3EA9DA349BC3819802F2569FEE0E009CCD368BC
3FC2926AB9AE82D60B094AD8CA21A6CAE30A8AFAADA870D5C237E912E1681CA1
7104C53F3BED8715D92BAAB9526050A158029233F133DEBAC682032E223C5D6D
0411DFEC3D98762FEB755443EC89AF3806540A573209DD5620DF088083FA2F5C
ACB9039072733BF1C29CB1288DCED79856118CF6C40BE78E0117DF5900FC8614
56457D670ABCE6087FC46E396E35D9A6FEBEA087DEAC763C8C8B65E0067180F2
305B9B072AE45E329C077EA6F08BEBE3B7CD662A8FD696EBBE91D8A183E72E6A
0E979A0A8DBB48D6C618DFC328D45E9A3E502F610A23EA80EC68D7F422538641
F4ED6170651D1E9996514BBA9DA25C8DDB1ED99C66AA86D639A4218CFB972755
897ED9304FEC0F08B40B58A8410CE32EEB87224246649291BF4AEF0EBB5896EF
89AF86B0EBAE3103F6C767BD8A01007E591E3F4A560DF83E154B3CC1B26BD5C8
0BFF5167384024140ECD43208DF0D09ABA377A74C02A12BF14B4DEEDE3BA48DA
B114CD97DD41A945D55F173DE8B6A2F4C0816B63C244FB6D16E347C3B0490EE4
3A22E595D28342D589813F3AD4C9C555FD8A00955C870E6D88A5E7E0879FF67D
A1A171E4B62BA4D3EB06D10AFBB0B6389DF8D1FB982CD70176A6B095C182C298
1A7E3FC28D4C0AAE8DC28A0743CBE907C900DFD4F63D9B4F8C4630CCF308DE2A
1C5CFC750D2BDB7F3F595B756DE88D64379F09E0372459C250CEABA7B1CAF7F1
FED0C25A1C31A1B8D619F50B80AD847D5976FA7D447133CEDB336AA3C3AA9996
CA53B38DC5EE8C1CED09F9452CAA5AD9120D8FD53A33A02F02CB7D7D0D7D2421
105788E072F3352C4A761C230D069ED0AE4B5397AE9BBF18939C7955BF20DF96
301B5BB7DB8A5A7BDB1E623770F0E227DE4018726361FD6478681517F497C416
9D5D03CC9CB0C90EA5B542B39A4808FBB364F7482CFBD34C9C7C6BB18B8ADD60
B831FDEE48187554FE86260F220DFDC56D864F7FF8E16493C055888BCD743E8B
0A5A5124AC92D594315E9641493E2BE2434198708EDCAAD77D5C427BA31A346F
D864597F89303060C7CABDCADF5B7F51A1778C48FFCB8311EA2146998B398057
C776D2FA5C36929CD6450B0E24F505F46237F69BCED41C22465EA18133407D72
4497FED0200EA76C3C59C80CB261CF06B6424B9F8B524F161F75529614507BE1
D3B8163E9133951127117BB77041A4C0085376F98866D91E8B28382FDCEE1026
B739E1FBEF62B023F07144C5A278BEB8B5973DD9D40C1731A434D594A2ED1CB3
E7CEA83BEAB9A31C93FB56DB102C33B373F9B01A1E0E8BF4DCF68007B8D6E919
6AE6E0E5AC015DA2A25040F5CD0A0FD89C994C7CC9402740C25349DB06CBBBF0
FF94A8FE208ABCBD4590F8BF7DB09B012EEFA194C7DCED1A54D208589F840811
34AC6F56EED803AAD42312320FB39D2A6C6254C71A7EFD994E60A6FD04FB547C
5FF7B2148CAE37C9EA8DAD0E7654387506B9DC987FC7C2A11169C80A99CDD963
E79046E45325C3581575A0C18280CC55B4E3F98A066BA4F1B015C527BC3248EA
D53091294608C0DBFBB3AB0CA9D7F7BBEC9D0ABB26249E35C852B30E009664C9
9BC2692110B5E800DE4ED76F082BE9D5AE5667402E4C89229B1FF62EA85AF96D
BC0C5CE008180940DF21EEF601C6127CABC571B8CC8824E5C8FF3D6A1E390F93
3449A963AE62F42D13DA6EFCC86CDBA865699CFBAB7DEBF1F33325A9DDC24018
041A96B38C39C88F67A0CCB9270BBC12B8248A58D077FF6B83484DFC4DCFF69A
500CA2ECA06F9FB27B781C4750532BF42D7C5803B56F4058A137FA924ED9A839
6E5D384ABD5D5717925569A953E5143D8D2F7B9557E7932319E5DDDC78E1CEAA
60B9CC4A1D05814C0194B254CD94052A415F76E1767DEBD8A5E7E9FA531A60C4
C3566C477B9AFD13511B0CC8BB4F6C79D6ABC78647AAE0EE9A4F9CFECB1B5935
78474E2129F8FFEFDDB8AD021D93D1FFBF7676013D582F0B4F34D955A6C0795A
2844BED451564EB22A19EAF53E7A8B30754A246A2F41BD5DADE13A9CDE76F0A2
E5527868A0DECA17A0FFE1162F4B61C2576730BAC9ECFA235F215A57FEAF06D8
D842AA57AD40C88CD1BE522D8E831EF6E97C59ACA4B8CFA6CB3F88DBDEA2AD5E
F4745DFBEAF69C6FFFBC00F202C8E3BC26C4A3EA203B50599294439132693469
78F5DB2219F5D24255022A6AB25AB03EAA5BB7520D91E0FDB3502A4D3D6B5B56
B33DC674803B28F2D14DA5FD093F8D71AA2AEE9CACEFDC3B25E7CB23CC518BAB
E833A6FBA4D4E2FE8B45EB6764986565A5FA876B1E97054606276B71318F41B1
EA9C005386E05365D4DD1C3323B850631B32245F01AB8786159B4380E9054754
ECF65341C18B7A6C27BE88E1C54EA8FFFEFDBE9FDF130EF5638F41038EFA15BF
593FBCAC21EB35322792349DC4A8620B09E876B0497F17F4A32854878E71891F
3D20A9D7517DE0E50E42453C2146E264C31DF4C6A8EE6274581D076C3BDFCF12
67390A236B246494DA20C6D6894552D738EFAA06904C04F0D3A9212B9A365A5C
6E8AB9B796AECBB969CD0F3DDFA2F87E75FE8A6447223821B258DCA964013549
7499AA0B63EAE79B4F5353A5891C32E35C271858FD0D49DA76653102810FB167
BD01E982D87ABCDA0F47D3944CB9E3FA19AD2C961D8506C8627911F85D95ABC7
51CBDDAFBD483BAB7878907AB8A308C8B75DEA0068C14D57A2A97EE838091A82
BCA1D0EE53AF1CD61F4D5AEA058F0F8D68AFD42DF80494AE501890F6F48446CF
981EA2BC3D8047EB6C60017B4E5A7B06FFEC04E5A7932BBB8D0941213D6D5DC0
2FFBF92FCA773027F80A94FCD14F2DC5517F223B3BDC1D3EFB4CBD8210EB4189
7B5156543305F3164B95356A5C8393B3C425F6271E3C2F343FF65C574EF564D7
3E4874D40190B9D5CF783FA9A0A4674C819A4F54ADA5653935E4577E38ADCF04
86DD8F32FD78C9706434BEC920EBC409CB78AF13E2D0B7ECE103DCD805A2F494
345A2015BD9DD252A76A5622B5E560487421B6F03E461BAF9F655017550A0B9F
33EE4FE4C64225
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR12
%!PS-AdobeFont-1.0: CMR12 003.002
%%Title: CMR12
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR12.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR12 known{/CMR12 findfont dup/UniqueID known{dup
/UniqueID get 5000794 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR12 def
/FontBBox {-34 -251 988 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR12.) readonly def
/FullName (CMR12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 11 /ff put
dup 12 /fi put
dup 13 /fl put
dup 34 /quotedblright put
dup 40 /parenleft put
dup 41 /parenright put
dup 42 /asterisk put
dup 43 /plus put
dup 44 /comma put
dup 45 /hyphen put
dup 46 /period put
dup 47 /slash put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
dup 58 /colon put
dup 61 /equal put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 71 /G put
dup 72 /H put
dup 73 /I put
dup 74 /J put
dup 75 /K put
dup 76 /L put
dup 77 /M put
dup 78 /N put
dup 79 /O put
dup 80 /P put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 85 /U put
dup 87 /W put
dup 89 /Y put
dup 90 /Z put
dup 91 /bracketleft put
dup 93 /bracketright put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 106 /j put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
dup 122 /z put
dup 126 /tilde put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9C535A5E57376651
F6823308463DC4E0339C78699AC82C769542FD3B410E236AF8AF68CF124D9224
FD6EE92A38075CAAF82447C7AF41EF96F3ADF62F76FB425BEDE4C4124E7B1E0B
8BF254D91912D3A99557F5427907A56514C5A3EB961B94112077FE9417B70DA0
B2E1C1FA3E1D6F01D11F640CF848E45BE3E205258E64FE36AFBD4DF4E93F6B1A
966C8E7FBE2CC8FF43C1F67BF6C361678B5E90F4BA524FE8A4CAD6AB28183E6E
CA6C9636E884845105595A2E40CDBE8D4807A81AF4DB77B31873FEB221BCADD4
2C4669459704CB58A7BC230FC59F867EEADE660E49AEEDEEB042BA9A7DD8193E
56C3A36A1F639F7EA512EE4BC6992F52C2FC82A890EFDA730105B0AF7B819295
EE00B48F64C2B5BCB275B1DD62F289CDAD4AD9B7EF057684642FA6FA6322C277
E779CAC36D78F7779CB6DE12638B3C65B70C6B5F8A8C6421A379719B8DD44973
5F52856A4A29B2ED37F2B1FBE6EF4B79B7C0CD6395C756A00FACD763C235914F
847D1D99831023CE1FD89EFEC83AA7E313131C0C197248605EF5BA773D0A4000
72F607551A8EA6F0FF19441ACA179177D1FF7B423FEBDF58B0C19CAE3C10EEF6
3538D8FC4762B77C5AA023A8186C40D0365A4487DC3564265B3DF908572DEAA2
57E29EC669DD72974F806EFF5ECAFA9ADF1F9D2A63087FB7BBD100F0F81C6FFB
B1EA1C9DD46548AEDD147EE64B1B4894972DAE1DC3E8569D6A3CEF9F9E46DEB7
547E10BB2959D374A33E47C58F1B20419920AB485F166062FCCC08EB5CC9AC88
F388F0C0155027B727729488E44CCABB7064A1432E179189C4627453C5231535
47D1F2B8BA43069696830CBB6E5F9A135CF22D3D1FE490A3A63C088EA32FF444
24A2427BBA63033DFE2E06DF8CE67949B6AB02F26335A376B57376814D2A7DE7
64A4347577EBE9A6E33DD2FC214A09C6D889C8FFBF1D567032548851B8F97204
49E215CC7D222F593E1EF1439ED60AD922D41E0E9EFB5CA48F2FEFF75AC5FEE7
FB6676D8B8D4DB6885FBE8B61B586313E4DAFB09D94CEDC0507E93000104F3DD
F83865A2C6F6A7DA8562BF86F5DB233CC9B53391273A1462E40876A8AC2B098A
DBADD5A160DEAC061F86A5FCCAB495EF8A9D121AF07928EAFD56F618E4EAEA97
CF89A3AFD406FC9DE1E9769C1E1EB83BB883786BC075EB5DA2692CD59C4DD7C1
7FD2FF9B18AC740A390C1DB38670DEB18C67721A1DCD502FE7368F47DB4281D5
459B3F020595FA3B10544AAE9EF786A0645FB7C9BB29D091E1432CD878A05918
1665643005BFD9A4B0FFD347ADC84CE22D6F9AD4EDC05E8C7179DCB360AB57D1
6ABCD200A4B4AD56825DC345984D9A3DE11CDA5E9EC1E5006EE4181E4EFE0846
67D8C27BEE8F84A1E01947E945BBE988702DEB2240C4BED952E433E5305484E5
71965D3DE95C4115FF78CE9EC18E323C599727C8B93CDFBCD1CCA780DB8C81ED
C4B5E596E1603624308972FFAE9A57B0EDB51FDDB6E23EDE2946F61BEB241345
2A192D8CAD53E823D687F9C64A70A4B4B703291FA6317C051DC6A44BCCE0288E
3839D726A8F2E39BFF429865E95C726E808E02CD06F36C1CC9AC77999F8E28BF
CE9D74B699CA982479E9D0DD98EAB24D29C981EF0349721D6819549A39413801
F80182D567EE316E2F0AB208068E15693E4C399A381BF9BBA625E597E6E109B8
16F3A84C8EC92F2ADE288821092A421A8D3B907048FE947230810F0777EE2542
29A3485223FEA079B359034F70464DAD2F0E420271A4E0CCF57A0ABBC20AB327
0CA71B292126D395E0D083B19BEC6B48A9DE2BF470C3D01A8C3F52075BD4BE02
A0C518355814478202FD4762EC542F8E7B9B1F7824F0554660CEB83E35635E1E
DF0D03C94C903ECB36B4948ED98B6324E0094EB1DF70863142D4ED3A932D7346
39D69F8F044B6084482D7748C27328AFD24A3A70B99D1F7D32CB984488672254
28B6A9E9DCA2C9FF6A1B311D72413404B3CE5428BDB7FF3C36357D7975184F56
FA6B32AD54C37D0AF7576663AB1397B80D4E998F0B4C4F6D90B483029EF2EDA9
D4C4204C1546EFF3100629453EAE01918D09FE104E626ABA38646F17B6A94CE8
116BC7A8D9C319434CA5B830859B4164DFADF1D7C3ECA5C78D8DEA930EA4AC3F
59DBBF3148C91A2E807FB934E3439D4F67C6DBBA9972854E6E3688E1E0A34B74
482217CFE031CD7B5DFEF727C3EF8DAEEEDA08F4C90289E62FB2AF2357EB2E45
4BC547980FD479101FFEEE477AAC6268DD659E8DD9E244676FD3C6909713B71A
323B211E571BE711D103FA23B5B9AF077D84E2D20FEE805E81D20C03501F0F17
C3B081946CD0FD577F00E50B76CC37CFA97A61B89C25DD43911B28857284BEBB
5BEC61FFE3A14C64BC5425A7A82326617F6F1FA4FEAE56071C9F559F91568179
46369B394A5CE96FB7420FF8AB7C61CB83492FA5AE4A4B0799578594C9EA67E1
E54498AA5CD6ABA34AD3417F04F5D8D664A7EB39D41E2D17643CAEBBCCD9C38C
C5C9541641A09335EFBCE0D276A54253EFD68141807A66F1DFEB4BEA5889FFA3
4D20BD52012206A9F8D3E0F6AFC03FDBBDF3E51506EC6336E249CEFB571AB84C
BDF8E471E3795C04E38A5306BA6D450D72E50910D1AC385BB06CCD4B8E433A32
5A4B7FACC976BB31FCAA1E62DB2C4FE06DDDE7367930E336B49F47DAD91C8735
9A35D80CA2E117E86B52E41E9278046ED923454989E48610ACB3B1663F197117
52659A9D7BFA561C7ACE0771794FC778675F83C5EDCB132AF124C7E6540A140B
E0A268836C73A3C746DC964E482E63C56C0D396515283970FBFF182F9F684FE2
655FD8F5D057D22246DDC3FD11B77552DB4D90ADBAB77BBB1FB1592129DE0AEC
F822D7D36E52BCDABBD560B403A5C56C5E1BE789C3AC049318C7FAC5E5861E42
FD66C3C0F46361078D7E036281682BCE9BBF77983C93ECBBEBA9B359769CA442
87FCA1B98F4EEC4935CC93B08AAADDF355C99816453587310F08C50B9BA3D107
5388A1F3AED2AE32BEFADF0285DA90436D1D7EA85D7B9B6DF2AC4B778CFADFF6
6EEE54D1A1C5DEE3CCA7EFF57A7C2931933CEED90CA26DAAB45E4388EC4DC366
B9E88518D6CF094861D2A59282044CC06E63EFB390A6DF4BA5EAC7CE39E1EE03
3D84099F5BE96612789AF3EDED07266EF10A0FC23EA1EA97040B6BAA63138B1A
A9CB8F5DED781260962D7618EDB200C3ED976033E8967A8CC676E9C11F74BE34
343A7ECE7EE97E8F76F7E95517A6D6163527406EF5A669535CB2BF4031F29046
BB2D0FFFB47A576F5EAB1D00A582965C56F28C00B3BB7BE2CC8D8391F789070D
775EB775437F0CD53DA840BB3575104B63E4B0BF14E3F14B320EDEF65FD4CAF5
8596DA491BBCF3153DED3B718F833D106432DF8DB8B8E6B34D5308C9010A5DD0
7E0E53260BB84BAB3EA748E8D72F75901604F80F4416920D69B4B983DCDB72C5
E9928F01A4A85954FD74578AE336C782CDF81D1EB7EBCEBFBAE7ED8AB4862584
397928F502D65139CCD582CF0723C5262EE54B9D2B8C39614652A8A90E1C3B65
7D26B99DA298FE4B9A7E98848F619C9BB4FF9FD215B72F99506F06355B332689
37D80AFD9F9ACD8172CDC51FCD3A759ACA0F7D4EBB07840840EE42C2D5B8B257
2C6DB3A7657B75F2F0B9730A20112745703E2D0FE709436CA6A5F36F59E64D9E
37C0A23D6D289E1AC1DA273872F5FC5C3DA2B127F078A4D7AB3FD7E124455817
DDC796D54EF26A1FBFD539D3A21B86DD4477DA49213259ABB3FF241424F2BE5F
89151E02FF87E0BEE26E85C0E518D8BE7CC9214B8E9A9EA1DBB49C6C212CCF08
90C0F23E9858947EE344062EBD9C574979087439975EAD4E85CD7BFAD3C91CF1
EFF577843AF1427D06CB2F3BB519ED1591974218C43F0D2038665F9E2E3960B7
FE68CD3CB2DB6B36C7997C6B21EC11CF1DE049541001FFF26D14C255E3AE862C
5A5701292FD2FB3D04523D6E2F3547923BB117718DFB6E6520F0D0B5450C695B
8C9242CC8671B7284CB2E1E9EB097A3DB1B4D5E8EEB93B4DC7E38C0A10474665
54DDCBAF079B92EA494F6FA75A84C5AAFE280284D0823D7C22249A21044BB0E6
4062074ECD17B62E03EDF4945A294BFEFB51F5FD870D9D7230FC91B83C1D85A8
86CDDF326FC90E04362145D6E8630C50594484FB829DA18F5C078F2EE67D2F2B
08DFF39AE2E8C9741FA989AE494C7166F122D2C5F71B97C973B7CE8500E9F87E
D59C30F2E99CC4D34713DAB680598F41955FBDC26A14CF1E73D6BD6B9AAC8D3B
B998F2D0D647356CD236DEAD6561389ED3A6746221B0CF15D6648412B35A6B54
6A0EF5BBB34AA376D9BAF025BFC650C1B74333CE85413D0EBB2F4D082A26A5BC
3C0A25D2B12CB159F140E00E262F1CFECCB2C802FF94CD34DA0CE9B4B3830FB1
DA85B9B670D5169928990A2E9CC869891CA2FFAD9774E6B92549644DAA5FE00C
A5BE4F5FF91A0B6D2FD8F96121D766391EC4ED3E73DADD476B7DAE1A50AFCD98
DB7E27E44D30416088D9BC07D4661D9ECEC0806830ABF14CE55AA3CA2DF66E8E
748B8ED46466F1EEB072AC0674FE6FED231E0DDA59ED7C42BC05EF00E176050A
C4834D893DE42474EA20DB1E25059E84BD137EF65A02CC295B0FFDE4CDE95879
0FE88BDF2519ABAE7F8CC3E6386ED35E04A14F1E3861922645E3A3F43B48A5AA
1999A5EFE192515FCC625C829FF5A7B337AA422F5E920545F9BB269C869A821D
6C4C26DD2AE746EF0F0B4C1E7E9871ADB5270E1CA9BE28225F7A0370D4C52422
E25263EE101C4EC1C7811B05AD42F364844A56BB91EE72FC8ED53CC6954D2BD6
F945D739BE4C61E36143CE890FC0CBF2F610018D678ECF7CEAB18FF5A0E48F76
FDE2463D40A99380D679B3B76D39C664F4992D23E5988B0D1AF33DFB04894016
E852EFD1EFFE586153C0F31ADBDBDE3F73FB49C5EE64D0D02E1504248FAFAC3D
903FD44679BB09C30288139B41B1E90A10139CA3172677250B16535A1F3E5E4B
6F4264DE58896E66051FC677030A121C5A285C47B6129CB5A3998830CE070D21
2F093FC1B44089F603A21F45F60960F134A47226874C737EF6C085634B0A4A66
139420501351F737A73F39D960EC38420BE46E5B09D298E7C16B8E32F01507D4
0141FC52DA1DE718D634AD9C8B00E46EEEF84356759324D2B9A3473C5DA38DE9
E30182B87F91B6A7F7BACF29A93B44C879CCDEDB063F9D2E51E0F1FC9F018FE1
2433D85AF24B55DE3A61C4D0A2DA4FDE933F5F6FDF17E9FA9932BFC46E2D71F6
585EEF5B2E4E89E797A24B799D7F064DD1A817A53677FC9EB8CC3E7F93FE50E8
D50E3191052943FD6C98B573BDD1F6D70349E1F8011599E3F8FDF1D6E80A710E
51E434E85801617C6FD8ACCF1B77B4BFCCDD35CB4C0367F4EB4D8D9DE8284D5E
B4F43E2F8320C2C5A9AE90ECBA7E65D377E91DB69FEF27069235366AD3E126C3
A73CE97F4C90BA00D206FA012C327FD69EE59AF4470A315B1799CDC0539BF90E
512C8FC3BEFE4D1B01D969EA9E3FEF976CD6E0FA4C9ECEC955B265CFD58AB8E5
F7371E479279EE14B689269205C5B506940606CF3E24A1E7EFF3CA96ED30AD6D
E243DE57690C3D69A401AB3315FA49E4BF4ACD4DD1CA39272533E82EFDD508E5
1C2CD286CCC5DE1202C7C7F654521750632EB637F918667E2233A43DF75239EB
F28F3129EB5DEE2FC5BFC331FF709B0FE9B327CBBCE98BCA2C861C6547E50407
1218CEBE6EB5F9BABA4F2E11BCC6FB553A544A567B459E06375102C69F8018DF
BA6A227CFB13E2D74E6A521E01B74F2963E9A0A1C9FD87A88EE6356E3BFABF55
BABC751D2BF85E6712E8EF57914920775906662E4BA68FFA21AD422D34E15578
43CA0568B431101A1194F8AB1EF25E886BFCDFC10F4A5EBD9530816548BC298E
AE4A0B6B52B8B59C644C409B4191B6F4203F52314F2675F02AEB65A72C66E92A
2AC703E15D8D381522C0AC30C165B822A9B8D18CAECC094EDE020756018DCF51
D0701B507519C4270B70D8CE94B436F640C15872F9B5B77892AA3D110E4D6A65
8F0815C61A5127BA25815378683F46E69E54A391A8675977E7DF9C2D4E6FA991
9F029E50CC2F266B31EE9F9F24452D5838905F330CB7E416B8AF836C5AC26AB8
BE2ECC6EA4BDAA08C30995709E225C21D35DB6369167602CBFA8DB2697635925
969002CD1BEE745DA2E56C17EF3F0C05E3847147F86963C37A221C8827195A8A
3D38993E4939AC915BFD9A212F5FF3F826F742B952018986F9FBDDB69C3AC65A
845F7F33C55D4BE60A1817EBBCA7E1538E8087E1BD5C083A320D52953BE65F31
E8339C612A510B59CE48D2EF7061560C4AD258E7DC59694493E3AC878246F37D
6DE89253EBC8830C6B209E818213C4AC4CF1F391AD91D57BE76FB0E2924A1407
E4A949C905E44F54EAED6419F13D59942C8079336A172D4758BEB5D3E786FB93
3CBE4FD2EB53E4E1DAC34E821EB30FD44BC6CB4298242C38F848FC23AEDC9733
52BE6F32E31E25F18301370F8936810B0566B664B042C7AE0D78ACF0A87E5BF6
F9B66E358168B2CEA30DCD940074F3ADB793CDB136161FE2522905E87B8E463F
95D4DAB7E14A3DF7BCCE8141C5A08FCFA2BCE9F2D1B05A7642E75877EB840149
AAB007CD239AE47AD115929427717F219B0A8907F0EC79ADE1B901DAEE87A2F8
39361DAB43DFFF69650F601B24061A9353CFD619FF9626F63275FD09A5B13BB4
8B3379EC4D147C41197E8387FC04DA7BE409524CEF74EA91DC066808A7FD0EF3
957A44E2503EDA67B1C61827479486134E922E560A673BF314D601C66003CD07
55569085AFC8428389A140EB976CCFB8F29E27587E46C413ABE2EFB51AF5913F
53EEB74063162E0BA1E24CEDCA320377D3E11BD374F0B44E132A5C35835B6E2C
D32948EF9DC7931D104C1385709DA882DED6458319F21C2329938396BC074106
CB9CFB9E0A915F8DBC8435F386917AC87A2BA45D857EC30ECA66FB4044F5439E
CDD556B82A0E43418D179AD883C85AC276E1190CEC242E3E1D86E725ADC39E46
BB6C47FE9E17E29F8EA81E870302A00D91434F3B7A05F243176E6EF1082541A1
B9052191EE5C2B8E94A2E02DB65FC769653CA8D1C07A13CB853544AEC7FC35C5
218DE3128AA31952DCE19C55C23FD69BCEA2C661F57B11B8F9E86BFA718D1521
3346E78C701A5E51923D6D937E62FDE3669B214D240538F069A100A542720A86
31DE88116DE775F7ACC2A49EA6C02A24408271A846990669F2AF60AFAB4C16F9
7F4E88E917F0FFDCE68F22998AC0AF2A60A73258C3A4BBC42A2F918123128195
196D0E150D79AC3CF4628503D1F3FC528265ED8324E56849A47B3B07C29940B9
1BC270071E221D355EA51E9942D3BD7F99816304FFFC8F5B036C953B38759341
ED5D7B9C8E6B70C409DD8362FD291201CC385E4A98D73E8518A4C0E544152563
82032FBD2FCB6E403D34B85ED4053A8CB619BDD4DE001F4C3007B1F317579651
E6D6662189CC2D95AB85D7473F65C5D7B4AC63B0FE928F3400035D5A9D443D0D
F3532B99F3AC26CB25EA3CD64C341159061E02EFBC7C033C05CD919BBD827A6A
BAD2E141C0A7B647030FFD1FEAB8CE703C40802E0D32EF0DF87BBD5131CD110D
BF5A11D66FC2087779FCA72E245C6BFA23F60759FECFDF932C3026D4CC21D843
9789FD52FD7A85BEDF58DAB6334F4880C2C99F49C0F64025C76E0550BC4B8AC8
5C7E817DBABA0E78F36954E9922286067E92E69D23E9FD278CD5F26788A7E5D8
476DE8E21397716DBA03B23D85CC8B701EAA654C5EE74F40D6C3AA3F46E30A2E
E663C2CC64E2DA3631AB809AE1B70D89F53B1D72088642CD07D1DC4C7263A7EC
9785A2EBF8CA24D40E2C60CAF478FAFBEA8A27A55CE0320FE47E2512D88D1244
95CBCA87983B8795DBE8C15ECA68CDDBDEB167512E91930A7FB226994EE4487A
D1E69C7E7908AAA5D45BE3B0D1072BF1F36C6368AF31FC583EC20E6634FA5777
5ACA6512C5114593C89A9FA5772BD7C4C2FA987C6CF164C2564BD1502C3042FC
860D2A57D5DD11848588A0264C6A7AF607D175EBC791022DED8909929C00B48C
2CF4EC05B43963F1DD6EAAA0506953CF028F59D81B51256DFEE6967960E4D051
03EA65DA9A2CD6C3FCDF0035EEA5E1DDED3914331792901E33FAA564DD27DEB6
C3C1F3E5D6BFB2FD09F7CF7CA34DD96B23D1CCB82A4941404FB4F247E8CE3302
65D8E7EB5B27A24256A5F3210287BE3902AD16F5458B750A7C0B3985DEED5A0D
C238C3DACFCF77A57A20AF3A78C3558CD41BB20473514794714D6489821700E1
D255081FD1D1A34F576A44DBB85A114698064BF763D2EF7BF3DC3E37CAD85EBB
C41891A2B40365497F37FE91B2E624482DCAF706636A4DB342F74747F7086141
0EC68BBC5A2D3F437E2BA990AEF540C5573C9FA424BA69760E0EE2DB62F45EC2
7053C00969FFF25AC4BE6949BDE3A1F7C2E613C15555311F14BB4106E801387B
E962F3B996F60719EE9D2D0DD756B806BED3E052A3AEFE4AFC6D39E19E56CE37
1CDDD6C45B3D3DA2E17BF3FC32C48BD9C8DAF11F0FA61EE27AE1A9E83B6DF1E5
2E0878AD16693605F32C796D329F4484C9C12B05731C75016BE4867218603797
CCC5A77B001BE3C5D3C9535D3FF9FA3865686B871156E4E7977E35F2FB9E1578
CA4998371D169FA89868807A347ADFAAA1B499863400DE1CA2C219C962D8FC45
5ADC5B6FD9E9B76EB8D70421893C0A798C85909570DA18D9BCD147C7E33C1006
36A21CE3BFF439A0230882F566363823AEA449C27CE7C8D892FE70146469CB7C
FBB21B58DC0D3E90A6C1530326E4FD61DDEC1020214029FAB7D8574C73354231
6112497B5ADC5AC2A15D3772FC82C4CCA8BABAAA4B68980B3F21CFADA0551FDF
4D81200425FE2CF281C171D21A134019FD043D36430A5AF52AFFAB9E8A125A2F
53893D7AA248AABAB16B7B89DE4431C9C6DDEB46341FAFE952EA07A5014286AF
795F2DC6F144C39C1F3B4BD529211E13A70609F2E75FBB1518D06A1C440C517F
385C11455552548E1178CCE8B70B4C4C6CDD3A0E539C045BD9E887D0DD077AAA
CBB9DA781B55F06AF3F98D12352E8D566C61AEBED43542EAEF193708AA45DEC8
0B69AB14B3E2911A288058F210B9B039A83CD7CEE4D0689A38E662FF8ED4439A
8C6B420A3FBF4D161D2DE9AC62BD1D860A54D8E656428BCCEE821966FEE0077C
E211B839732AB77C9514F13F74469DAACCF7FF8AE239828DD51D47AA8AE69916
2D80573815A1566F59DC952DABBD43C67F15C3C456CBFF4D590CEB14EBE34DCE
E7982ADDE0DAA082996CB2D4BEF6594ACB0ED92FD55513806F7722B11C13984D
FAE6EB76BCCB23A4915F2DB64FD8C9108C7F89F34F2A756EF8E3238089707AB0
FB5A58DFBE2C3D29E4785389A58B7E154975D9CD845430AD253EE71370CF3144
864A4394F24BC2D0B2C12B879703AA37AE9520FA27A0EE12CD089033A30E7102
754E5BCA845DD2A74AADE8338678CF3B4D0E2821055C8C0924E732A7F41F2FEB
433606BBC7E43784316BA10EF139BCCF816590EE287BBD3CBD188F380EF476BB
F93262B06F058C4FAF1D51839860F163C620E4A3D474F1AF88270A92BF1867B7
52694104FBCCCDB6CBB987EE689DD231A1D39AB6BD97FE20B2B65BA02EE658DE
7F86E6B4EDA559718793B367ABFCB6E147909A816159FE45DB383F96D4F9F90D
4AE3A9FD8246907C1679429A6CD169A240957CE978568889481BC3D40F96597C
A7E2DF4BF68017A3C6231795E7CF5D0860AD55F3A55AA3EC43FACD971DC477F4
3181FF675969AA6320A4CEBDEEF87161DE49A2379809B57D4BBDC5F34ACE5645
590C30801D4E8F8069EDA3D3C6695B01201975156BB61D85C89D38AB06EC44B5
FC6F7769F64C9C223A806C622D0CE387484144707A758CDF973789EA6854D1C4
E218DA07B75D78223E6262915C42AB85E454DAEDF97434817DC0B310D6F3E4E7
E7432335DECFF5A69D0DA22D0C87E4AEE1A0F922FC8C2EB5B9AB9E310EFAE4F9
C6AC5BA9FD3CAEEAC6BD3C4024FD0B80815B8E1ED07434256C76A0A1D022D4DC
62B60CC089E8FC1BE9DC67F1EC8151A5AEAF1CCA59F61712B8AC325038071D6E
4BD506A92A32E74407455667C8D363422D6EAD003AA55866D5F8BA74FF1CE533
1E4D5416604F0649F7D3AFFCAD8FF61809A099AB839D6FD03CF9E276287EAE11
F94BD1C27072AA04CE6A3831A75E342ABA9270F3D462F8FB5EABA467470F0DCB
3F2A2319C350FD028726BE50AA44C469EADE29A4BA7EBF07013F528E1684E590
35CC7DA5938D52D96AFCD456E99815424E27714B4258F048317F042FACC62E0C
F8C78F01F35E722AABA05CF9FDD8B066B9ED278C8B29BBA984ED2E7C9279C024
6220495A3217ED890E97D8A8B3DC0916C5043D27D2F70165A8DB7B3E80DBE7FD
B821242BA2721EE31A097768391B002504DA3BE23C91D4C92D5C859579C1C733
FA2257F96211873939EF8EE85CFC0B5057643277A7CB0E140061BD79E04412F4
6AFC443D92341037DCDBFEFF6F5B057E35BA6A3900CDEEE130E1449E6AAE7950
0C42290C6BE3B9DEB4873A2C0D0F8FF1738E04707613803DC3B7B2E2327871A5
45C7F56DE8FB10548593C75D3831B94F5B21D8AC28EB3315A98F5BA1EC90E0C3
A6CA736856B0EA60D15B7579A895A905D016664FF376F463FA1EE6334702DEF3
2F1B69F93C1ECD63166851CC7FF7DA2FBAEFDB08C7EADED30D98029BE2C4B92B
B3A587B6F38BB453AE67DF4BCCE693BE8F230487A609D94005B1F9561A51AD79
F909DC1249B22003CB727E644FD4E2383A7201B8E5B3C77516FB8F1768C48714
CCF06E68C368EEF5CB1B0ACB271DDEA61CE762A8688E039A889BB08FC0F6039C
C58880C71532EE28E9EDDD2584C2824EA97856D6FB59BC8BEA32180638AAB2F3
6735E5091E65E1BC627DBE5BA46E054CDFFA2BA8E7B080F21640573149EC75D3
E732C9C2D32D004DACECFC132D86039C7ACD44789800D7277C2A54D38CEDD928
7C9EC51B51BD2F4841144E5B06E3B55A3AFEF7F39C54C40C9F8084F053F640ED
0A1B76873104DB18A0459261F3EA4A509C85C7124008BFDAC5EC97BA266F6620
151E4C731B7DCEB01E35331CBD08BDDB211E934240D293E1442FBCC0F98D2A78
104345D18FBDBE72088586FBD355E43E3A6B3A638DF5B3A5C7C31023F2012934
8871F5B8E87C2BD52C19EFA7E4AA3A5336AD64EC43362C4D4978FB8CDAF00025
80A99600BF41FA7CEC48DA59F53AE1F3A47B4679B47FA56280A06188EB2ECE51
1C164D48C35C6F6DE4CF79A8304A7618461346ADE34592819CB284A01F644C9C
46AF5D3A672B362828D140C90EA4C829C4B27944B7937FEAD42E7B8A422882D6
FDAE8B38CB0EA3EF7835676AE8CBD6F0349555F47B358B16D47213647EB85971
6C9C34508263844EBF130753E278BA6C86CFC0871B6E6DA8E3D55DE9B1358F37
69BF7D7A74C0EDBA42A9061A76ACD60CF2368862690B53DF650CE6EE7A756EB3
1AB915CF6643A739360229CC32C5836C68F0422F74D142CF16D0D2B5518BD64B
0E05FDAEBCFE7617EC45B22DC2418920DF5520AF09401DD42CFE751EC246FCE9
3F3578AF699654260792D87F62511F6A04A4DE03A7E7F4FBB9CCC9151B8508FF
29BB17D908B6860F3586369E90E7D6D1E94622DDFC4688A4489279CD0076112B
E48FE6BBA3D97DFE47020DB016D19B04CBACC6A380456DDC2581174B81AF6B1B
ACC722927F291245D1930C4A0F28B8D6E8E8DA9FC756803789DB8B9979787A28
53A8C86FA4830CA59A72886F2539F2EF5FAFB022AF8DFCC90D71D1F2501BB248
9259F22B986825ABAC96E27284FEF045B6626E55CC4903CD05EF96D6C3CE0D20
2601CF50479608AC503ACB6592E671AAB616EA097DE54FC5F6ACAB07941993DD
65DAEDD4A708540C20773D00F0A2B2D9F4AA3CAB1B1B1CA43B143D30DD5932DA
D733ED999DFCEC433FA6E65CD7494366B389B0CFB074A5B35E36A77724C8F143
4B16C466A8927A8C4B2E1DD8EE25C425EBBF828967404250F039EB457E912CFE
C8692E45969702BE1FFA940A5C43B0B2D7E07654A3CC02A27EF016600F0FAED1
5C14A1AF688B03B11D73D6B34800DAA94B799A40CEBF29B5FD7B3304499B9B19
B4F1276ECB57E417E92E65C9F07E79799E07FAB3904795329DE57CA5311AAC0E
D16F766A52671457E99678D38A8DC2061C73020B61B436917BF04A01A044CCE4
268C9367FB83B3460795C33A8370C07FC83998898B53A9C95CE45C6DA472C3EB
FCBD5EA042D5A87FFD0D722C607440FB086F88346D8D2E044C0E80FA60B88AF5
931469F88C2A49498076D5E2902B88631FCCB80B43C974F8777A3DA4112C42DC
0A514B65113EFF38FCDDA47DB2340C92F62107197CCFF8AA38F9E7D9EE252AC8
58768CFE5E73CE5343131A37C957199F0729B98DAFE8728467B60E44CFC4A423
BCE1E4AD32A511351CEC823E76463EBC4F48E6320331984CB9FA5F4F423E692A
5E2574B5D646D9F24063FE8DFE6C55B9588F8AB1DAC62C4FEB4E867D77BAEE74
B412CC4EA5B2E2F8E0715CD27EBB731639A67892EFC55741942C9F416F6D7CD0
028E3785E111CD69530E75603173125EAF8E55C076EC42F6A62EA665AFCE8CF9
D6E1E939029347681BE1D926C7BC1612CAF603AA81F9A914FB67843D32EEA186
87B26CF250D9B9E7C0F929054888A59A04E0BB820A01C92687F33516D0A9C9FB
B6F641CB6EE08B5F266D50B095BBFB69525AA22894F255C5BB62277E6A893B0A
EDA1815175094B233C985ABD67BF2FF14BF1624A1FCC98F6743D72E59412B8AD
4816F184B92F05553A3592854FF367853BBCF7692CE67DEE035EF7522B4A1BCD
5C57E8A1F17D73D22869CBE701298DA567559B187E097D768F073E2E24295E48
3F7E2F875F6CDA6EAE7B99BDBAD8FB7FD199E563F624834828245D92FA93D172
33187B09A88D68E977A9612DD3C3E98EA381B074FE7807D55F15E11E17B3E0D9
491C396B08E457BE709E4D3CF141AD9EE40EF7B3F548BFB9498090714935745C
C605792D7B78CF1B952CA0CBC313C262527BBA311842802FFA5B0BF608058F0B
583B38512CB734F839D11A9D53C18C34DC047C68D22DDF7BD81D0AA817B3BE19
7CEB8B8BFFB259E8278EFBB5F59BFA6AB4C8A1B9974F8724E649F9FC87745CE6
88C7CACFD4751868065EC2BAD05E0A01510CFF99706ABA6BD0E8B75A560921A5
31D337B596255FDC460E352F0263ECE41192571080BFD3C85D3CDA764C5DF2D9
3B0A6A79F19FB1AA5FC5BB1DF8B3444316FA16E57262A20EAF515A15633C146F
A3FA754053DC0C80206A799AFD7BF7F79B57D8FBD5ADB2BF0CB7D44C165910DC
46C1A7586E74E6178886A28BBE9F50DF6954D5856479E8DF44828F6AB20A8F99
F6A8245B655E13E9BDF79B61E53EB44127AE87CA914137174823ED92B11ABB7E
9E0C5C63F4D44BACDC0DCF6CBBB2554D8AC3F87F2EB9F20411B6C143939C282F
1BAC4F5739CA4949447B6899932D0CD2DCC99F389ED467FA04C357F8AA288A46
9768156E1DE908780A52B515C442770164B7FD146BD1761635775F84E59D66E8
A5ADC40CE823CFD5D37E5F6CFB091AB78BDF6C0BF2FE2A54C96EA7491CAB7293
0F84790E1590546CE36788E91FA554F04BB2FB7A89F0BBAED1C9236BA0971435
C3234CC55F7A50F338BC61ED34EB625623DD8F34643FC7B1B7ADB990ABB39FE8
F59B0BC172F83C554A7138923B3077A0004ADC7B5FC115437DC4DA25A1CCECAD
5056F249BB53988B7C7BDF78C361C108C0B9C1456B0E117C2A88E95825606534
6E322475ED876679655BEEB8B53FACDA59CB1941131603611AB83A76BCC692AA
C3D44BBB36D45F23A5A65B24A55442716FCD3A846E4F0B7BA8A1AB88C0B9545D
3EFC4FF47091B5C6D79CDF4FD1CF2AD503400BE6472C9DEDFB6B953069EC036B
6B7744E38397E330DAB37ADE87C03A2DD1708733533D026961D35477ECE4975D
697EE1C17F91BC3BD942A57D218C9E852B56838D03D9316548B9A5F30F510C11
680F910CA2737E32E1D4EADD7A7E4FAB420C924326566569B73E2BE303CC2DCA
EA8F2F2E5E8CB11A76E538B2B95A0B453B3483200E6EA5700AAFC32593BFA835
21D96D77B43602707F1695F7CCE9A6CC520FF3C45BE297AC297EB7A06182FE5F
49C2C3F1FB9C07CA595CE1EFD305B0E1B8301F460A1A8DBD77AC7BF20ADA35CA
9FAEF743458DE955F2FE4BB8F1B5DBD5582C6DC86928C646881C8A529F4A8A4F
187C702016C27931284E79755739FD1603DEA988B759B51CB2E2F10CA10CE4A5
2124ECE7107900E31E28D45AA480A26FEA0AE852A59AE4F2DC8E962D516AFEB3
D4AB92D53C85EA115405B536781C29F1F28BAC45E748552DCDD277A258CEF78A
9C6AB472D11BC4E7905502FB01A5E50ACB4FABAE4C79A07B4DA6AE490262BD80
99F6AA77980FACE593AAC3926D49D6F8CE800EA11608C4133993BF5ABF4DF238
9F4CEF312C98B78C6D731631BABA2A6173AA82D9C875A68EE5E01B393F55A10B
C99E7846EDB40AFD5D19FCE99AB63B387B1F163E493A4CB69CF4A945BF7B4699
020266D1F3A4C14E7D4D9BEAA2F089741E91C3B696F381AAEB0E5E4CE1FC2BD3
62E035C14F4BEAAA65CF23256BF3AC755077A6D5E3E2D6BD172417917045DCFE
543987319439A07B9C2E8412F7E84B799C8E6C874AD43A1C50FB10670F2B70BE
9B93ED2EE420968B9091323319FDF7E075D8661B97FA7D492838548B132EF866
D74B554F453C0FFFAF0BF37CB3372FB5AED49F2DCCE16E2688EB4BBE90035F9A
240C56E2128418C9FFA4CB6546E41780130F1091124CBA7384EC1CDD3CB5CC0C
DE9FA5C39612592E419240A69557FDF953229C1467B1911DB5EFA7798873D2E9
C085BBB09884EA68094CC71AD7039A3E94750A0A3C8D19B3C40115E1F852DF99
C9B53A45BE530B78CEA183F957AD5C2BF820972BFD794140C683205DC794DDC3
4C54FE946D930EB6B72E3C475A730BFEFCBD9CA194A47D378BFF37311E433237
8B00CB5617F2979069373411502C1C95097CAFF5801B5633940180991DE36389
5BD427B0D3AEA55A9F6921E4FCC75567F4A1ECF9F7B17286AB3BBCA9E984E9EF
C13B43D85CA1410F0E0FF804B70BE479FBD5C4AB01BBD7095E5A8EB1E71AA5BB
2D0FB3FCF55B69E5FB481E0B9E37EAFA37612D2ACCEA504FC78BE9C8663C124E
9E5C93AB708158E8C08D67BB2A7D050C70F44BDF230A94ED0EAA613EC2959EA5
51563DA0B96A8407887D93D4D7BFFEAA747CF84BD3AA70839C4B8DD2636431A7
FBBC6C95544DF9126EF439F8F8AFF9D5941A62C350A1DD230696BD1543267C94
FF60FB482B8241653B3F93AA7D9996626E6F148E0EA3A6A2170DDEFAECEAB278
C85BFECD9AB4906C5A49F7C003C4373987A5E2489BFF139F7E4450A251EA86B2
74AFD9A603FFD82418BEF87D2EEB8D070E6DB284A7268BDA373588CAE627F530
E4A6312D0E5166DF29F4DC324F1D90C07AF653803B3DEF14BB00D5CEAA84719F
AA69C49E8084C7FA7CBF6C441581807603EED37A2234746A1683983229EE0ED4
5EBA76B67029EFD92567B804B3F6BB3BCC2309D4EB115C536BDF019DFAFF6479
324B4A6F27F85E9A79C471683C32DD26389575A834A17AEDA72BF8CA69B43D7E
B4A491596AA58F173B5D572AB40D1AF3700D467E7D50CAE8CB01DF7C727F1205
3815016FD0DDF81B1AF92E440BE41AB509BAA56C1F7E3C00682917FBDE938DF5
D419F3BAF696D956E4844BF0B49BF5FC1AD7708B54B5EE636FC583686C1919BB
A14602056822C883B071F1CE8940E0EFE71E9BBED5FEA869ECAB7660DE15AD4F
F9D015553E20DA1375DFDD7617746C0E2D6A31432EEC18E9CD2DBAB99184A618
41CCDC17D9FCEEDEFC4F0DFC2DB8E2904768C5C04C8C3A4DD8136E9E7FD4E39A
0E29B712F8AF82189D409AA3372B37913BAF6A789A05ECC5A7EFABB9E31246EA
8614639660254AFE87E3BA5E11F39EFF27B9ACAE20526FB05AF0B611775688EB
2EDBD1FA299FE709A131BF709FA0B5E9B2FF5B6906164DF66E7BD6FF31CCE4EA
35404129B544F3FD64E1932EB0F31CEA6F3CB68A4F7000B546B98B70A1D5CD3C
D09362014141A0E130DA8E78AE2F006AA073D5F6A6B422C3EB903DE4780573FF
BC26E6F0383CCE7CF19BAE0B72454F1F4D848350FE61A99E261E1223116C51BA
0C7BB41767BF782CE5AC26A82FDB377CF29C56BE10A4BC9CDC6FA5B8108893B5
4413B04F9925D95BBB84A6B098DCC8D2AAB1C494011F76070F9208EA2FAF5C29
8241AF078AC49EE68E955934B51D0DA5943545B113469B6B5A89925707AE688E
CF46FC080DD221F3027ED21EFC8D32B67E392BEF8973D984F1899CC63F9974F0
1F43CE6215DE43D229DCE3197C5959EFFC1BA39C02FF6513AA00411E1106B45D
3CBDEB76681840F9196E32BCBA4B2807D35178E57DE1F7E7F31FCC51D0758E6F
580B4FE0F4918289448559E055279833502765D8E6D378F416CC4A88719213FA
3F444BAAFB641F372AC907A11E0EEC9574B26D662210839F2AB4FF3F9E2BA0BA
D7F7DEFEDE4347414B52257ECF6DE74DD0F3375BBDC131D15127CAC2AC13120A
D43AD6CE8D336EBC240694B33BDDE1B6D61295EBECA744E576B4F479CB780DA6
44E77BDA0A78B81BED2BE721496BB95F5A8D7EDD0C712632AA9BCD1D5AB795ED
55BF93C9EA2E79061B2FD1A0BB983DD1028E69C69A0C68CADF6E6C9461AF088D
AA3E763D630EF010A681A646FDA6BF443DE932FE972A27C7FBDF57C5ACBEB85E
EE4AD34C06C4F60BEBC79E7F50D3DF9F8168F701B840006D6C5A6F3F669489F3
3F68B6CB8E8588F80BC4D3040C9026254E2652E6C4CCF1BACD78B8ED0FC9D337
E888FE3585AA7B2AC4832CE0CC27AB23760C163B678B5750359B58410B253E03
586427561D7C129D11C14813498A79ED6E3D8A5CB67F794B6EAE46EC4593FB0A
E2929C4E03364112377F7DE788480EE8B49408C3FBEE7AC8E206FBA7BD06BBE1
21A520D42AC92D382E831064AB6FAB3AB66C81848A69525A3C67F2DE461AC547
53F42A9143054EDB799605D64D07BA975DBF7DE70E8196EB3829324545097089
E5CCD4368BEF9FB1AD702FD5677901FF6AD73A50AA3F14187FC3EDAC7E89B51A
14423632B352C10E69AA927E67CEDED14599E4B435F9FAC9488108EA072ACAAB
2FD815BA33B76D78C9C8F0217C0F69D4D0C42D85B8800D049688EAACA0867338
A3C6FAE2BFE9319D872B7D89B08740BB2CB9AFCDB5AA075D29B63E4D32FC3AEB
C389FE2B155E0371C618CC0FEA818C62921D118EEB336626FE61417091550232
623871A61985269D1DBF543DE293BF5FB4A91BAB7B147B56381556226DBA8C66
EBFE6ECD810FD266BE638D895C58CCCC2E2CD1D8362005F072D80C8F5C1D6427
AD14EF67F73609FDC2250D2BC07C4853236124EDAB617BAB11A3A5EDA082D872
90A5A4951EAA590364690B50C736FF20F85F6A6C8D013F9964AFAB7C872FD48C
79C03C039F6CA2A6FBA42B4340202AF4A94D9F1807BD28EA7D5093F5276C86B2
853B00BC80F2C1CBF45556DFC393498B4A51E97641E5013218CEA4AA5918921F
3DF696B18F68F95D02719D58D9C5E9F5E6D570FBA6A2E8ACA94D036093403E45
EA6EBE9C8B7A746EB76461A9D99482563114E0ECBE8E8245A79E01BD65935AFD
325326629E9CB81E8D93A36FFA7AE8E6F2FE1F188F19A9795B11C93654E076E4
8266BDB5EF844A5E36A61F2BFEA2588FDA60869DE2BCD6B8671C289FF14A2DB2
DF4BF1DED19A7F3FC7F8F1B3BC62D3F145B420AFB002C43EE167EC1BB69102FF
77510A865E724D3FBD1071B630303C2D88BE2B55067D5053CE6EB66F0FA52E2D
E3A6306C0C8A9C5CB685266ABF83C01B6D680377AC5C01AB18A3BE27348439EC
537232B319363A65168A2DA9EC85F184661D19EB984442ACBD967BB959D49814
B7C2583BC17E71C6914F6FF28E43A1CE636B79E1AF4E179580A9DF2365B67857
BEA4554F87DD0B1D76FD3EB9E544B22F88306FBDEFCD2690479C38CD83FA48C2
B1BAA00A6325DF0DC1ACDCA03218BCDDDD99AB7DB5A1F4953B83BFE24D235D50
00295976F9E734B17AEF1B1C7C10E2636382A1C980C63E7CA90A9295A2108EEA
1D132E856271AD2F541A08E1DE95E5676348DBFEA59BE7E07F1E2C0EB8BA3986
83047B421A4BBAC2312ACDE12F052B516B538E820F9E441D83FEB4C8335832B4
49040779BBE0B39A57DAEFA956F2D80508BE21406174323DDACDA3679616303D
AC99537627D7380738462DE9F3280C281EB7D8DD3A0D0C575C80216C62C9BAEB
E0AD7876D299402ECD6216C4FA1362329489E190EA481D52198EEDAF185F69A3
2DDDA2501C665541A56B31E8DD3E4F8FE7D89F96E92C3419AD7447FC4F2E3BE4
9D7E1C4449BD2BCA3C779C15FA1D4A7422D0B8D92E1DABA2038E5C8417B67B9F
293697DE2D554A902C10F0BBCAD2C7759E7C79BFA7781F6BF1D12FD08657BC03
011D2CFFB6C613AAA55A35A400AEB932A45EBE58A54BEE72E41B83C3177BF3A9
CD65F6F13DBD0C37FE2E381A7145678AD46F1AA4B861208210B114F82C8EDF8E
DA0C8CCDEA5CFEA06C9E48676596F0236CE337BF9F59704B40D76A2F9B275C49
9E248A2B1FE7B09E8C29B89F606D085A4C32BDD2E6FEB74BFD3C151A13311FF5
2430DDA68166246AEB7DBACEC530279BF3C39502ED62111F9F0370E887A3E920
11FBA553AA54B494C8906A9982CA9E686F526F44EE059CCEE6370AC9F37D23A1
A69CD0D8420F70AFA70C6882B86705209442B31E99247FB43552EB0F210F2D86
4147E0F6C6FB3685C0AAA7022087D325932CBC1C4AA5A3263B364E6A7D52C6CE
F66229134B578E3D37A875187CF95B2C5CCAF07A0520CBED1315FACF4863E505
E66EF72942C522EE845842DF82DD8FFDB7141BCDED2BF181A260E0D974856389
D39DADA85BBE2D290E08C68F88D7568F0E0233D0ED471F4B6FC8B1F6246F905B
727D1CEB1C3DFD978B6FE6AB7A4D1705C007378639B501CE7FA1A644579322AC
A89B6D93F56556C98E04084635D1D953B0C95F6BC86364C635F2D1C0743C3485
0B4F085C51E64CF72B4AD9B4EB9300A39346E5D9657713E75D5A0149053728D6
9122046838595D1CF7C989A69B87D62B3A18CDB956134BD502C7AF264BE197B5
4FC3BB370C00909F95E6481C3044D03DB34D74FAA48A44569E90F7B91882D782
732F83BC1137524CFA5A342066271BCACD0622D6A9D710059EC0D341891B331B
6D98C5999B7B1B707BF5E04448A263CABD5A8C67C91F9EEAB06636050C0F1524
A3C644B73173A00C4FEB998A8306D9B5F3AB03461FD9800F98FC40C71077242E
258B598B09FD174563FEFCCD4144E1C7EEC177DCECD04140023653963F9C497A
D66220E4E05269D29A890E06AEBF336519DBFEC0944D683AFAE2900F0B661819
E350723B05B5749FDC61D95A042FA27DC0F9A4C08C77B37B00460512C1287F17
B4DA5A03E95DC2CF2FB1205BB3DB72C51DBB95A07B64352B6D37ADF98A299DCC
B924EA20FAE102B154DF12886AA94DB3883A5FF0DF87ABA6B4EBF545CC5E5A19
7F13A12EA3942CA5C86698457E72DD55460FDCB712E08F54402D1D6B7ECAFE77
0135C5E38640B6CC0FD63BEA5DC5123E6089EE899FE027376B3D80EB36CCC559
9EB5750602AE01A249929240BCBA2F14E0441B6909523D262FF9AEA9A9BAF2A3
DDD42B5705BF7580F4F7236D72C5C927AF7B8C911C111538DCC576EFB2A1B397
98F4C9FFE2275EBB5A428D6D74B04221A0C54BBA348614E3850F731481B9ABD2
108BDA56A804F0A7A0A4702FE90EE167D1914C906477C5844B50AD64E141330E
740A27D50A21A1323528B49A961951889E61EACB34940C331E3EB211093181CD
CC91D80248DD2A9330158108537BD2A3E82661C50C872E875B65061A68064B4F
6F4EF7A864800AB660BA4DA24FAFC79F28F1CBE8E120C01F31F79702F6EE4B94
8CD5E958243BE3647E47795208C0819BBA7E9F0B68F74C137AF43E5862538591
2FE1633636307C390F46AD70FDA30E46CD42A9CFED44164BF38EE14C9BC73321
2016C8B67591571C76A71B921086B1B5D6BAF06F3116030DCCB17AA87DD60E22
F9432F909F083B7638C5FB40164307291BBD129A821D2F8E7FC8DBD93362A37A
5BFB7B3A7FC919414423C59B6BA18215C10872B048779FB86B7A6C5784D6E8D9
51455D79FC3D6250A636DB8D9FCEC541F5CB002536D4927E4A59BB4D268C8E33
50DD75258D222E67BBE9CD11A88072DBCFA1342948F5A752C1BF0FC6D63D0078
A4E696155055B87125AB27829295EE2CF748086B3BFC7333283C5E962182B9EE
A49B4121F6ECDDFAF7FB96154E47EDB370C910241202486531313B8BC8DDD8A8
6DA7E0F3FEE9A9B5AACB2C63A287D2E963E08A1FB4D095E5B3AC70F1C1B952F8
C5C551A3BAC226006EEB2A9447893FFDF23E77AC5098564C19F6EA32997A7EC4
A815AEB957FC9BFB607EB130ADF811648009A5C985F45498E92C36FB4FE2FF86
3BB97940244781900C84880A25D34128CC1332EB26CB213D74FB859AE4434901
9F9F9F91A8BFFB1D6BE906E8CF01A408B160CDB8371F4A98B3D97B26DE454963
C188F5F57FB1BC1904CE5765FE28E8A749B8BADD510C82269D9E3508D24179A1
4F87C66BCF6CB88A1DDDF3C11D743F677AFD89C7F1C9DE9A57D8B512C4CED231
B4AB1BB534726683441D7D337BEBD678725149952B2EC38AF91F8781D5BFE03D
9567DD263516C4947A1D940766548851D7B3A3F8E3921F670D08BBF40BA924B1
C1BF6CD6A258A12046D6E5FEDBE2E19700ACFF7ECBBDF31B6697DC845E66EA98
1CE9831ACFFE8E1A1DA88F5A4664F24A2766FC6AD57E6B763D017167B1CDDAA5
052CBBE3408EF955B2DBAC3590E8BBC615080CD9F84FFB2ADD41EDAB4D64BC07
FF1C7F9F2163AC4343407D1CE662E39FAA21AE10E2C1675632658C763DC087F0
52C2D08A9890AC497A43C2C0E45E5E629ED5D25221003685B76FEA92A5BB5B73
33961EA262A2E79B048F8765F0263BE758C3DD0CFCE309794D061C547E8F1735
1099D23D04647956CB6B65439C1493239D04047DC299CB5391E185DA3EFED0EE
07428882A9491A401CAA2B8C662CD79F8A9D12828B0E4A1C884BD5776E8318F2
281FA21ED2671C7AA0D01A367DF7C8E1A2AE0EBED6195378E65F1D09C0DAF51F
A6F62B28F3022F371812B0BD1E684751D5246751FEB5FA0439152751C12231E8
A50CFD2AA534A3C953FC4FD473E40B33A1A573550F613203BB5014080FB671AE
44DE5489B25B3CBE8C2208C179CFD7619BCF627F9895682B4969DED4482E52BE
3989A70B426E26D0FB91CE470C7CCB593D87F3742E07F3249FD538AAB0175980
0F6C95467F129696FFB4788A35C2E45D83729EB48C4F9B3F277B89C67D40618F
B66C3929FA15684F4FDA523D8F709B6CCC4847CF2019B1815EFBA1449025C717
1F6735DFEE8813B27FA80B28C6FE50CA6730E111D5584F4A101324151B3A7198
2D0D0D81132A5A87749EEB5B64D6FC6662F2ECD8F002CFEA0D5C6A71EADA5E13
2095CEAB1B88A323E7FCF54E4317116E9E8B28876B2482FB807B748FCC6AA5B2
7716AD3FD8797BDC886CCD28A04B4078BC3FC986757C2E1318FE49E38BD47CBF
3922199E2404E6D6FF1FE413E7988D1C6D9DD196BC5FBB0E0CA3D42F59BB137D
1A343C8D0422703104E005D5350899F2F75DCADE9FC80A878349AFB62ED8C03C
041DD4F773C28F84241517261AA96C0193B195DE047D619A2877BCA0C09C1AE3
F8045E722BFA34C6CA4A001415EF851DDC436FF1D73F825C869174D4205984B0
626BDE5208A1C2B773D7B27ADFC1D4970DCF1D94773342748CD661D084745057
48118F3424207B4DA4AE4D5880185FCF4C6BC931E03FF635A39A24EEF35FDC2E
C677D66E4E164557B20E0C4ABD9D3796251B0C42F050952B33B4669F5620F523
9AB1634144CCF115C2FB7E6B565F5C3BD7938F780DF2432EC01465282584DC74
B7B4C578BF6CE90CD2CA1F699790F18ACAAA1B7825708AC8835E82A1C1DE23E4
07DE086CC5CC7D708DE63DD6B9FA1474EB8CB0B0B7C9289FFAB3824C09CAB208
ACCDA1352C0B7798D38091A3CE77F6D5617E726F3D537D44588D58404FA1A722
EFC504CA3BCF6686544302AA344792BEF00DE02118B677195C3E8BEAD7D3C027
A53286B67A463B73A74FFEF1B762D4FA6B0BE5F520E8DF998691172C54660050
535C1998EF2850CEB2B70C5565CF05667DC6AE55FDCFB4FBE0C97684E09FB7C7
A9E200DC8BD0C82BCF3A725182B0ED00BE61018B5CF5B29358F3FEA60B67E9CE
D4DFBF1C4B6D1E308488BD187E208142E937497816E8E10D9B794A17136ED8E9
5A2EE49A515335D4FD484E78D65821DF3B100EA59A6630B6A33EF7876D1D498C
1469C217E54E04E87A7A3885D92D7BF46A94A47BCCDB53DC715A93B0C913199C
CB8590FA763DB3C1B27163A43930D499308CE53C39397240132192913C1B2635
8408AF530E7975DAB17737F1345A246B1913390679066D08D266362CC582B858
B0B98385DFEFC68E79981740DED379BA7DA70EC3E74C8E722F008920D214E956
5C685B323CDA381B9D107C84326C00A3C0EE50534DB9BD757F222CD2D7686BD9
5BF03B0FB5B51176016EEACAFAE4B8CD55023C2F14B465383CCEE46DC2BF4D16
CC857463A5601103512CBD0C852521FD6685344AA99670C1D5828A21FB3B4ED5
FEE1482E8B2C20AE01A8CC0F6F4F110F1003B7B6EAB32189955EFBE64C9B0478
3107CFE0AD764D566BE6992B0F3E67738E1947F2201D122B7FC3E919818058E7
78045011102E8E2A9ECD15D31CE29320361613D163D4D549F9B2E31FDD17CC28
FB9A450DC11845BFDE7C772E9F63FC6077012EE0FB8C93B7CBC1B393751D723B
1AB1A0D200B74D54239456D7DCE683D46D02C3727B1B982048474DB013A41D23
5C984F538E7AAC14744E5AB1D5C64DD7C67190E80155332EE752393A44172B46
4530DA7AC31A46EC89B92A018466912DB7D97B252257C1609B84E71AC9A7B70F
9DB1F8DE7809B652CAEED217AC4A2F7ED08DDC9984581AA5C3A9A20542DEBFE4
9BE6CCE33E339CCF0F674E419F1D45938A4BA4B67F775CB8F0D8EE2F683A2F02
F1A08A9913AFE9119B516BF6DBC64AEB8191257E500B73B3C1FF99CFF076DB9B
258AEA11DC40AF6AE541D1D3AFDF6086E46623C767852353E76A884F5D9F88B7
1BE3D4005E10E2E62A40E8224A1A0AA3046C04935D96EBC72C0251283D2A7F32
075726AD2F11F5654DF8C7D1D3DEE8F21C15F6D0376557E4534D53F28616658E
171B1B64A7D67603349986622C41AD5566FF93421AD84361DD9B6E9C9DF7AD52
A3BF1C63BFEE4D18B0BB4EFDB38BB635137928D135E550E0E9404ED4B2AC9195
93EED36B2360BA5B225F972887DB7EDF79004C4234593E69816B5313936233F7
6962D522BAC0A02F855967D97298AF5DFFDE821C25F21D488CFDCA0AF98D644B
04D80E0021E4A83A0624BCE810F0C88CE08CB12F7838676D87924E4CCF3C2493
86484C6C414CDB5AFF2AADBCEE94BD9845C4B627FA10BDB49126E6179FF4C5DD
ECEC424A2E83125B42A03CB10DC6C50761D9F252B78BC198B5CD18531C1C868F
0C69B767A65E90A7088D32F09C5AE1861E6A6CDD22EE307CBD9260362568B672
75539F5C2B4D429123642FB774EFE39DAE3A79FDC0EFD96D592BC71CF8996F14
F0F5E3510CD77D9F25266F335DC179892B4CD4BC7E46DD7B46BD3A22360D57E0
4E87EDF3AE0F22FCA4A1B65D46D323B9C653A580D0EA0881CC2C2ACFAB881787
C7868A29A264ADEC60A3B68CAF1F83E0F20A8F7ED5C8AE0B15C4E2BCF46CA409
F0A5C1E36537AF82F54C5367F93597FBF434E57839742CC1542C9E8E5A6A7383
F5E898D4EAC12C392489F462B7EDB39AC2DDC92F4EA4F57386261132CFCF1106
6C9CB445BD2F1893DFABF893C8B623B381C95D14EF82AACF6BA5AD21324CD82F
226602EE4F0A6A0C12C85D0E096BA03ABDB502B512F7812FDC441739ED015CF1
BAF194EF4151539B40FD39C155C308CFB310A440A6B92B6AD61291C41CE64F6F
3C229064549E4FC46A8C86E468F68B1F91DB49F181F00DF6AF97AA433CBB5216
A35C5A7B446D2267ABA27D47AE32FC610B18145F8CE97DCE01DA75D9A656F8A2
BE8F4B8EA0C5BF1B16355CEE2D9B1DD807BBCA8194A2D98842A9BF47DE005412
E1BCC7FDEC3C9DEAE6DD275E6E773403B0E171011C11ED5F52DEE23717D73F33
D3D62DA89011BD3A0772AED1A8BBCD45CD82999B83F2C17E4C15D383ACA2868F
86149A617892014E5661199039CFDE7FC23006C79ED4C963C70739C4DEA3AB00
320652305A8A698AF0A4856DC116D54AEED8C63F9753041B0F84775698851562
8074DAB099114FD70FE941AAA8703B509CE6EABCDEC56BFE8B6A8C4486D8AD86
137940B018AE4E5937AE01A7EB88C6E55D18D097EA9D6E8ACEB3D498D216DC20
E69740BC8E6F57AD89B3BEB9BDF511CBD06A54366B88C43CE9583DB2055A508A
50B4B94F64656DCA1408E87EF0B4F8BD5AB6B370A047E6ADAF6029985B260D97
B5C8E81C3FD3969D1B48520E0A1554C54C74038E44496A9F55CA85B9895CF213
DA33CF12BB0F85DA8A0E066D37D2627F7422931B114FAE46F25EE51D13D8BA76
38A285E8CCB653E83AFA389FB75790AFFCC61456D34E357543689DC04408A0C0
F95BFBEA0BE9ED79375B7438109887345591101A380FD791CAB5217038A4CA6E
C038873AAB47D4BF85FFA62346755C2C44F2233725D74C9BA07F1A4E1061C03E
E95A74B6CAEFEB7E5157DF2FD8ED1E2A2FC926022370492FE4B015D1040E29D7
05F451D8EEBB2C10EBC06F1C96FDBE3137B3B1E7D9BF47C27100FF5694F1C4B7
C5C78A6C9BFBA5F5B6BD8AA20A9EC5EF1AD5BCEDD173228FFF88ED8C6C85C85F
121BAA5F9D9225C491F5797610C5D617AC88A2AEA832B09C921DDBDF4DDB6AB4
E2AF84C8CF1D71F7D1325A7F57F6309012637A4B3A7E7795DB0E5803AF2F9E05
A2185D194922A08CD753E46ABF1FC55C05D88DD5537B5454AB76872B69F5DD0B
C44E73A33ACD37D70ADC09403825648CCC5C0F202A8C101336431970167D8BAE
B48156497C5CB683A55570AF5E62CD9A1ECBA797F9410A5E52CA0E5EA4693B08
3D4AC18E85AC99B9901A1A76B9CB1907D143C694BF6780F6EDE649E9DED38279
190E829E66C500D1B5A3B7FA6181716DAEF1BF1DA46DC8C74E7C39D309ED01F1
0027D845D03AF0265DB9C692283744EB0B69280F0818AF9695952FB72EF6FF1A
F7ADA55CCAA291637F8F0F5D8C07C2B8BEE45E4D3C5085DDA916AC21F0CB78CD
EA9A2E82003A9247383CCE8865FD7182A74225BD4086F3748C6291363D31DF7A
CA0612B9B87CDF95A379E314AA5E4E0CD6ADDDDA1EEB4ACA480AA4A844A0D9FD
E21ECE538E47FC706D7A9528F75F88CD016D167EBD5A42AB1072ADDEE54614C9
82E2EE0882F46394453211E223CE3115D07853A77B5E7915CB3B429C06CDB713
371CA2368CCA886477CB4CA6B99AD5766566E0C6C05D431D4D6AAE6604403CB3
9B0FA1CB1EDD0CD53E51E0A6B958E052927E482058D86350029AE6E5212E915B
DE594191AC286062D464E9613A2508F99CFACA1804EF6D4F245F690BFD43E438
072C9B0E5AC5D68854098151965708650BA73CD884B76E010AC8570255CF92EC
50EBD62E0B6C280F692DF2689B4136EC1033C0A6828C960A35C29AAF9DFB29AA
D99E7D4E3AA518C2727B82CD283188D332A3B34EFF542FEA4CE02950EE9B452C
E7C6072A4687AC48AB4929EAB724EE1F0C5B46086F42F489906468E05EB4B054
161499AD0FEB2F2A7A304AABECCAE80EE642C9A70FD2AF157023FBBAD418E9FC
E4B7FA978E2177822D7518FE4CAC9745948F3FEB4A5C98174C750A8248D0C213
EEE3FA642BB5EBFBF7E95059C11E5D7FB9667BC6FFDE6623DD17B5BE1E1332CE
A02A02542E4E18EE30BFD95E11D6D1A85CC4A3D7B205D4441B22B9DD8300FBCE
E511B696046AC00230BFCEC17ED4136CB5760FCD033066D5EF269E5DEEAC19A4
84676859F6064FBE1122A592589B40C9583CA0C2FBC14EAA873200A8ED0FC2C7
5A0B3BAA20C4B95A1E7C08230A9F956D3FF17C233A2926F0FF8E1C27528F3784
00BCE4FCAF84CD0CA72FD7FC97A58D2C589110EB4A90A2A8D0CD9B0AE0BBC154
CF7C193AE1C98B61620E188AF0DA2C3D088F787833BCCEBDFFE2CED213D53DA1
D50BF421842F3572E171631BE635D19377717A1C639FC18B914E11C964995D08
F669947FC447CC8B80E4F51A87CC904020DE65F5C3445422B6403E5D7A1CF2F7
9D6FF4D3CDBDFD41CF26DD2AFEBC45CAFA766100182333786BF5B3E7F5BE770F
2E87DF4ECA055EFD0A511CF893799769C973635A903AC702ABB86CBB75152C66
3BDFF427E02CDCA7EDF0A0C5EA38BD0DA5E9A3D35F9C48F38D916CD7CC577661
49B6196F0585378D962021200D33E0EB837DBFFFAF3B256FB5A594690EDF2AF5
57C716DF4E0F054649E5AC7E6A89A42D3C1FD6FA53EB50EB836377D65ABE620F
79D2039B48A598980A9DBF019D488196E1A786F0A53084054AD9C96E97C77261
462CFFA5B31B97698735BE27A83713345FF89223DD98D8C68D6565A29B18C26A
9994B3A8BBA5923227944615126080164DA3CB109758F2F85B1140F7AF4BBE97
CD7A5E6ED292D9B7586DDFD20A85BC941361E870FBE42F07BE3F11E213FB8D6F
A6928E1FCC0F6D11875F2DAF7A0AED9BA05F57FCE486C86F2D6A18968523DEBE
F9A395D72C52BEF2352F511B4CF0F0045D6182CA330DA97D393D533E1A846A66
200FBE03370797002535E4CF7AF8C2946ED892A442FB58DC36686331A5A25258
635DF9C8F9EE24848CDE97
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR17
%!PS-AdobeFont-1.0: CMR17 003.002
%%Title: CMR17
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR17.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR17 known{/CMR17 findfont dup/UniqueID known{dup
/UniqueID get 5000795 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR17 def
/FontBBox {-33 -250 945 749 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR17.) readonly def
/FullName (CMR17) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 58 /colon put
dup 83 /S put
dup 100 /d put
dup 101 /e put
dup 105 /i put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9D6295729076BD8E
CBC0F4C1BE246922D2482233846A96D867B66D9CF25A1DB661141D36B8506E61
A022F9EF8BC1F2F674EDF1533E67A78CA29A612AA9268E113C5EB84DA56CEDFC
D7A111403E6E2A8682DB04368889747E003A124395ECF0C7FC81218552EE7C6F
60BCFB4120893528670D0E8A4117EA5676915E3591AE5652D003EEF67818A41A
8882E102AEEEBECBD15DCF632ED246A6A58B6A7780DB6F1F9AE3FDAC8344585D
E104F2BA2DF06D68945889A2A3B6C262FB53FC670BC5EB7C56887FBFB7AA7026
84115872CFB0652C6BB330447AFF8F0F665EFD6A41D6DB6877B08052F402448F
CB21C26BDC900636C99CA347B79AA73AFCDE9762A992CA3DDF7279E5C50F453F
52098529850AFB1F501A442D6A02E0A2896F81C8AC735AF1E7EE47208B4CC944
649DF6802EEE813F1456205C6126D7D0B1821AB62DD65468F3A30575E491623E
0054E2E680E4402E1C8C538DA389B81603BE88D6DC287A076F92B224CD58A0AC
44B8D490197341808DEF243660971F444A560C747BC6F52707ED42A99736ECCF
EBCB694A561C3A70A319D204CD40D402FBF937A00BBCBE85DD26C9E3F91B7D10
D85B9D314BC3AAD5A58B107F5F341BE2C53490924142566417D6BE03BB4977FA
6635EA58DEB9508E40B9FFAC75FF44C683680CF242FE210519C9BF92483B0A54
83F48341318BE16D2F8C988FE3DB2E7914581F579D5E323148A31E4ED03BC24B
C990372DF5F3B0C5FA32EB2CA4FA0EA33316569133C87697BAA2292E685C26CC
F8CD40A2366E60B47D47CC9D0FA29D2836011376A07F78BA7664DE96E775CF45
9BC91559A063073A4C2FAAD0893C517C5C46A1425D07EDCC2B57162E3A45103E
FF26A2D2F98B194256A4B052AAFCC08965A50EECD7B9E8F35AFDF7B6568B3983
8030655E7C2BEC961A2F20539D617626E8454E3FE9EBD3EFCEF7F63498441DAE
16CB509BF239FBBE25EFEF07A3E16C9C71EB8D9DCB8403916FB40FD7F4E1A52F
72F2DFF94FD14D7D49FE775390C17C37C1BA0CAF35CF75D682B7833A83224158
D54CE962CFBAFB1B2CA50B60CBEB1F8F58DDB2F5470C355ED9632342D9382AE4
5D33BCA3A0A25EE9E5B39BE5370E7F20684C664EDB48E7973FEDAD9676F9EE8F
701CD4D8CC9B9EBC06E8C86EB88AD56E15CEBB8E1930E8F711CB6E01D5D14967
D7E6C1BDDDE2C4D00384EF4CB02877DECC27AD53FC981338977BA0CC0257CF7D
B42E9BC91AF45D9722461EC3CD9DEAA8011FB855FE14B74BE0A102008EACA2B6
0E287BB4F466FBFDD6E65A5262B9322F95E20DAB875A10A84572D982E6FC7ACA
23C0C37E5EB47B8E69C07507B53CDD98CD1B6445E1699CF35B3DA3E0DC56BB76
F997C40E2ECE47DBDDB707EB527055960113F2DABC87FD9EC7D0AB36B400CE33
0D54D4F197B2830B43DF0AA802DFB2BF747A4C44B31FB708B2C8BBE1955A6A28
379C91AA4CC065A50098AEC0B837E180B76801865A43C74859DF18FE1DA1483B
C17843BF1C7E1B11A8C6D8BB8CDB1D552FE6A1FD0A696A8F7405F2320F8621EA
17C1A32056C45A9ED35D2BD12D02D8B26489CAAEBF4EF33B66FF4BD9B46E4823
6395831A8F3366EEA0D0EA88D612DEBF63DA7FAA24DA979ACC1A52544BCAA007
6C39946BEA6076ACF45722B2B8E4D0823EA2D12B14A98367BB0433A21FBD9F94
18DF298C56F67ABC9DB1868D431A854DBEDF8E1F49E359A545C75A7AA1FA4D5A
50F1EE6B45FC68ABF65FFF257964E4E50D8B0C1FAF498DFC554073697C2F219D
4A68DA9E873B270B9C56F0DDBC9927ADAF9203FD684DE615F68C24ACFFB44690
89C0D5322049FA69E7FD00EFC9C9B2BD177B5B339907F81C31496662847BEC1E
56B5DCDF4FE618970F4268F475B2EF7E0F28CC986DDF098E59DDAD818649CC35
4080C0867A884B8177A6880F06F1E5CC130AB4243EF8DD8032FCF390765BAB1C
1F0C9728EEE261A09F8C1D7ABC7A6B1550551BE2A7D19D45B656650DB00B3A5E
B3E1186043E173BB4DD5EFFB379654F88146382AE3F7196F099BDCD6D245FB6B
AA2FA9B6CFBC9F0CD52798DDF2F13874BDE5B124DFFE0DD93E24C9DAEAE4C3BB
71A9A13AE2860F620B4EC789F95221015D9C510CB4AC775EF69DB9E32E59C896
1AF82C9F0DCDB4812A37761859A3D3BA0CA57F244489C78065346FFA78F5F7C8
0B2E8CBA9EE62FF5C27369D0BCD52857D40F1FB8F8A1441B83565A4150AB1945
0B54D6E49F66389E43096269EF5CDD39526A288C0CB81E324E75D326EC9A182F
2CD966368CE300B41873B08E17C3E6BB51804460D2562AF5A12339966F44CD09
114C6809AF246B5BA6937631842CB9417781A58944B6BA4FCF961465C208957C
81A662D560D0F81BD3CB53C06B6D979F04F6121CCFD5D52702CBF6C70C01EDBF
2040AAB9CB144321E68C4010E0E98CCA2603EB55DD62E881DB621C37EA4108D1
528ECC7A0121B57C6BB1E26F8AE7161ABA7E88256D2D6A8B7CDE2E730D137493
3FF628EF6030DD2330D747FABBA03B44CF600418C245C388F33EC5559E7313BC
4B530C4FC12530D38B27D6408548F25FC084DD0523B27D29D6518D3115AE7755
37162CFD4CF528214466FE525B13782F9C3CD78F3D6C7423E63A134C0A371F15
10F4ECE1D482C647B563D3D15586F80BD9DF7381BD53927825D5AEAF762E1CDC
3BD184F345029A95B3AD4D1B66E79AB4F0809418C0CFD4D503457A190D02F134
3F57FC04FF655AEEB783D6791E4EC300755861837D3D50649F6B7F60766211B3
8148F8E575E28D6C2DE75B15E722ABFC6DAADAE53D89FD295352781DCC2CFF6D
982F6DB778D6FCBF1B7BDCB53F3A23AE6EB499BBFA96E8BE04C3C8E5B660EF24
01EB842DAEBE979F2C2DB72AAB4D21627063B1D3C6CD40944E4CB81655698FBA
A343766CB22E392E5DAE01DB33A00918D6DAA07F2F38B336A3C5DF3708865E75
0DE04D3AFBCA27A249E97377D5785B4E28EE0E93F7D353619C200DB967372ED2
153BF8BE945474266EB2FD30F80042A11B7E3586DE4AB1FBD4A741D36DE583E9
1CA25DA345520AA60634EC819E7EB493CDB128BBADEC3890F055455F060A1100
D5A41D7B180027E08AD6EE7E393DB9F83799544404FE397F557773BE6A130541
157C0EB37E036C94825B5090EF85F8B4E3DB72895D86687758C20EDEBD6D1079
196E9949DC6ED0113571C70B150B37E446E319EC54D44CC0CF6A14760953DF4A
D0E1F33A54D240E236AB63B35BA8E071D77776BE5B9312245F2C6E4FDB4312A0
0D9CF723E7D9A3D8546C4739C00C301A89ABA60A02757AB1A0AC40B24CE6CF12
5850485B11E16646D7150795EABAEB08364A53161111F46A7BC3423A0D3BEB69
BF15726C1F8363914945DEEB29CB8766328318AF3B344FD6D77BBB92BD7FD161
93356493D4D8252AD125708D47C124E44232FB2BF7DD75F87889496DCDB75D03
F58A57D4122CFC194B75A9E9C4789C9A33C0435FB4ADA16AD4A6191928D1663D
05FB8152C0AA176FBA4755205F8A66713404787070757D3721ED6E6D55A59DF0
C92BA8F05EC7BE05D0A2E66DE85E75373483EA3BBEE0F0DFC7E2FA5FBAFAB118
058D095AA71FDFC8AF37E5A98406B64E58BF476C6926725D7EF3C2346CE3F662
1E5A4A18D966479A37070859014719456EA2C7F23E68E1AB2F25ED3A0C00A18C
DD403506923BC983F89CCA125780DC76A411472E38173BC0DD4CDA7B43E13419
B5AB0B9A35E77C58BBA12AA4F5C7EBF8A29996B059E4FAE6809565570442AEE5
D56CBF4407E1CD9A4398B1F3ADFF023F64B230E3D29F526B62D964F5C8DF801F
E94295AD85BD9E1C18E6327977260A871E921C0745CA06A263E335E344686E7D
D6FE3ADB4EE0A7E462F3C00873C3E95D183CCEC71C0E5DC1D2FB310B28FC3611
67C23DE336C374F72368F4973052B48E39969305791C986E6EE35D0350571860
3A8ED849712CF21AEF444BA390644E8646CCA16559BA4642A5800827A0DDC453
7CA0818BC47DF6348A5209A2F0A10CA39840CE6346E89CA0E842BE8692DEF25C
4623A5A0E0B98708B9492E9F564324BB3872D6B953CA59E9F393C477E2AB85EC
C557D333E88C111CF995FB79D9432DC94C2BDB3BFEE13C0D7D1BB920DAFA6158
8548447AFC65CD5515D5021E0ED7D213B0C08C35BB424AA91885CA023D7AF767
B83E619B15DFEF5588D2F0564296E14B5A6ACE03751E1016105C51BE76EA5ADB
4167BAED2A8899031FD7BA05C410ADA25ADD94A787EED1A7AE133B0568B1DBA5
44B41BE013782CFCA3D81E8E8210DD506ADFCE7DC7E792EFEF438221164A7D1B
5E7089F476240C5F94988F081943F24DBF7CC3D1E58CB89E1C0C1624682CC3D8
C95815ECC9183A4B3E353C7F920B7E64086E01672DAA7C8A81319BAA03C1FBB7
8E5E84CC5BAE0E107754794C755B7AF00953504094E1A9DF357D51B578259613
8D26F0BA26AAC459BBEEB90BCC98B865EDD26AA4DF533D6624EDAC762C446B6F
CF9F86DD2D8989D4655775E662B93BF51805EE3CBA0AE2293D95F166E80973CC
82C53042D0249C598B0821E9E7F218BA6114EEC86C158F277934F2651490B723
7F0D0288560DA5BEBAFDDF243048E590871AD18B3B220EC56549004DF122AA03
BAAD6971D790BC644369FDBEE74A324083CFA9496C2A333774F06E35299242BC
F4B26578907CC5AD1893613F2B8622CFBB7B55810162EEBFAAEAB2A6D69CB72B
D7859C73843E665125FF450631F32E64F13A6207F368103C7A7318DBAF2560D0
F1CDD83C3E48CB30C62AF1E0896E1962C655D9ED98E1BB38477C1C60ECDB6B95
067D3A638AD43EE886338F7AD2D2A574CE6FD2E21F6FCB4220EFEC85ABF8272A
82081CE70E4390A74EC717F1DDD168F4A4A080A79EE2ECE0F98A96871DA4B52F
78441601AF47763C2219F5A167604C32F478D498835EF3A6167936994F7C7139
3019FF43C97E7978D3CDA641C1E391FEA572D308E759F28DDE2B40B5BC207A4B
C5EB6A93EEE26782016F8B6534420BE4D790A2E1A65B6CDBE9468152230384FD
14E9AE84418A44F94E6825DD7D77D0BB5486DE26A692B3DA96C81FA4440C5D44
8E7F3CAA9B8DF38F87E09C4D78841F629F78F4E7CC8580CC44E59E5D9AE8B2DE
C0682F793AE7AEC12A8AE688636197E8A08FEB70EFDB6203681A60223B9B0D39
2DA656E5E99B82130D4BE38D7AFE18568DD30B0CC3C73C1E2914ACE11A65334D
A9F18135E7B86157122CD221C33C62012FFB16D2D2F3473A53BE3E7B9FD4303F
66ADF0B07155C7B9B002EA68C6AC7247EB3CE7D2670A60138049DAA964F86A05
22983EDA7242E6BEEB90DF61C937399B2CE1061DF1E551CEED4A80D86C2D4649
C9FF9A1F93E96773CD392478D5B70D5336A03A274E0A6EF44BE8CB2274324142
706BC2E340DC944339D647961FD7BF29944503B4AFCDC69A706AA6B0F6AB2CB5
D220A96ACC1EE5E7826F6F75F044224E5260D581AE761AD0C752A06AA03FD935
FAD65C9EDD4E5505396E331D45DE88F0D1A4303D766ABE0702C17E2A7F53C0EA
96A4DEC5A6B6186F5DBAAB05DD78E38AFE630465BEF0EC66ABA9C1C9232214A9
795D105C33CF069F6BE20B179F4CC9F484AB63ED25C1212C457DF62CA0D56E20
608572216F2D4C09010B03A8AA6D287C8F514BEEDC1C912552CC2489858BF4D3
084882CE4F4B6FB9EE27C0168671E6DA154018ABEAD013C88E1D3EC918371251
63D95BA0FE20212C20AD3F4DB614EE36B488A3F55D94C1EDFCA8E68E54A1EED4
7DD168DCCF07C3DDB5E2B499DB5635C5C5056A7438120DB4839427D07F96AB8E
F842E285243E40259F6DF029E27779CCF3D3BD7206B2C341045A5A4AABACC2A5
91C6830FE05ACDCFDE99046F16F2AC183426ACA4A89FE5F09B7EB2F811BB5FB5
AF073BDA2886070B2327D582DCBA66B47E8948C3BE05E837BE4B81402A583403
74FF9E938F0E9DC3B1CB81B93DFD4070F9EBAED40BA570DE8F9A5C2C0A097311
22A6065139A6580E332473E9410D9F4C734794F79E41D0D437CEC7381919DF6F
A24B170E2BC97A6396A4E3AC3D844AD6E2B8FCE1C6AE97DFC5319F49130C3D6F
AF2541EB2384D5D4CCBEB976846EF8C2165DBF706112BDDDEC9A57D157F5996D
95229FD5C71B885D16B177BAB06B9DF5740A45C2A005778EE879193290419C0A
A4A339029E37E685B8A05B111DDF94AC19B1D85C8E6026E57E3D3B373C08557A
F96E6FE3916695ADFC1F0BF5D558565F42A71C61ACFEFC9026424397F0646642
7EDAA05794BCCD164A645860B57EAD53CB6899B18C6E9496EA4DAB0A0C272639
DEBC4FCBA94B3BF123F7771F602E7667C8F56E12429669F2219C7D8E294BE07B
71E88EA62F5616CAAB7C0198E6FF12A348E36B306FE2684A401399431B6A84CF
B46EE4BAA0F4099E65E9AF3B70274EDD6B6524F4FA38C23F9CD5273EEDC8C6C3
E7312B6E0497C05AD3F3C246638F01387CC11DBCBD287ACF54D8E24759F51415
35ED64132EF4158F54AB9F4D567482B3057880490F805822F71E7E2C52F7BC38
8B1F803AC3731064B90E5E97AA3351D17E73DC2FE526CD6C91158636E395867D
C1150FD3BD12493FFFB813AF0D08C8ED0B7418A2CF90BD5B783364358605D075
5DEA95A9299C0654EFB28E2FE8A41358A0DD124D0314A27558E42ED5F2D74BB7
056DE04D2CF13B9B804A3CBBA29BC155A3F18B8B48283194C33CE8291677E1EF
0721138F8E0409D49BB99F217607586D2DF00C29A25536E21924B4CF6702CF85
C02DFBFD2AA4DE3DBED1D2C02E21052A8D10F96629D0D18154923638FE0C48BD
E2DEAF11663E20717EA77A5453686AAA39D6FF7919AF09B1AD956FDBF734F49E
262F3076F62E77BD45122B55A5913902D9F91C4246FC235BA9C0FA4A96994291
830638949BED423387DA2D455A3C9122484EFF27F5367D1D3DD27D207D973815
965E1CFF36F43C653ED406F65348671D9FFAF55BA3FC266D438AF473181B7801
164EA3F04FEC870743195B3F467DE36B3719BAD9BF15A18637A314C887D46673
445BA3C212749B0A33136FEE9FE2C9A13D62E7ACC96378D257FBE0EB06AD4D4E
D41976AB92AC720DFD33B0677062C32E6F5C992A0324FD26E984B5341A58C190
D20EC3F1144697D514D9157340A6C9F82E62AD8CFDEE59F6FF86C6250CE33D6B
BB82DDB4F65BEFC6F6D0E4044F7BF307CC346E2FFD191846E3CA288C6F91CB71
5FDE855FEC5E38816CC635C470BF15263A10A409F0BC4877F7E6D4C223E3564E
E7BB5B320AAA5AAF4F32528F7413BFB97C70FF5E6843E1FE501472129BC9758D
7531BE576C75840CBC4CD3E6D9E5FF52559B68DE6E7827128BB2ED1BAD43F36E
A0CB68C1A147A7093EB02062AC5492DB7EEE08B1BDB187E15339A66269E459BC
67495937B4317AF66A498923322B087ECF47B601C26E253D223A784DB2D204FD
0668BD403A73723848018B7C86B627B9AE0BD9038F567CD5F670CAFC5C4D86FC
ECA211B713ACF8C1370191161CBB6C2592E8B9DBF3471133F2D9A60F15D72F9C
5E5539D59A6A7E124D9A38A6FF6EB7C71990716F88E1888295584F17D49144B2
B5768B77E7B2B812E8C804239B23202AF0EAACB83E7A32BF32493421CE4EDA74
808C7F2D0818FA5CC7B9DE5158BC7A1B7A9C7B95BD29B01BC1DEB37D4EC57C01
38AE5277D067BF0242AD7D07C2EF591D6C3EE87A9D65A57C287DAAF60FDA68A2
1ADE7E7A457B95C7BC603CD8D9A6BD66548E5BB2167E415C21463C22C4459A92
374A9BF3C35E2A4FE2658D8835158A2BE0E39E2553001E83367987705ADB7596
D0E268828757AFC19E45C3C949A68C4F8F52F0A87021F773E844F7E60E12E4EF
FDC0700FA116E97797ADCF647FCA726B45639F0B4AF5301BBBEABDA877B61551
06DFA3A34871D5052A8040E24A0FC633249D6E1029ECC74140F92019D3A4D67D
7D02A567FB66A67AB2E9556E6C9AE40D3CE74A35338B9F9A3F4B89932B9982C8
D4F0302A61C41E33E1C26879D91DADEAA25F850083BE6CC26AE7437664ABBD22
4991097015E0C4F622C41AACE1064C1F5AFC65A5B3302A7D631BBFBAB0CC540D
B65D0E98718F1F3B103B327B3DC2C83E7D3A888053F0D0BDF164DBD65FD173D3
6F146CB02CB2B6AC71B64DCFA887A469C3B9DF6002EB2A792465D3D0C4E403F5
71237FD926486770FE6296A948B8CA7E256F35AA1894A23651DEDDB94C5FCBB4
D8467420A349C2C39DA1E1BC259CD8DA9C171FF1238032FAD2EA48B36B1CE2FA
CDE3F5A08254616D646FB3DF0861A63F575B1E2EE96EC45AA1FCB46F9A32F901
BA54D4D1B81DAD272B1F3312C2CE2CE0D14E8D18CDE9696792063A5B510AD957
83AF6BCBA9444F6C41E8988D38843685506199752A87B46EA1F19F38B6583FC7
B7A1D224E09497C21F3648E011B9EBBB19CEA5300B0BB70BBDF36AE4652BDF83
9B35D9DB64D00E3A39CBCCE1F7106F770F1C0DA42B3C4208FD103C061ECD12A5
E0CEE8D9D40EB9DF0D8BDE7848974600935066ED342F14698AD9F354894C0482
1213F43DED51F6A89A0E42F9C366BE3E2B65ADE46B11E284B2FEA256EF66888C
64DD35026640268ADC8213D524B68AE51B47B3BE79351265B535A3C8EA99C71E
2B94E30977924A16AF612DA796F7BDAF74C8BBC19B0C2F8D8CF40737AD0F20DB
7607B8EB5DDCF012981E2A5A3D107A96F8508F648FECAD1FB5822D937DAAB6D1
6E7B54DA35174D9E955C40FC2B3ED25A4FD997ADEC3C2CE6B794043AD302CEFE
F768F4021089933B3658D9BD552DE9B8B08B9CD9C091337179D9BD6EC55D436E
66C2D53FE955E91BB459EAB4F948EC011604F4CBC884B9669713D315012A2616
CFC4C98C24F445AD9D77239C8B0C107798603BACC153A8598C4AADF79D9D7462
51540191CDB59A8EC0D5F7567C3132E766311C7B7C9AAE36A174A0C5646A5284
0F2E2ABC5C8FEE133583CA959B7ABA98EB37CB2C8C7AA41C6A1B1449CFD3C107
EEF70842591D528FB2156B480069BBA3F2B7E02745EEA5EB17C245116E5EA567
9F9571F357B44BDD2693E28796508ACA4441D52256B84ED0BBEE1B4DEDB03237
757D90CBAEBBE19AAB23B44856A73B03AD514B84209CB8211F29BC340F48F916
D1081E9AFB50EEC4EA3F89CBB93829BD7569C56A56937F5263BF1BB6BA8A9493
69C9C3532BFA6A9CB08470D3BBDEE31787D5B1DDDE0F1789A1693F8CE4554F84
56B2616ECCE6ADC0E84205C0411D7ACF80B3B20D12F1A64E0A93C629A47337D7
332A1C7D064E578F79C4FE3390CCD38459831F1E5837D6362207609570DBF440
BC9AA33C7A21710831281A3AF6D0E68703CAC5B881494F9053A1C63BD5714A75
D07AAF083915E2B29D0227E8A7C3458853C75DF733A09AADF6D9890DA2611C28
842AF1C180A82613E74383F0F196C4A7E0CCCC8EC2079FE95A7696DD7DECC97E
315F39EA668BDAB32734629EE57B0C706480103D4FDE38019CDEA73F3A5A330B
8F8E13961D6B3F8B22F575CF9CB5B02494CE077C7FAAA45252877D72724EC8BD
9A20A24D3020E8435CBA47A245449E03E078041068565631561587F1379DB8BB
729DE14A75FEE39417EA77EEE24B69EA7ED07FC3F829B57E1C863719C7AFC991
7E0281614C894BA5A950965FC49C10F7A8678D6DF164C9AB62D8294E1D057FDE
9A864D26C2A1591B78D4D75E7D25242877916FA4079E39AE0CB1A329535140B0
F04BFC65B5E45187D9433BEA795597ADDDC486BA1F97E88A8956BAF01FD70F8F
F32675C37E41E089039FC57B03B4A111192BFB1D6F6EC69F17EBFB4B05315EAB
E4CF2EA4CB6E5A1317F0B405D145607DEA3ADEC1D16F0B0C1CAFA5DE0806559A
AF9FB15D1BFA3F7FDABCEF7EE0C6C8E69EB3DB7FAB3D72517B86514F69522717
7E72693730086105DD0E2F801A799291C9AF1003F02B8E76CB2DF6770CBEC35C
25674968CC2D9BC93DAE8DD2C652F8192F9AD770C841DE345230B5E5BE46F8B9
45017C58643B952921A4D24B4B799FC111609F9AC31C348763A93B03B66AC76F
B7FA64117ED22A4F32DB08A120D84D08D48BAD288372ECC147F6A12D0996385C
3179E992A9CD10249507BED5684CA259CA25C4E3BFE23BEAF3F65E5A57CA5055
41E8DA8C7EB2504863515F01F4715F6593A41768119020E070182A5D63C96914
BCF7E7C81594CBF6B789E29F8F975DD177AB03710CC2740BBFE04C71A4E2955E
AFAA554880E9ADFA791AC74466EF9AC69644B906DD572C29733CFD3C0151BD19
CAA8AEDC21EFADC5AA9AAD483C143FF011A492CE3E996111BD98CC712036B3A0
F8C8A1452A20D8C72BFF03E84378EB20B5A32D187E933B31243A3BB089BD7D02
EE68838C23A5A943FBE416A724920C8F77EECF85D8AE563CA05B6F85A386DC27
8C8FEF88D4FB927970D91B863B744CAEE1A3F31665AABE21A56FA675137FDFD2
72EA6F5E418A4E5B7758D678C6A3CD3C1E4765F052B05E8528EEDB948E08FF9F
701C3E960C8E7F560DB2DFD4BC30EFF5E0A52461BD1BC9473F4F5C15D5DD0F0E
351418EB5A898BA9FA8336B54812B7145628F20201E6A2E8816D4F3D2FAE8790
0B9F51C683B9EC5659392CAB3739B6BA83E2696E47C9BBF878DD4158D1EBF2F6
5866A15F95BB450BADC1926C24B3CD38353604DBD6B78B92F0DED8833D4D1532
44B618976DF338A78428332BD343295FAF85482DE6EAC1F211D883F38EF4131E
ADBC10F00C632D0B31715EFA132515EF665EA4DE61A7F4F828505F1DBFD2AAC3
6227F2C026F3911ED71C1999EE0AEF4DBE122895B3F2A460B6A3B62CA764A138
3EDAC3A6F9690B83B067F2A62DD2292ACD327AF024A0E3B3383DB7D73452733F
2406767B564936FA6F2018192BA63947F5B3577EA59B68B2D9F25131AC1F0410
A48C0110A7D18BF8F8A9DB161891091D9FFD07418D050CBE7B3481E09CFA813C
9F96FA6A606721C1C123863E2AFC285EAAC5EB00B026BC3408CB774FBC73DE09
504B8767492D1901C4E1F3B84EEA65E84D9C7CE147DE2C8367C85F8ECCFBAF7D
EC5F385176465C36D8E2EAA2E6E3860CB66E25E63B63AE6DE4A0D25FAB80A8AF
331EB0C3D905E9403076E54F4632FFB887DC4D6C30ED12AF
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMCSC10
%!PS-AdobeFont-1.0: CMCSC10 003.002
%%Title: CMCSC10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMCSC10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMCSC10 known{/CMCSC10 findfont dup/UniqueID known{dup
/UniqueID get 5087402 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMCSC10 def
/FontBBox {14 -250 1077 750 }readonly def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMCSC10.) readonly def
/FullName (CMCSC10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 66 /B put
dup 67 /C put
dup 69 /E put
dup 70 /F put
dup 74 /J put
dup 79 /O put
dup 80 /P put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 97 /a put
dup 99 /c put
dup 101 /e put
dup 105 /i put
dup 106 /j put
dup 108 /l put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 116 /t put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BB89566A9BDEC70EB4F2
048A6EB631F05C014D372103E37FC3FA317EBC9973565A638403DA02E48B7D31
CFF6C241DC5CDB470561002FF46437C06EF93BC99352DF04393C661FFFBF4BA2
0723ABD9B3E9CA9E63BA57EFDBAE684655CBBDBA15ADAE43E1A2C98A3CF060A3
D16AF8FE3A49B50A24C20EEED716E49AF6013D4D38CD9CC41A91C17E4D04D79D
567E1EF49110AA9C34464E95D81A730ECEB2C9AF38FBA6B45E253288438B4CB3
DC75B3A906D4357293BA41E59C35223A6C9CBD6FF5FC90C2D07CBB376C7320FF
435A6251822BFCBB612CE630EDF826C37E95F541C21B93FCE127591D5E38165E
2B58A34AAE37712BC58B63FFD70AB80F4F24612CFD2F1466BAAF3CA2BCB45148
D0DEA0E9B8FBA4C4FF5B8B3CB02E461355051842BD1C94F41066B9B909DB83B1
DCDCBEF7CD00A43E4C0B8191A29600CA197F0BA227FB8309BB539D2A620BAC70
8A1AB2DFA51ADC9873B8E5582DCD3ED154E5D727D1665F99BD89883D69E6CC2F
DB3A57AEB612171A88E22F038461DE03FC357F771675E34E90D4D19B4B36891C
9D2333960400E97494F4FC4DBCE6A73C34A0409E433BBDC0AAAEBA7D3555066E
1CFBB4515C8B573C9B9DD12ED5B6ECEBE35AD0DDEA9DB004FC6CB540B5117B49
59CABE5FD74C6F5B6482B42C20B5FF0467D1DBD7CED2CC651CA57852B6FBB402
A6764DB342889132C911CAA713A7F2FDD8A5E849345D6C81025E02F5B8B682BA
90CC9B467FBC37362436EA6BF8EB62D784B01D5430147945BC09D1F49EE89F2E
3E2B8E6D439248A56F82F2E03EA5C7A922F2813BE6538A3A423BEBC55B345AFB
3B3C125306749E137C647D78028AE1FBF3E1A82C260132832A9668F454D39C41
736717DED0A99F6B11F005F0E1D07FE84713AAB4C042FDC166AA146D7B5E9198
E4F485BE5B135EA281FF1C1E616B5AAF02771F58C5840CB5A427FF9794F93E94
17FD799C78AED1DC4810BCEF4C6C51D3C1504EA2C6F2B29805B7ECF97B5F637D
FE92E168CB9029E90404CB54FB312FC7AA8A9F2F524C03E61F03B1E31D4F061E
1677B39D5D30C9FD4673E1723F4AE3CCF38593AD6D7F61E9DF3C010E51F25085
35D51105E1464BA146A78D7297D4D310AD91342A0BB942034A3EC0696B467367
3E39D202D637E6B14D0EBCA6AD3CF22B07D4CA69C0FCBB6C93782B2F0DFC5AC1
5D8A16CB5EDB671A0C1BA9D10F63CEAFCD0E06E42C730C8EF769CCFD57937245
658F486036D37E8BDDE5670A212FB488A8753322A5B170C9662750AA958C0BBD
8E97D8239D2A08B30416504DEEC4E506013E037C91785C674F8A6A44E23FEE6F
CCC00CC5E4D355B0871FDB8ECD64F70EE32449BB5D6F84F8C8AA2D5B1A489BA9
D7FF2DBAA8D0B84054E93D64D3E77850A3724824914A0F821EEC3D605DD851A7
606936B8B9E24D6E932E16C448140FE94DD96C75AECB73850035ED9C04A1D93C
64B21E7D4657E030483EC5C3554AEF8BE4D0FE5B9743B875340B09E01273DAE8
F256C50A1A8F2E0417440A8BB0173F59E11523E1CEF2593A4AC5AF2167627B00
C5EA97D125EB8A4BD4C372877ABF10F5B7B149D73787E0834BFB3084E9508DF7
072DD71637019599252059738D4D6BC57A9358E4B14F6AF9C4B31DB8E25C29B3
7A15F9953BD73ACDE5F0445A5DC406BB4635FAE51C1D8202AE31730E6F355317
1DC197DB0B6177307C60E5D38F4487363EE051B2E609A52BC4D45B14B6558B6B
5E1618748794B8340752CDBE7756C068975B559615D4CD5A97CE30BAA7B2B1A3
2FEF2E055232B24FD8A21BECDE1B6A479A28EC80AE2CD16DB50B30B4A6CFCF06
491C7CD5AC29FB964D4846415233947522676DEABDA0D9535F8507D33693930C
B4E4240A02B0CE7EA288516B8A6EF908D7F8BAF9012D052C6AC96D9F8F6ADB07
8984F3559C5E7E3022A957982155FC9CD599C74E18328D3AB46F9DD15D1C4C3F
9B93ADB4489BA02CFCF57DE6270F3AD2F8597BE71786510EF08142F430EE5568
4F9DDB792B7C46B6135E341DBBF062FBC50FABA80CD4A384157BAE57CBEA9781
AA4416323265168AC097DE7E30A0D4750143A4FCE70A863A31876A8FA5327C3E
36E89589E363AA2B1A6E8B09F5AEB8FFFD0396067173465B6503383DE517A6EA
88C0FC08578398C2A721E5AEB29F4AC9BC990A50CD87BD35A11F9E81F68E7B85
5E5B95A4F9A5D30379EF90D78E1E466DEF867BAEFC4F5ED2C762BFF099C1C2B3
5E0DA1C2FB33BE1379413CDDB1EE6BB3A495331F72F2FAEB8152E8AD5FD334A8
AAB0082A71D5574B618EA8D487B8FAF1B445F3395B1E21224F5492A0E06F5152
7726835C900E2E52BE3B7B654183AEDEC68053DD0AF19EF6DBC10B6FC08EC7D0
CC0E2C8FAF8C9A4C21FB7C34E074BBA4EE64226BEC8C928A784C1BEE35B72EC8
E9295240B29DDC2539CD118BAC38DB3917D14CD33AB45FE47E827F2A2B193AFF
53C5396C52CEA4F43F06AC2D08C74CC85D608CBA267175EC31311EE25AB48DD9
FE811B411AE426C9FC0B6044D1EBF130231623F1566CEA4D1C06D8032FD9808A
94479C842BC41B675CF6B90113BD681F8D43F51D5016D80EDC11D7640FB950D4
E709A46184406ED90D0892A4CD9062938A8205697A200DBE1F38EB166EFEA0EC
4FCB45CDAF82EA103DD6FDD03D146F3E42EDA6496064DB3F4FC1C5280C9E604B
D5EBCA08BF2AAC90156C11EF68137DC76502EBF216F3AF3EE30DD2676D218428
F41C655093F8B530FCA378B5769F262A6FDB4B66B83F18F050E77227E28D71F4
5F4425CB8D51B3DAE872CD86D7804F870BC564A6DA1CA13EDB00D131CE4F6460
7021661B99612629DCC20C85CF155EDC5111E015A77B0B82A8FC1EBB374B7EF2
361419BA93B857D5C9944BB5B4AEDD86ABCC261542077FE09701C96370168579
5F89D5AAA08D700E2643E88C2FB8D1D56D37AAA9744872E7C050B4CE046B47A7
83F224FA9FD311C955EFBF173042C8FC66524135F579B1397828870D5C9DC71F
8615FADE2A1CFAEA90F732B6C266E2F3048FC43EDA7A6B6D98E9DB793CF457B3
F5877E7A055C92B0246FEA8C72B3B3456F93BF36E2651D32CD614C3AECC0B4BC
F824C8363E593A6458D37408FC5B09883B280005DD24123E2D4B1B85F4113327
EEDD9186A4AF2CD6439B46C5C168C125CA80F9EE9E68906620EE126CFBF26E15
B269838A54224EDCFE2A373EB750D4829BFA410DE5F1541E428BB1E024AF496D
F5F1C151F5A645C8622F2EF9088D57A2811868A8A8BFCDBFCE3ACB8463AC35B4
8B6F44E1C1232805842F56FA468F81FF37D5D55B81CA56058558544C142EB3BE
07CFB1F75DECB1E48C14D6AFDD455989AA6FFE8B8DC54F462B3C20E31D270BCE
8E68E2B43A6625AC7E9792704FAAD6CE8BBE0B341DA7189EBB3E9D5375B27FD4
12506D5BCA50AEDC6955E6C3C7BAA84BACAF7ABDF3A270C7734EC3C6EC22793B
E67B0E288F99699D38DA8B79F2D21DD97945FBDDD132A8F0BF947950D3C0B4AA
EB7B2C435AFE54489E1930610311D718AC610C21A644F34CB2D1959B3066F39B
EADEAB5CFC6AF4D191D86B02402B00D1C5262707861C5308730579795EB53207
A291A27A8B5C4DAE0A87A0C6A260026CA3CB620E1002E066A515D7990F3DEA29
0FAC962E0B82B7A6C86B1EDC54007822BAECED673FAAEF88C8109777EB79A53F
AF3C58546974F2F56E70E9B5CB59ACB5C27CB01895557B2D82134D7F02029B24
3331621F38E68717F5CB68A8892D0B9C0A8ED4F8BB56E80505170D44C6856128
2DED0254ADA4875CF56B4D97372AAE730D4C77A2940DC8C178274DF88A9EE037
215C6FE7B9D481EE4DE809B124C0270782411ACCCF89906A8B143D0BA8B2CEDE
E9B90465C3E57A4FD9AD2702323450256ABD09A1F8C26F08480317C08B75B720
70A161C99715A35A94DD5C9647ED0F8A5337B774C8E54F9653AC859485A1FED5
37B725A7E4BA58711CBCDA6054E34CBD8E9F9460179DA7DBD243D81A1531FDDE
BF2BD425BD9DBE75EAA333B1F5793669A215549A774597E6ADA16D323FE5601A
EDA41092730009A99BF5B5AAE281844A6BF3292D4D4EDE36B4FD8BCAEB6EB72F
AC5D3CD53D0D621CA9EA8D254FDCB2B5161EE9E80B266563F669805A3A15271A
0753983004A1ECC7FBADF62AFEA4DAB49A178C231759857DB910668BDB07CB3F
7E8EC24901863088B3231EE3FA563924032C91CA9D68DB398F9BD9AC0C651EC8
9051C9F709CD784F3FF5951DECD7E869ACC34B83AECDB011E6594347855EE7F5
28811F744A4BD70D4E9077EA7EC19FFCF612689F12B34332857AE41F13E6D16A
962DB9B6AAAC167B9FBDF0068EA13412F318384134B29F3F0C399F1973A3564E
F9C3C39B5BDD4C98D81A6CB476E565860B50704BD65ABD630A5F1372F2D826F3
3AD47C08B8AD3176A170C369EF3CEEB190134006D6135C5B8CCDBE1C11FFF1EC
3F6D8C46E15C4F5EB9ED9F31A129594D542D40DC3815CD075A0DBB648D868AF5
15A05C4BDB28BF23653A3AD96CF6AFC065DCCCB23D5D9A945F8CBB539DD3BFA8
DB8F1FBF9B6F25B41EB4309995CA3D5D6ABD70CBB4A2F0C6364E5439AD1045FF
72F6B45A30BD3A548CFAADDCC6C15D46F6D783D3E520215751DC98335A4ED512
D7D19235CDF911CC69F3CF4365B678EBF3E87C456A4E77339C74930083445588
462529C22A96A28C5CE87AFA0C981F26CAED5A1C8DBCDDA612624DBE0373F026
465185A4D8C73CCD8D71EE97116F8F7D341B87FD78F9CCB9FBDA2A7799711607
6BBA855AE9D5C505870DC85FDFAAA130A351D56AADBFBD6A7D52055E3200F8B7
8AE9A00092B55DEA8BDE224B4BA7FD4A191CB1FFC4CB995FEE1AC2883AB69E1A
AFFC09AB5B9AE311A030A5BA05E2213F9BBF016C8FA80689C069314D91274B20
53FCC65C7D7B3A7504887525BFFA060304931672A078BCD7F269595686310E34
E1ECA868899BC402D17EC36CE40D5041D7CEDA77F7764C9D98793F5334F574DF
E93CB10A5E8ADAE95CE63D2339557091B4B4911A4987CF21B7F1DBADBC2DD605
8EB72473C1F2EABCC44E0D0339EECB55DA74085606C3F89D57ACFBF5755A5395
CA8D4BD47E4EE8D8B882D3AB31A1F0C62E74654C7E041E4FF2693A38A9796064
46526B0A37E6B5BF8E48E80EDEF81E34DA8F6CC9025936A4D0E6D709D61B7B5C
AB550397117F3F9D2F5A542A64DEA8E1178F7337124D6B56BA92F659AAD694D7
391028731E01284BFEA635314A8DA8DF7A34EA3B6B2F8803BE6DCB423A9E8015
55EBD90EBAE8A00298B3B6B1C02BA516AF528122C1F2B07EF69F5466C2C36643
0D665D6561705509B7582D8301AF3C32E2F3B9433E3E04D62117C7E8A368BDE1
0D4DAA1C415B2A6573116D2A169AFEF700A83F55D88813585E89C94C07802BA8
3AE8F9BC3CDBFD9C2E35D062B1FD6E79E1EF104FC70B0AB09D12CA027F33F85A
22F0ECBB4AD55FE8C616B82C46CE69A600E4F767BD7A9C5F9B37A3196B038384
5DEF76A8884425FE598A63AEB19FA698C2AF7CAA4983CEC789268E22BA051EE0
20A40633D22D8F707626ED30E8273EAAD1C065F0B2E1718B5AC853ABE09330C3
B0082A71D557169BC1559B6D285A3499D41C4CCF1F74884EC3917EB9C574371E
AFE8578DDCA459B8D22C0188A8D150437B05FB92022C95EB6FBCC954216B5FED
CBC7C90B9A1F061376A9840FB64390A6BA99CFC8279A86A730C6DBFD14C53C4B
7277D676BD42203677E9ABEEC8C97E13DAA626474513B06F8734DD784F2FBBB9
B3B448B8E8221E380AB4A86D3A683B86A54129519D50DD4FE63B30954D805CED
A9A5D9A39C58B65B08E1C19555E927C6DBF7FD07252B2B57F62B905D6B488201
213D106A41033B26FFBAC2E616DA6ADA6D560BADF10E68872806CFD6F6E19D7B
57CF1F7A030A7BAD374F16A977E0ECB8742D034ADAF9C247DA19C8AEA74EF6CE
DAFD6B1DC562FD3B77E4D008BDE4D8C7FCA9895DA1AC9EAA01C32A0DA712B082
9438E77230D38FC4153E1711417B918BA6CC03203A5FF082AF880F48518D8271
C1121E4F1386B30A7F1BC6F10EA98443F8A65C867A109336B808BC9A8E2A75AC
F950835AA84B56F59DA4C8A18859C3B68F6B6DE09A6675F639EA9107BDB67B0F
54EBC564BC2D781B61C14363A54956BA78A2BB89C9F966C94EEFC29EE9F4E23E
C0BF750144DC289F0DEE1F8A25BB52E54F656FAFEE4BD2DA57E1306BBE648051
1D0CFD6A23A3DF082E3CF13197BF1B7FB22B2CD427BB78F455C9634DF989DC90
7BB2AE247B1C99AB2062855B2948341B0F857ACD750B59E370A6698C6A1F5287
72A4A9628A592E313956C242DF8277EDD2F1FDFB07CDC104275FFBF796D7518A
DF49FF3CDEC3BDFF1D290C382F244DF18005ECDABF0C5C2C64EEC4383E2E07DC
5C82587C071E59B46B7BEF31D268F39D9B12D534344FBA515E9DE8F166FAD1E2
7D1558967AAAD3829D3F7EC6938D20E5379F414532976ABA844D97A5E9078901
EAE4D0ED1F4C7EE7A2D80D891A5013D6409A38ACFA497F5A169EB7F9F4890DC4
62FA6A89EA48267331F086992B9CA9305E16611E6AEE67DCDD588A25D37F45B1
0DE75C802EE021E574B64B3969DE2E5061ED9364B646C38D4BBA86802CA6338A
94E135D2256920EBFB1AA22D9E90C7D16853F0DF9F2D942748EE540E4FCE63C6
5380D7AB4ADD6CB00FE8F7867E4862D8DB432F28331428CC350CDF7F447A65ED
D7683ECA35A22ADD06E9FE6BAF060913AEEE7B2B8EE4798E437698CC9EB2428E
74CE73F84D0D2292DE709D71FFF8901C3505370E6F1D4E28E6B7372492C65A88
159371B1D60D77CEC93B272B6C5394EE1D2EF9969DB2838B8E128553879A1BA5
2884B0A596E8FC3D1E648B7E26A4AC57DF09B9CE09B2F91D8CA618CA52AB3DBD
D005A56A420366069B73146A6F58E88BA49671A1AB7C2070C3D42AA770285143
40AE7D7868C0E1993506B07C086AD7D4F28CE2D15853FC5FBCBF9425D8012B9E
DB6E1E5002517659C8DA69DCEACA94F368537668843D281FC11782F1C5F71977
CA215349EE6F20565DE3D8D8212A40E1227A4B22965FA64A0B02C62BFDE97E6F
C3C54FED4057EF9D258C42D7440C78C5E0CC58A40DD74ECED4152F70A93CE71A
1B3A57C46F74A6D27BF98C97CCD31A8EA487260F224A3E40F52C65490AB4098A
7B9EEB54A5A415C8C88568F7D9EFE74BBB785FA18AA27D9201F28BBC477A20A5
D1307AA78EB8C7CAD409AB64B29E4115E45F5FADDCC80CA74B296C4265A40614
37F2ACD8386AC0202D6FDB6711E8CB06442F209D781E940ADDD6D881D4F8E874
357C533115923B90138FFE31D3577C6AAE60D768970FAAB682CD0DCA3E9A9A68
6393E4B772691C1013ADFFC90C508D51B02D2518ADCC7E79F7DE5DF9D18B8435
6129064DD1A3995E5A6F45D78287CC10A0EAFBF47223494C5EA934B1BC2F7C53
686C5880303F9E3ADC8B100D441D944686E1FD811C646C6DD0224F6CF55FA87F
D132EF50450879A25242A18683BD6D0266F8F333F3768D1952B0F32AA75106D8
EC0AB703F287E847CB91FFB88CD9DA174B49171822BDE34621CF41EA772230A6
3088F8D19CF2364A329162D39E166AC728B592EE5ABDC7A6402E9602317924D5
16D00ACCB2883C23844B82C47719AD1200332DF1F63256D5372F6AA8E14A3629
E20B6B00AB8DD946943A492A46600FBFCD96E60F882DCD45CC25F858E34B6DA7
451A0D385779D124604AA59F95A01F5A21C9DDD3781A58EBE5738C446C51F462
BFD40354E08D9FC1A863599B48696417EF6ABF08537F6DDE0C535B2292EDAAC8
43453352D5C5AB3E41D1C29136C63590BA4BBE2C8A3C670CA51AACB7BC28FD77
063CF4913D2F5DB4EED1DDD46602281BCFF79F658BC40D47855195881A5F958E
9752DDF382B7099B855E4580A9E9C375EC340C270BF01EDE1F28AFC0F13F534D
DA1DA88A869117857DA18B7A1FF1D980ED211463FD2D19EC1D07A9F817ADBD10
A031B35154D3FF754428AE63A7077B12640A2CC5AB45AC2B45ECC2D1DFE8FDEF
8B21FBFB63A58300298B194867D1451662B0E22E6C9CF6B7F96EADA72CAFD9B7
7A28795A05D073CE61E50D9AA9F310D585C984D490FCC91E86641CEF3D5E9D3E
18F4A0727557F231C58553CFCFCD20E316FB229762B1BA041D4189403A26FBDE
196D72A97C06E046620987A847208BD6E6F17B636D143DDDA27D02E0B1E32F1A
26E0FF3F033B360DE4E7CC93ABF947871A922E17AF6A1BACF9539C64A5F69CBA
DA4A990F28A9EE4E2D8C6666CB53D2B0B4DBBC688FB4C0A52A44ACF24C6D5C34
AD8FDA2097F3DE62E3AD33D4CF493209C97D1F58EAF669465C006C656C47A132
AED9D91FF93DA9079C9F80FF8DBADE8DD27EA9D12727397D147AF3333BAB636D
EADC5B42D6EBA2372E660771E23BE3ACFF0C019BC56AF655DA041F107A424FB6
DFF0766E64A8B73B00FB414CEF4DC2B8D4692EA19A51EB97842E01E24E6E5C25
C5AE5482BE42E291F7D5D10CE85E2411DE93B47B905AFEE27E96C7803196E12A
B36D5AD96F0B266AF075B53794F23393BCA8FBD27AF4467B663E97B54D1F72CC
1A4B453BCA5F893FCFE5F12FF3B1DC088EDEC7B7490862D6AC98EF5734485A4F
4BD7CF18486E33469E22F3D63C17F6145CEC6749BA1E05BFFFB607844380DBF3
4E5E3F9C880FBF17B54F3C1BAF2B827D03A54006AA746FB4FC9317835F1CEF2A
D777C29ED278C8624A4FB0D781C6DBC87B4411F2A7FEBB21BBEB88B9649047FE
8BB54855413934496B2822BD6D124A59912CF825C69AED3156B9BE7D9215968F
348821724496E5FF31CDB86580913E01B2D07A5D6AFC6C6F1DC90494442C4BE0
39206911D40A1381A7FEC1BFD4A0B09FC18EF0F3BC496247F8E45F1F435291E7
1E32292218289F2FA60EEDA512A622FABD11CAB9E946B53218B1FBBB16122267
8397E0378010F30BE7F8AF9E0D6E2CD142D3F2E9D74B5B0444355E7CEEE7B6AF
41407330799A4DA4206711AD6EDA7A5CA443336F585C1F8CCAA8276C31171983
A5BD7B16D13A54F527563C0A25083F3902BB6F7B31C74593D9C5D36A11B09B3F
13413ECFCB72DCE26360F8C57F2EEB50330C5A105340B6B0C9A122260CF08C54
198A5FEDA92457C0714652FDDE35AF650931CAC07E16B7DA7DA04EEB2F4EBB9F
106DD88388B2022EECE4BF9C6F651279A6BED52D24815CA61BB5A33CED684B3C
15BF2E5269A45BC414CD121937651A5A71B7AA487DFDA2D6726948C214F48457
BC609A708E66A3A6F0405F104F20A08DEA7ED1CC7C8C48CDD889C340BC4E059C
DC1F4D27A0DAE0F094D3251A7B28D8E8ADA4B2E16C3526AD7AD63BCFED4B19B0
8385F8027D20832B68F9B6C4E45A6092D8E6580A8C1B6B0AE0081D0514F3AACC
C205BEFD0C980306BF3E981ACD4A51F11BAE76F8EB5F5E911EBB00C57432A1BA
76FD752BD0E38ADB8D6A63C940B0A1ABBF9E1B782F39357BA2EA8DE3723A53F9
68EF850372939F8C4C4F8B484A25ED63125390E741C18E0586527B0E037A75ED
F72CCD4BB1D88FB9C8BAA8C9E5BE4A1F141F30C572F92E851273B0681A833A5D
8F68E5B5C9FCC187DFE5E4BE9FD2BD2F7ED5B2792B5DEFCD99B16A10B996FEFA
288C2B5D0B0F94313D53B9466505EB09B0AB45637E54FF2EB513FFA209976597
0AAC33F9D9F3569E31C67ACE5F81D8A8206624D659F4AA43DB6214A9C09B58B8
A8F2B0C744584F52B5960DF4E47E7BC06FDBB1FB5F6399B1D9B32406037E2B86
C88F3E5B6A59C4A7C06851ACA14B1F5503F371A5CF8B3C9786E7312C4FB6D227
BFB1C62AA3912D62A46B159295A3109DDE03DA81368105920847275D9AC39A11
3267F96E7B03C71559BE74334DEB94DAC8D2A934B6EC825651806618873F51FB
2556355AD34A4C5C03EF8EF6D0FBA8260C0B0E1128AE8BF69AF7D097E63A5D10
048A2FDD660E1547A4A8EC273F95B6F680E5CCFA662B1F4CE6807178024D7D22
8A833FD9C200214EF634D5BAE6833E0A4FF2E00E1F926BEDFEF2DFF8CCC9BA49
2A4F14127027BA8B8883ED0B1CF5A4BD0D45D767DFEF1F92B5080354C272EF79
425F797841A4740B408731E676008DF6EA7B0A0226EDAE9068155217DB6A2664
16A71C42E14612E46C480F42DAE4175A080E2881C48242B1F9ED1F0BF50DD76D
C023D98828214161F9D4EF11AD24CAE3E6E6B530C4470E556574B93773025CBF
BF046FBA5D5911560D0D4682D8B4E8DF38696582A8CB99A28AE9CBA7DCD6CC00
3F0434F1DF938CE861D93017B8360A4D8263FE0A11DA9D1474A268B34BAE2174
58A49134D8EECEC4873A3FCAEDB55E24115D17879B783324AE1DB8B6F9AEEA04
16AC5490B5216FC433604A5B36EB76A8AF41EB533A63D98EF217D95E900B24D3
1B8A30E1AF4DC34B04D6FE05B6309A40ED0E5F1BC9D72EA148E19CB1AEA803EB
4B9D674AA8A6DEDDCEF664ECFD1DDCFCD2C06E8FC5EE7BB625BE3B18DE09B11C
A3DFC245F599BE41206E9B7E4F12DBA06A4AD7708A37F3F328BDC58934FCAAFD
B884FE58AF41DC96324E507DD7799B0BE323523D784B2F6E0FE992D42F918FEE
607DF7CC71839247B57871A7347358665547A917997CC06F8658BA537712CC9C
A9B163F6655BBAD68C19706552D6A7E27AC918C7EDDFCC915DCEF9832E688D6A
1B859CFADE75BF4F5B0957CAE2814D3A0290582B9927EA94A1193D4F634F0D4E
2262F1AEAE15862988D5A2BD0721A4F1C26B37644525C2B990C6834B365C39F4
F57739933AA0DFD765EAB4A36153D700D28AB048E789E83D3FF72AE75DBA5FFE
3DE9EE0F48A7F843023DFADE830E3B4E9B1B0DDBDFD0E149958F4D0D78B38E97
A054CDE79C819605B178A7ADBD652F628D9E3B0CDF7B76D7C1A93CE8D7F947CD
85A8C556D4DA06DF1E043235A564125D07AF13949BD2A35DF849C3F73BA4F72A
DD553EB608129A333B76E36E6C429CE6861079992272D8F57B6AECF64082629E
50B557045B2EB8D8B18A131ED8D349027CF7B14D45AD26B4CE8392F0907FD9C2
23D651EB5FD25B0D36C8717DF68B132D0D4AEAC9C8EB5AAF9E333F8CB4436E35
B60C4D145FF12AA453252707CCD6B223429C2B8079CFB49EEB959E3C8BF1E450
601D5061D49092FC7575EF1510E027B85027DFE68070F3C31E3C8AF323AA7764
B12082212EBC69E79DAF211BE7111C244D6E692A82E03A9C4D6B20548A233A39
805758740836ACB0C8F2AD99FC47D570C71A7B9AB1931B193C5086C9DBD69514
C5E8F831EC92370E5FFC8574C5CDD066B63A45EFC843006159190919A1AD6285
151FE693550D54B71934C6203ED128A86345C4F3C74DEBA1E97A1C0CB8352567
D9BEF9E1DEE5416D562E7A7D5E36D07FE3B4985D738F5683D8ADBD8B39A2FF1D
1C706720837DEC057B5B6551A4D79F1D1AF51D2CDF543F2E22283D86FF97F400
2982730C4A02FDF45BD27D7D3FDA6C305F1FEEA97400607EAE3179ED8A638F32
93C3C7F4A9DD4CF75D5B36BFE1A429EF900C6798A516D31B36C0FB758B0A27EC
89B28A2CFB6C5692AD977D8B1EABF40FE3B17819AD4146555DFFBD21D08616E7
47C24421B28DDBFAA99931F548312380F751C4428C3D5E3AF5B9A4884F750976
2FBC570606D1E1FF399A2FE64B1EBFA55D046C042EF45CCEB3BB3702162C617C
D0AC2C60580A4DE666F10543A6E517F2CA0C7D35F28E5E2402CAE362B223FC36
48DCCFCD596C5BABEFBE3F175269D157D5606BC7CFDE0CDA90719285496866D5
82B7220CFBC1B3CF7A129F78E26998428364EDF02EBE37C6908B40A081ED6A6B
2E16E53245A82BD558AACBE28E34EB26C4C5577115C37F2BCBCCE349D4E6156E
A26E809B7F5F0392AFC85963CABC9A1BD8F915F6A7CD20918F059FBF48919092
FF88FA12D2FB7418A05FB98F78533BEEBCDE43F5480ED58DF3AC2023491BB572
3F0AA53F07C1B27CA468D7B7BC22352D0F110B229B4A82EDDC12F100A28D68A0
4E2B92129F51C8C8391C12719AC356AF7A5EB04F7D5D2E24986ECDA92F81479E
DAEB6D9478C35ACDB6E5D56EA32A28E2117F60484FB944786D0E07787CC03F31
C7C4A0C0FDA1025E573EAD9EA4D47E8A0F558E2285AD55410DDE69C1181BEF31
A0ACC5FB3AC01B3DEB100B71DEDDE8884307227DD85D5F9EDDBA85C7D115654F
93754826D3AB3795A8F58AF976508ABA63067C5EDE53D0006D2177B793F0866F
00EE475DF4694CC32C6EA4D5AD285246A98651FB92C700523B6F18ECC566DEFE
4DD31EE363813284F440430D235B115891AFF8FF5CEB8EB9C6F21B2E82D12BD7
8C0DB8CF95D874F7E0E6997C60E051C8668A6CAF58B451B6986BE4311FA74BF4
44F935B8B783D0038DC72ACF497E2FE6FA75CDC0547F071F631035C26747CDAC
983C076A98EA4765D7C713A180FB50048203CB15B05AC697DB027213273DF3A6
82439BC6DAE9E7BF52ABEE0CA1C4BB3DD9BB668199DC8C32F2868E4CDDF8D48F
25DC2A859DB27792AAF7A6F6E2352886E97E12D85634E40541C05BE2BBA1AAF6
5EE71D1C076EC82C94ADE595E25677A6E75C7FE1BEC1365056D94EE4B434C382
5137F70CF4DABCFC503B52D49739349C34847235721C2E2B5AFC35B1AD47ED91
AADA8D452BFDD9A39EEFB1444E42299A2B698825235C39BC39FBB13C19F7E411
56318A9FC1F72D0050E6489C4957470B8CC4D024C45A7FB5209AB233BB5249F7
341381BA4F2F94694C1622D82A375D707D1A6301C92B4191DAE559951618545B
92F7690DBEBDA5AA0FC36CCB6207766159811FF41ECDA39C00DE4C0CD8784A89
0CE10CCF997321F31DA224B42D01C2C0A2766610239FFE4D0CCEC472D2A88159
CF9C551CE6D9B9C6FC573E20A95ADC32186BEF7B3DE8CDCC266556AF8394421D
EC482380E105DC5F367D6CDEA517108D1EEF18628266F76C616D7251F16843D1
C7D899A45AE3695A124EED23395D29284DB965A4A6070E95799B15A72BA0E0B7
E9698CE3844E8CEDD83470905482FE17E68274C34BA59C9E08645BD71A10062E
7F06CA08B968E42A12430D719BE2D4312E0BCF0274B9CC7CAA2D6D0068A9C9FA
A1A0EFC062561F966C701288F54BA5D4549DE576A94D946D4B24C871E59D68B2
72851F91F00BCA473055F238144105930DE9DC9B2F7DBA562CBDC15711A10F83
B084581AA9EB014B1A1F78BF13B8380A6E620335B92022452CCFFFAE846FB645
ACE6CC25B0E3D02C0CB26DEC8C0BDB1FCB31C42A22A0898F8FA55518B07E370E
6E84097EC82870167A60E267B2903CADEDEBEE11A6A98282A11C736BF15A7196
B52A3F83CBF3E3C87F80E2D7563A
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 39158274 55380987 1000 600 600 (davide_bazzanella.dvi)
@start
%DVIPSBitmapFont: Fa tcrm1200 12 1
/Fa 1 182 df<01FC00007F00FFFC003FFF00FFFC003FFF00FFFC003FFF0007FC0001FF
0003FC0000FF0001FC00007F0001FC00007F0001FC00007F0001FC00007F0001FC00007F
0001FC00007F0001FC00007F0001FC00007F0001FC00007F0001FC00007F0001FC00007F
0001FC00007F0001FC00007F0001FC00007F0001FC00007F0001FC00007F0001FC00007F
0001FC00007F0001FC00007F0001FC00007F0001FC00007F0001FC00007F0001FC00007F
0001FC00007F0001FC00007F0001FC00007F0001FC0000FF0001FC0000FF0001FC0000FF
0001FC0001FF0001FC0001FF0001FC0001FF0001FE0003FF0001FE00077F8001FF000E7F
C001FF001C7FFE01FFC0787FFE01FFFFF07FFE01FC7F807F0001FC0000000001FC000000
0001FC0000000001FC0000000001FC0000000001FC0000000001FC0000000001FC000000
0001FC0000000001FC0000000001FC0000000001FC0000000001FC0000000001FC000000
0003FE00000000FFFFF8000000FFFFF8000000FFFFF80000002F3F7DAB36>181
D E
%EndDVIPSBitmapFont
/Fb 141[29 114[{}1 49.8132 /CMMI6 rf /Fc 165[55 7[47
54[75 75 26[{}4 99.6264 /CMEX10 rf /Fd 252[35 2[55{}2
66.4176 /CMSY8 rf /Fe 162[20 1[20 37[35 2[35 35 35 6[27
27 40[{}8 66.4176 /CMR8 rf /Ff 134[35 40 3[25 33 32 1[36
6[24 3[33 22[56 5[58 12[20 25[44 46 1[42 30[{}14 66.4176
/CMMI8 rf /Fg 149[28 2[50 50 62[77 13[77 9[50 12[77 1[77{}8
99.6264 /CMSY10 rf /Fh 134[48 55 3[35 14[45 51 14[66
11[43 4[81 2[73 5[27 27 24[61 63 3[42 1[50 4[57 21[{}16
99.6264 /CMMI12 rf /Fi 134[71 2[71 75 52 53 55 1[75 67
75 112 37 2[37 75 67 41 61 75 60 1[65 6[82 6[75 100 1[92
2[128 81 2[50 2[85 88 103 97 1[102 10[67 67 67 67 67
67 2[37 45 45[{}39 119.552 /CMBX12 rf /Fj 134[59 1[81
1[62 44 44 46 1[62 56 62 93 31 2[31 2[34 51 62 50 1[54
9[116 3[62 84 3[88 2[88 1[42 88 1[70 1[86 81 1[85 6[31
3[56 56 56 56 56 56 2[31 46[{}36 99.6264 /CMBX12 rf /Fk
134[85 3[90 63 64 66 1[90 81 90 134 45 2[45 2[49 74 90
72 90 78 13[90 120 8[60 2[101 1[124 117 1[122 10[81 81
81 81 81 81 49[{}30 143.462 /CMBX12 rf /Fl 129[49 3[43
51 51 70 51 54 38 38 38 51 54 49 54 81 27 51 30 27 54
49 30 43 54 43 54 49 3[27 1[27 60 73 1[100 1[73 70 54
72 1[66 76 73 89 61 76 50 35 73 77 64 66 75 70 69 73
3[76 2[27 49 49 49 49 49 49 49 49 49 49 49 27 33 27 76
49 38 38 5[49 20[54 54 57 11[{}76 99.6264 /CMR12 rf /Fm
166[88 4[85 1[86 4[107 3[42 3[80 89 85 1[88 10[59 59
2[59 59 59 59 47[{}15 119.552 /CMR12 rf /Fn 137[70 73
51 52 51 1[73 66 73 4[36 3[58 73 16[73 24[36 58[{}13
143.462 /CMR17 rf /Fo 138[129 90 92 95 2[116 129 194
65 2[65 1[116 71 106 129 2[113 11[179 4[159 2[220 140
2[87 73[{}19 206.559 /CMBX12 rf /Fp 139[85 1[86 1[80
91 88 1[74 1[61 43 3[80 1[85 1[88 12[113 88 115 1[106
121 4[81 3[102 106 1[113 111 66[{}21 143.462 /CMCSC10
rf /Fq 133[86 3[102 1[75 76 3[97 108 1[54 2[54 1[97 1[88
108 1[108 94 7[146 1[200 2[135 108 144 1[132 145 151
184 116 2[72 151 152 122 127 148 140 138 146 65[{}32
172.188 /CMBX12 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: a4
/setpagedevice where
{ pop << /PageSize [595 842] >> setpagedevice }
{ /a4 where { pop a4 } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 TeXcolorgray Black -128 -128
a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -128 -128 a -128 -128 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -128 -128 a -128 -128 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -128
-128 a 0 TeXcolorgray -128 -128 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -128 -128 a -128 -28
4016 4 v 0 TeXcolorgray 0 TeXcolorgray 427 586 a Fq(IMPERIAL)66
b(COLLEGE)g(LONDON)554 825 y(DEP)-16 b(AR)g(TMENT)66
b(OF)f(PHYSICS)1336 1252 y Fp(BSc)53 b(PR)l(OJECT)1069
1491 y(Final)h(Pr)m(oject)h(Repor)-10 b(t)547 2299 y
Fo(Multidimensional)76 b(Imaging)623 2666 y(of)i(Ultrafast)f(Laser)g
(Pulses)523 3310 y Fn(Sup)t(ervisor:)1541 b(Studen)l(t:)189
3474 y Fq(T)-16 b(obias)64 b(Witting)694 b(Da)-5 b(vide)65
b(Bazzanella)1077 5196 y Fm(A)m(CADEMIC)38 b(YEAR)h(2015/2016)p
-128 5230 V 1653 5486 a(TERM)f(2)p 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray 0 TeXcolorgray 1853 6192 a Fl(ii)p 0 TeXcolorgray
eop end
%%Page: 3 3
TeXDict begin 3 2 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -128 -28 a Fk(Abstract)-128 191 y Fl(W)-8
b(e)27 b(replicate)g(a)f(metho)s(d)h(for)e(m)m(ultidimensional)k(c)m
(haracterisation)e(of)f(ultrafast)g(laser)h(pulses)h(with)e(sligh)m(t)
-128 311 y(v)-5 b(ariation.)43 b(The)32 b(tec)m(hnique)h(is)f(based)g
(on)f(F)-8 b(ourier)30 b(transform)h(sp)s(ectral)h(in)m(terferometry)h
(and)e(is)g(spatially)-128 432 y(resolv)m(ed)k(in)e(three)g
(dimensions.)19 552 y(The)i(sample)h(b)s(eam)f(is)g(in)m(terfered)h
(with)f(a)f(cop)m(y)i(of)e(itself)h(dela)m(y)m(ed)i(and)d(passed)i
(through)f(a)f(pinhole,)-128 673 y(therefore)d(spatially)g(uniform.)43
b(The)31 b(in)m(terferogram)f(is)h(acquired)g(on)f(eac)m(h)h(pixel)g
(of)f(a)g(CMOS)h(camera)f(b)m(y)-128 793 y(scanning)41
b(the)e(dela)m(y)h(b)s(et)m(w)m(een)i(the)d(sample)h(and)g(the)f
(reference)i(pulse)f(and)f(allo)m(w)h(us)g(to)e(gather)h(high-)-128
913 y(resolution)c(spatially)f(resolv)m(ed)h(information)f(on)f(the)h
(phase)g(di\013erence)h(b)s(et)m(w)m(een)h(the)e(t)m(w)m(o)g(pulses.)48
b(This)-128 1034 y(information)30 b(is)h(then)g(elab)s(orated)f(b)m(y)h
(mean)f(of)g(F)-8 b(ourier)30 b(transform)g(along)f(with)i(the)f(sp)s
(ectral)h(ampliture)-128 1154 y(and)i(phase)h(obtained)f(with)g(a)f
(SEA-F-SPIDER.)19 1275 y(The)39 b(result)g(is)g(a)e(complete)j(c)m
(haracterisation)f(of)f(the)g(original)g(pulse)h(in)g(three)g(spatial)f
(dimensions)-128 1395 y(\(or)33 b(t)m(w)m(o)g(plus)g(time\).)-128
1655 y Fj(Keyw)m(ords:)-128 1839 y Fl(Laser)23 b(metrology)-8
b(,)24 b(fem)m(tosecond)f(pulses,)j(ultrafast)c(lasers,)j(m)m
(ultidimensional)f(c)m(haracterisation,)h(F)-8 b(ourier)-128
1960 y(transform)33 b(sp)s(ectral)g(in)m(terferometry)p
0 TeXcolorgray 1840 6192 a(iii)p 0 TeXcolorgray eop end
%%Page: 4 4
TeXDict begin 4 3 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray 0 TeXcolorgray 1841 6192 a Fl(iv)p 0 TeXcolorgray
eop end
%%Page: 5 5
TeXDict begin 5 4 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -128 -28 a Fk(Con)l(ten)l(ts)-128 191 y
Fj(1)91 b(In)m(tro)s(duction)3196 b(1)19 311 y Fl(1.1)99
b(Aims)51 b(.)f(.)f(.)h(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)f(.)h(.)g
(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)
g(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)g(.)p 0 TeXcolorgray
146 w(1)p 0 TeXcolorgray -128 529 a Fj(2)91 b(F)-9 b(ourier)37
b(transform)i(sp)s(ectral)e(in)m(terferometry)1772 b(2)19
650 y Fl(2.1)99 b(Cross-correlation)34 b(in)m(terferometry)60
b(.)50 b(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)g(.)g(.)
g(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)g(.)p 0 TeXcolorgray
146 w(2)p 0 TeXcolorgray 19 770 a(2.2)99 b(F)-8 b(ourier)32
b(transform)h(sp)s(ectral)g(in)m(terferometry)49 b(.)h(.)g(.)g(.)f(.)h
(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)g(.)p
0 TeXcolorgray 146 w(2)p 0 TeXcolorgray -128 988 a Fj(3)91
b(System)38 b(setup)3159 b(3)19 1108 y Fl(3.1)99 b(Laser)33
b(Pulses)i(Source)41 b(.)50 b(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)g
(.)g(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)f(.)h(.)
g(.)g(.)g(.)g(.)g(.)p 0 TeXcolorgray 146 w(3)p 0 TeXcolorgray
243 1229 a(3.1.1)111 b(HeNe)34 b(CW)f(laser)63 b(.)50
b(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)g
(.)g(.)g(.)g(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)g(.)p
0 TeXcolorgray 146 w(3)p 0 TeXcolorgray 19 1349 a(3.2)99
b(Mac)m(h-Zender)34 b(in)m(terferometer)78 b(.)50 b(.)g(.)g(.)g(.)g(.)g
(.)g(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)f(.)h(.)
g(.)g(.)g(.)g(.)g(.)p 0 TeXcolorgray 146 w(4)p 0 TeXcolorgray
19 1470 a(3.3)99 b(SEA-F-SPIDER)40 b(.)50 b(.)g(.)g(.)g(.)g(.)g(.)f(.)h
(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)g(.)g(.)
g(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)g(.)p 0 TeXcolorgray
146 w(4)p 0 TeXcolorgray -128 1688 a Fj(4)91 b(Data)38
b(Analysis)3127 b(4)19 1808 y Fl(4.1)99 b(Multidimensional)35
b(approac)m(h)e(.)49 b(.)h(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)f(.)h
(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)g(.)p
0 TeXcolorgray 146 w(5)p 0 TeXcolorgray 19 1928 a(4.2)99
b(Diagram)55 b(.)50 b(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)f(.)h(.)g
(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)
g(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)g(.)p 0 TeXcolorgray
146 w(5)p 0 TeXcolorgray -128 2146 a Fj(5)91 b(Results)3453
b(5)19 2267 y Fl(5.1)99 b(Simple)34 b(case)84 b(.)50
b(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g
(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)
g(.)g(.)p 0 TeXcolorgray 146 w(5)p 0 TeXcolorgray -128
2485 a Fj(6)91 b(Conclusions)3234 b(5)19 2605 y Fl(6.1)99
b(Impro)m(v)m(emen)m(ts)58 b(.)50 b(.)g(.)g(.)g(.)g(.)g(.)g(.)f(.)h(.)g
(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)
g(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)g(.)p 0 TeXcolorgray
146 w(5)p 0 TeXcolorgray 19 2725 a(6.2)99 b(Summary)92
b(.)50 b(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)g(.)
g(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)f(.)h(.)g
(.)g(.)g(.)g(.)g(.)p 0 TeXcolorgray 146 w(6)p 0 TeXcolorgray
0 TeXcolorgray 1855 6192 a(v)p 0 TeXcolorgray eop end
%%Page: 6 6
TeXDict begin 6 5 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray 0 TeXcolorgray 1841 6192 a Fl(vi)p 0 TeXcolorgray
eop end
%%Page: 1 7
TeXDict begin 1 6 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -128 -28 a Fk(1)162 b(In)l(tro)t(duction)-128
191 y Fl(Mo)s(dern)33 b(mo)s(de-lo)s(c)m(k)m(ed)h(lasers)f(are)f(able)g
(to)g(generate)h(ultrafast)f(laser)h(pulses)h(with)e(a)g(duration)g(do)
m(wn)h(to)-128 311 y(few)c(fem)m(toseconds)g([1,)f(2)o(,)g(3])f(and)h
(with)g(high)g(rep)s(etition)g(rates.)42 b(Those)29 b(pulses)g(are)f
(to)s(o)e(short)i(to)f(b)s(e)h(c)m(har-)-128 432 y(acterised)i(b)m(y)f
(an)m(y)g(presen)m(t-da)m(y)i(detector,)f(therefore)e(correlation,)i
(sp)s(ectrographic)f(and)g(in)m(terferometric)-128 552
y(tec)m(hniques)36 b(are)c(largely)i(used)f(in)g(laser)g(metrology)-8
b(.)19 673 y(Auto)s(correlation)39 b(and)g(cross-correlation)g(are)g(b)
m(y)h(far)f(the)g(most)g(used)h(metho)s(ds,)i(b)s(ecause)e(of)f(their)
-128 793 y(simplicit)m(y)-8 b(.)58 b(These)39 b(tec)m(hniques)g(are)e
(in)f(fact)h(the)g(easiest)h(tec)m(hniques)h(a)m(v)-5
b(ailable,)38 b(esp)s(ecially)h(auto)s(corre-)-128 913
y(lation,)33 b(but)f(they)h(allo)m(w)f(to)g(obtain)g(only)h(mo)s
(derate)f(information)g(on)g(the)g(laser)h(pulse.)45
b(Also)32 b(they)h(often)-128 1034 y(need)h(to)e(assume)i(the)f(shap)s
(e)h(of)e(test)h(pulse)h(to)e(estimate)i(its)f(duration.)19
1154 y(Among)41 b(the)g(sp)s(ectrographic)g(tec)m(hniques,)46
b(the)41 b(most)g(common)g(one)g(is)g(the)g(so)g(called)h(F)-8
b(requency-)-128 1275 y(Resolv)m(ed)41 b(Optical)e(Gating)f(\(FR)m
(OG\).)f(This)j(metho)s(d)f(in)m(v)m(olv)m(es)j(measuring)d(the)g(sp)s
(ectrum)h(of)e(the)h(test)-128 1395 y(pulse)34 b(as)f(a)f(function)h
(of)g(the)g(dela)m(y)g(b)s(et)m(w)m(een)i(its)e(replicas.)45
b(Amplitude)34 b(and)e(phase)i(information)e(on)h(the)-128
1515 y(ultrashort)g(pulse)h(is)f(then)g(extracted)h(using)f(an)g(in)m
(terativ)m(e-F)-8 b(ourier-transform)33 b(algorithm.)19
1636 y(Sp)s(ectral-Phase)i(In)m(terferometry)h(for)d(Direct)h
(Electric-\014eld)i(Reconstruction)f(\(SPIDER\))f(is)g(an)g(im-)-128
1756 y(plemen)m(taton)49 b(of)d(shearing)i(in)m(terferometry)g(and)f
(is)g(the)h(most)f(kno)m(wn)h(in)m(terferometric)g(metho)s(d.)87
b(A)-128 1876 y(SPIDER)40 b(apparatus)f(creates)h(t)m(w)m(o)f(replicas)
i(of)d(the)h(test)h(pulse)g(with)g(a)e(certain)i(dela)m(y)g(and)f(mix)g
(them)-128 1997 y(with)f(the)f(original)g(pulse)h(in)f(a)g(crystal)h
(with)f(nonlinear)h(prop)s(erties)f(\(usually)h(cut)g(for)e(Sum-F)-8
b(requency)-128 2117 y(Generation\).)50 b(The)35 b(output)g(from)f(the)
h(crystal)g(is)g(then)g(analysed)h(with)f(a)f(sp)s(ectrometer)i(and)e
(the)h(com-)-128 2238 y(plete)f(reconstruction)g(of)e(the)h(pulse)h(is)
f(obtained)g(through)g(a)f(direct)h(algebraic)g(relation)g(with)g(the)g
(data.)19 2358 y(These)f(tec)m(hniques)i(are)d(usually)h(implemen)m
(ted)h(considering)f(the)g(laser)f(pulse)h(transv)m(ersely)i(homoge-)
-128 2478 y(neous.)50 b(This)36 b(is)e(often)h(not)f(the)h(case,)g(b)s
(ecause)h(distortions)f(in)g(the)f(pulse)i(spatial)e(distribution)i(ma)
m(y)f(b)s(e)-128 2599 y(in)m(tro)s(duced)f(ev)m(en)g(b)m(y)g(simple)g
(optical)f(elemen)m(ts)i([4)o(].)19 2719 y(Mutidimensional)c(c)m
(haracterisation)f(of)f(a)g(ultrafast)g(laser)g(pulse)i(is)e(often)g
(based)h(on)f(m)m(ultiplexing)j(of)-128 2840 y(one)f(of)g(the)g
(foremen)m(tione)h(tec)m(hniques.)45 b(T)-8 b(o)31 b(giv)m(e)h(an)e
(example,)j(SPIDER)e(can)g(b)s(e)f(easily)i(m)m(ultiplexed)h(to)-128
2960 y(c)m(haracterise)i(one)f(spatial)f(dimension)i(and)e(the)g(time)h
(dep)s(endence)i(of)c(the)i(ultrafast)f(pulse.)46 b(FR)m(OG)32
b(to)s(o)-128 3080 y(can)h(b)s(e)g(scaled)h(to)e(allo)m(w)h(also)g(one)
g(spatial)f(dimension)j(c)m(haracterisation.)19 3201
y(F)-8 b(ull)31 b(\(3D\))g(c)m(haracterisation)h(of)f(an)h(ultrafast)f
(laser)h(pulse)h(require)g(further)f(m)m(ultiplexing)h(or)e(mixing)-128
3321 y(di\013eren)m(t)j(tec)m(hniques)i(in)m(to)c(a)h(more)g(complex)h
(one.)-128 3610 y Fi(1.1)136 b(Aims)-128 3795 y Fl(The)43
b(aim)f(of)f(this)h(pro)5 b(ject)43 b(is)f(to)f(obtain)h(a)f(complete)i
(spatial)f(and)g(temp)s(oral)f(c)m(haracterisation)i(of)e(an)-128
3915 y(ultrafast)33 b(laser)g(pulse,)h(that)e(is)h(a)g(three)g
(dimensional)h(\(3D\))e(c)m(haracterisation.)19 4035
y(Our)i(plan)g(is)g(to)g(build)g(a)g(Mac)m(h-Zender)h(in)m
(terferometer)g(to)f(obtain)g(a)f(spatially)i(resolv)m(ed)h(in)m
(terfero-)-128 4156 y(gram)f(of)g(the)g(laser)h(pulse,)h(and)e(con)m(v)
m(ert)i(it)e(to)g(the)g(frequency)i(domain)f(via)f(F)-8
b(ourier)35 b(transform.)51 b(Then,)-128 4276 y(b)m(y)33
b(adding)g(information)f(on)g(the)g(frequency)i(dep)s(endance)g(of)e
(the)h(phase)g(and)f(the)g(amplitude,)i(gathered)-128
4397 y(using)41 b(the)f(SEA-F-SPIDER)f(already)h(a)m(v)-5
b(ailable)40 b(in)g(the)g(lab)s(oratory)-8 b(,)41 b(w)m(e)f(will)h(c)m
(haracterise)g(the)f(b)s(eam)-128 4517 y(spatial)33 b(distribution)h
(in)f(three)g(dimensions.)19 4637 y(The)h(source)g(to)e(sample)i(is)g
(a)e(Ti:Sapphire)j(laser)e(whic)m(h)h(generates)g(30)16
b(fs)33 b(pulses,)i(successiv)m(ely)j(sp)s(ec-)-128 4758
y(trally)49 b(broadened)h(b)m(y)f(a)f(hollo)m(w)h(core)g(\014b)s(er)g
(and)g(temp)s(orally)g(compressed)i(b)m(y)e(broadband)g(c)m(hirp)s(ed)
-128 4878 y(mirrors)33 b(in)m(to)g(the)g(\014nal)g(3)p
Fh(:)p Fl(5)16 b(fs)33 b(pulse)h(with)f(a)f(bandwidth)i(that)e(spans)i
(from)e(500)16 b(nm)33 b(to)f(1000)15 b(nm)q(.)p 0 TeXcolorgray
1856 6192 a(1)p 0 TeXcolorgray eop end
%%Page: 2 8
TeXDict begin 2 7 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -128 -28 a Fk(2)162 b(F)-13 b(ourier)52
b(transform)i(sp)t(ectral)f(in)l(terferometry)-128 191
y Fl(Among)36 b(the)g(di\013eren)m(t)g(tec)m(hniques,)k(w)m(e)c(ha)m(v)
m(e)h(c)m(hosen)g(to)e(dev)m(elop)i(a)e(spatially)h(resolv)m(ed)i(v)m
(ersion)f(of)e(the)-128 311 y(F)-8 b(ourier)38 b(transform)g(sp)s
(ectral)h(in)m(terferometry)-8 b(.)62 b(This)39 b(metho)s(d)g(is)f
(based)h(on)f(the)h(in)m(terference)h(b)s(et)m(w)m(een)-128
432 y(the)35 b(test)g(b)s(eam)f(and)g(a)g(reference)h(b)s(eam,)g(whic)m
(h)h(is)e(often)g(a)g(small)h(homogeneous)g(p)s(ortion)e(of)h(a)g(cop)m
(y)h(of)-128 552 y(the)e(test)h(pulse.)-128 836 y Fi(2.1)136
b(Cross-correlation)47 b(in)l(terferometry)-128 1021
y Fl(Consider)e(an)f(unkno)m(wn)h(laser)f(pulse,)j(its)d(time)g
(complex)h(\014eld)f(and)g(the)g(corresp)s(onding)g(\014eld)g(in)g(the)
-128 1141 y(sp)s(ectral)34 b(domain)f(are)f(giv)m(en)i(b)m(y)1501
1326 y Fh(U)10 b Fl(\()p Fh(t)p Fl(\))29 b(=)e Fg(j)p
Fh(U)10 b Fl(\()p Fh(t)p Fl(\))p Fg(j)p Fh(e)2108 1285
y Ff(i\036)p Fe(\()p Ff(t)p Fe(\))3764 1326 y Fl(\(1\))1475
1461 y(~)1459 1486 y Fh(U)g Fl(\()p Fh(!)t Fl(\))27 b(=)h
Fg(j)1851 1461 y Fl(~)1835 1486 y Fh(U)10 b Fl(\()p Fh(!)t
Fl(\))p Fg(j)p Fh(e)2125 1445 y Ff(i )r Fe(\()p Ff(!)r
Fe(\))3764 1486 y Fl(\(2\))-128 1687 y(whic)m(h)41 b(are)f(link)m(ed)h
(together)f(b)m(y)g(F)-8 b(ourier)39 b(transform)h Fh(U)10
b Fl(\()p Fh(t)p Fl(\))40 b(=)g(FT)2432 1645 y Fd(\000)p
Fe(1)2526 1687 y Fg(f)2592 1661 y Fl(~)2576 1687 y Fh(U)10
b Fl(\()p Fh(!)t Fl(\))p Fg(g)39 b Fl(and)3095 1661 y(~)3078
1687 y Fh(U)11 b Fl(\()p Fh(!)t Fl(\))39 b(=)g(FT)17
b Fg(f)p Fh(U)10 b Fl(\()p Fh(t)p Fl(\))p Fg(g)-128 1807
y Fl(The)37 b(camera)f(measures)h(the)f(in)m(tensit)m(y)h(of)e(the)h
(pulses)h(o)m(v)m(er)g(a)e(time)h(m)m(uc)m(h)h(longer)e(than)h(a)f
(single)h(cycle,)-128 1927 y(therefore)e(w)m(e)f(ma)m(y)h(write)f(that)
f(for)g(eac)m(h)i(dela)m(y)f Fh(\034)11 b Fl(:)812 2155
y Fh(I)d Fl(\()p Fh(\034)j Fl(\))28 b(=)1123 2020 y Fc(Z)1239
2155 y Fg(j)p Fh(U)10 b Fl(\()p Fh(t)p Fl(\))23 b(+)f
Fh(U)1641 2170 y Ff(r)1679 2155 y Fl(\()p Fh(t)g Fg(\000)h
Fh(\034)11 b Fl(\))p Fg(j)1993 2114 y Fe(2)2033 2155
y Fl(d)p Fh(t)1020 2410 y Fl(=)1123 2274 y Fc(Z)1239
2410 y Fg(j)p Fh(U)f Fl(\()p Fh(t)p Fl(\))p Fg(j)1482
2369 y Fe(2)1522 2410 y Fl(d)p Fh(t)22 b Fl(+)1731 2274
y Fc(Z)1848 2410 y Fg(j)p Fh(U)1942 2425 y Ff(r)1980
2410 y Fl(\()p Fh(t)p Fl(\))p Fg(j)2119 2369 y Fe(2)2158
2410 y Fl(d)p Fh(t)1112 2664 y Fl(+)1210 2529 y Fc(Z)1326
2664 y Fh(U)10 b Fl(\()p Fh(t)p Fl(\))p Fh(U)1589 2623
y Fd(\003)1579 2689 y Ff(r)1630 2664 y Fl(\()p Fh(t)22
b Fg(\000)h Fh(\034)11 b Fl(\)d)p Fh(t)23 b Fl(+)2126
2529 y Fc(Z)2242 2664 y Fh(U)2318 2623 y Fd(\003)2358
2664 y Fl(\()p Fh(t)p Fl(\))p Fh(U)2535 2679 y Ff(r)2573
2664 y Fl(\()p Fh(t)g Fg(\000)f Fh(\034)11 b Fl(\)d)p
Fh(t)816 b Fl(\(3\))-128 2903 y(As)23 b(w)m(e)g(can)f(see)g(the)h
(\014rst)f(t)m(w)m(o)g(terms)h(are)f(actually)g(just)g(the)g
(irradiance)h(of)e(the)h(test)h(b)s(eam)f Fh(I)3263 2918
y Fe(0)3330 2903 y Fl(=)3433 2823 y Fc(R)3516 2903 y
Fg(j)p Fh(U)10 b Fl(\()p Fh(t)p Fl(\))p Fg(j)3759 2867
y Fe(2)3799 2903 y Fl(d)p Fh(t)-128 3023 y Fl(and)35
b(of)g(the)g(reference)h(b)s(eam)f Fh(I)1067 3038 y Ff(r)1137
3023 y Fl(=)1244 2943 y Fc(R)1327 3023 y Fg(j)p Fh(U)1421
3038 y Ff(r)1459 3023 y Fl(\()p Fh(t)p Fl(\))p Fg(j)1598
2987 y Fe(2)1637 3023 y Fl(d)p Fh(t)h Fl(and)e(are)h(therefore)h
(constan)m(t)f(for)g(eac)m(h)g(v)-5 b(alue)36 b(of)e(dela)m(y)-128
3144 y Fh(\034)11 b Fl(.)19 3264 y(Those)38 b(comp)s(onen)m(t)f(ma)m(y)
h(b)s(e)f(isolated)g(and)g(subtracted)h(to)e(the)h(in)m(terferogram)g
(either)h(b)m(y)f(separate)-128 3385 y(measuremen)m(t)e(or)e(b)m(y)g
(remo)m(ving)h(the)f(p)s(eak)g(at)f Fh(!)f Fl(=)d(0)k(in)h(the)g
(frequency)h(domain.)-128 3668 y Fi(2.2)136 b(F)-11 b(ourier)45
b(transform)g(sp)t(ectral)h(in)l(terferometry)-128 3853
y Fl(A)35 b(sp)s(ecial)h(case)g(of)e(the)h(auto)s(correlation)f(in)m
(terferometry)j(is)e(the)g(F)-8 b(ourier)34 b(transform)h(sp)s(ectral)h
(in)m(terfer-)-128 3973 y(ometry)-8 b(.)45 b(It)32 b(is)h(based)h(on)e
(the)h(information)g(gathered)g(b)m(y)g(the)g(auto)s(correlation)f(in)m
(terferometry)-8 b(.)19 4094 y(By)33 b(applying)g(the)g(F)-8
b(ourier)33 b(transform)f(to)g(Eq.)45 b(\(3\))32 b(w)m(e)h(obtain)-34
4336 y(FT)p Fg(f)p Fh(I)8 b Fl(\()p Fh(\034)j Fl(\))p
Fg(g)27 b Fl(=)h(FT)662 4195 y Fc(\032)736 4200 y(Z)853
4336 y Fg(j)p Fh(U)10 b Fl(\()p Fh(t)p Fl(\))p Fg(j)1096
4295 y Fe(2)1135 4336 y Fl(d)p Fh(t)23 b Fl(+)1345 4200
y Fc(Z)1461 4336 y Fg(j)p Fh(U)1555 4351 y Ff(r)1593
4336 y Fl(\()p Fh(t)p Fl(\))p Fg(j)1732 4295 y Fe(2)1771
4336 y Fl(d)p Fh(t)g Fl(+)1981 4200 y Fc(Z)2097 4336
y Fh(U)10 b Fl(\()p Fh(t)p Fl(\))p Fh(U)2360 4295 y Fd(\003)2350
4361 y Ff(r)2401 4336 y Fl(\()p Fh(t)22 b Fg(\000)h Fh(\034)11
b Fl(\)d)p Fh(t)23 b Fl(+)2897 4200 y Fc(Z)3013 4336
y Fh(U)3089 4295 y Fd(\003)3129 4336 y Fl(\()p Fh(t)p
Fl(\))p Fh(U)3306 4351 y Ff(r)3344 4336 y Fl(\()p Fh(t)g
Fg(\000)f Fh(\034)11 b Fl(\)d)p Fh(t)3719 4195 y Fc(\033)407
4608 y Fl(=)28 b(FT)662 4468 y Fc(\032)736 4473 y(Z)853
4608 y Fg(j)p Fh(U)10 b Fl(\()p Fh(t)p Fl(\))p Fg(j)1096
4567 y Fe(2)1135 4608 y Fl(d)p Fh(t)23 b Fl(+)1345 4473
y Fc(Z)1461 4608 y Fg(j)p Fh(U)1555 4623 y Ff(r)1593
4608 y Fl(\()p Fh(t)p Fl(\))p Fg(j)1732 4567 y Fe(2)1771
4608 y Fl(d)p Fh(t)1860 4468 y Fc(\033)1957 4608 y Fl(+)2072
4583 y(~)2055 4608 y Fh(U)11 b Fl(\()p Fh(!)t Fl(\))2289
4583 y(~)2273 4608 y Fh(U)2349 4567 y Fd(\003)2339 4633
y Ff(r)2388 4608 y Fl(\()p Fh(!)t Fl(\))22 b(+)2665 4583
y(~)2649 4608 y Fh(U)2725 4567 y Fd(\003)2765 4608 y
Fl(\()p Fg(\000)p Fh(!)t Fl(\))p Fh(U)3049 4623 y Ff(r)3087
4608 y Fl(\()p Fg(\000)p Fh(!)t Fl(\))459 b(\(4\))-128
4867 y(where)171 4842 y(~)154 4867 y Fh(U)11 b Fl(\()p
Fh(!)t Fl(\))32 b(is)h(the)g(sp)s(ectral)g(domain)g(complex)h(\014eld,)
f(as)g(in)g(Eq.)44 b(\(2\).)19 4987 y(The)c(\014rst)g(term)g(is)f(the)h
(F)-8 b(ourier)39 b(transform)h(of)e(a)h(constan)m(t)i(and)e(is)h
(represen)m(ted)i(in)d(the)h(frequency)-128 5108 y(domain)32
b(b)m(y)h(a)e(delta)h(at)f Fh(!)g Fl(=)c(0.)43 b(The)33
b(second)g(and)e(third)h(terms)g(are)g(represen)m(ted)i(b)m(y)e(t)m(w)m
(o)h(p)s(eaks)f(around)-128 5228 y Fh(!)-67 5243 y Fe(0)14
5228 y Fl(and)42 b Fg(\000)p Fh(!)351 5243 y Fe(0)391
5228 y Fl(,)i(where)f Fh(!)814 5243 y Fe(0)895 5228 y
Fl(the)f(main)h(frequency)g(of)f(the)g(pulse.)73 b(Considering)43
b(only)f(the)g(second)i(term,)-128 5348 y(whic)m(h)35
b(can)d(b)s(e)h(isolated)g(from)g(the)g(term)g(at)f(zero)h(and)g(at)f
Fg(\000)p Fh(!)t Fl(,)g(it)h(ma)m(y)g(b)s(e)g(rewritten)h(as:)1167
5533 y Fh(A)p Fl(\()p Fh(!)t Fl(\))27 b(=)g Fg(j)1555
5508 y Fl(~)1539 5533 y Fh(U)10 b Fl(\()p Fh(!)t Fl(\))p
Fg(jj)1828 5508 y Fl(~)1812 5533 y Fh(U)1888 5492 y Fd(\003)1878
5558 y Ff(r)1927 5533 y Fl(\()p Fh(!)t Fl(\))p Fg(j)p
Fh(e)2141 5492 y Ff(i)p Fe([)p Ff( )r Fe(\()p Ff(!)r
Fe(\))p Fd(\000)p Ff( )2434 5500 y Fb(r)2469 5492 y Fe(\()p
Ff(!)r Fe(\)])3764 5533 y Fl(\(5\))-128 5718 y(and)33
b(\014nally)-8 b(,)33 b(w)m(e)h(get)1116 5863 y(~)1100
5888 y Fh(U)10 b Fl(\()p Fh(!)t Fl(\))27 b(=)h Fg(j)1492
5863 y Fl(~)1476 5888 y Fh(U)10 b Fl(\()p Fh(!)t Fl(\))p
Fg(j)p Fh(e)1766 5847 y Ff(i )r Fe(\()p Ff(!)r Fe(\))1971
5888 y Fl(=)2133 5820 y Fh(A)p Fl(\()p Fh(!)t Fl(\))p
2084 5865 312 4 v 2084 5968 a Fg(j)2128 5943 y Fl(~)2112
5968 y Fh(U)2188 5939 y Fd(\003)2178 5993 y Ff(r)2228
5968 y Fl(\()p Fh(!)t Fl(\))p Fg(j)2406 5888 y Fh(e)2451
5847 y Ff(i )2521 5855 y Fb(r)2556 5847 y Fe(\()p Ff(!)r
Fe(\))3764 5888 y Fl(\(6\))p 0 TeXcolorgray 1856 6192
a(2)p 0 TeXcolorgray eop end
%%Page: 3 9
TeXDict begin 3 8 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray 0 TeXcolorgray -60 2100 a @beginspecial
0 @llx 0 @lly 513 @urx 297 @ury 4617 @rwi @setspecial
%%BeginDocument: data/spectrum_linlog.eps
%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 0 0 513 297
%%HiResBoundingBox: 0.000000 0.000000 513.000000 297.000000
%%Creator: GPL Ghostscript 916 (ps2write)
%%LanguageLevel: 2
%%CreationDate: D:20160408162155+02'00'
%%EndComments
%%BeginProlog
save
countdictstack
mark
newpath
/showpage {} def
/setpagedevice {pop} def
%%EndProlog
%%Page 1 1
%%BeginProlog
/DSC_OPDFREAD true def
/SetPageSize true def
/EPS2Write false def
currentdict/DSC_OPDFREAD known{
currentdict/DSC_OPDFREAD get
}{
false
}ifelse
10 dict begin
/DSC_OPDFREAD exch def
/this currentdict def
/y 720 def
/ebuf 200 string def
/prnt{
36//this/y get moveto//ebuf cvs show
//this/y 2 copy get 12 sub put
}bind def
/newline{
36//this/y get moveto
//this/y 2 copy get 12 sub put
}bind def
errordict/handleerror
{systemdict begin
$error begin
newerror
{(%%[ Error handled by opdfread.ps : )print errorname//ebuf cvs print(; OffendingCommand: )
print/command load//ebuf cvs print( ]%%)= flush
/newerror false store vmstatus pop pop 0 ne
{grestoreall
}if
errorname(VMerror)ne
{showpage
}if
initgraphics
0 720 moveto
errorname(VMerror)eq
{//this/ehsave known
{clear//this/ehsave get restore 2 vmreclaim
}if
vmstatus exch pop exch pop
}
/Courier 12 selectfont
{
(ERROR: )//prnt exec errorname//prnt exec
(OFFENDING COMMAND: )//prnt exec
/command load//prnt exec
$error/ostack known{
(%%[STACK:)=
(STACK:)//prnt exec
$error/ostack get aload length{
//newline exec
dup mark eq{
(-mark-)dup = show
}{
dup type/nametype eq{
dup xcheck not{
(/)show
(/)print
}if
}if
dup =//ebuf cvs show
}ifelse
}repeat
}if
}ifelse
(%%]%)=
//systemdict/showpage get exec
quit
}if
end
end
}bind readonly put
end
50 dict begin
/DefaultSwitch
{
dup where{
pop pop
}{
false def
}ifelse
}bind def
/=string 256 string def
/=only{
//=string cvs print
}bind def
/HexDigits(0123456789ABCDEF)readonly def
/PrintHex
{8{
dup -28 bitshift 15 and//HexDigits exch 1 getinterval//=only exec
4 bitshift
}repeat
pop
}bind def
/PDFR_DEBUG DefaultSwitch
/PDFR_DUMP DefaultSwitch
/PDFR_STREAM DefaultSwitch
/TTFDEBUG DefaultSwitch
/RotatePages DefaultSwitch
/FitPages DefaultSwitch
/CenterPages DefaultSwitch
/SetPageSize DefaultSwitch
/error
{
counttomark 1 sub -1 0{
index dup type/arraytype eq{==}{=only}ifelse
}for
()=
cleartomark
....Undefined
}bind def
//SetPageSize{
//RotatePages//FitPages or//CenterPages or{
mark(/RotatePages, /FitPages and CenterPages are not allowed with /SetPageSize)//error exec
}if
}
{
//FitPages//CenterPages and{
mark(CenterPages is not allowed with /FitPages)//error exec
}if
}
ifelse
/knownget
{
2 copy known{
get true
}{
pop pop false
}ifelse
}bind def
/IsUpper
{dup(A)0 get ge exch(Z)0 get le and
}bind def
/cpa2g{
dup length array
0 1 2 index length 1 sub{
dup 3 index exch get cp2g
3 copy put pop pop
}for
exch pop
}bind def
/cpd2g{
dup length dict exch{
cp2g 2 index 3 1 roll put
}forall
}bind def
/cps2g{
dup length string copy
}bind def
/cp2gprocs
<</arraytype//cpa2g/dicttype//cpd2g/packedarraytype//cpa2g/stringtype//cps2g >>
def
/cp2g{
dup gcheck not{
dup//cp2gprocs 1 index type
2 copy known{
get currentglobal 3 1 roll true setglobal exec exch setglobal
1 index wcheck not{readonly}if
1 index xcheck{cvx}if
exch pop
}{
pop pop
}ifelse
}if
}bind def
/BlockBuffer 65535 string def
/PDFReader currentdict def
/ObjectRegistryMaxLength 50000 def
/ObjectRegistry 10 dict def
ObjectRegistry
begin 0 ObjectRegistryMaxLength dict def end
/CurrentObject null def
/DoneDocumentStructure false def
/GraphicState 20 dict begin
/InitialTextMatrix matrix def
/InitialMatrix matrix currentmatrix def
currentdict end def
/TempMatrix matrix def
/GraphicStateStack 20 array def
/GraphicStateStackPointer 0 def
/InitialTextMatrixStack 20 array def
/InitialTextMatrixStackPointer 0 def
/PDFColorSpaces 50 dict def
/InstalledFonts 50 dict def
/MacRomanEncodingInverse null def
currentglobal false setglobal
userdict/PDFR_InitialGS gstate put
userdict/PDFR_Patterns 50 dict put
userdict/FuncDataReader 10 dict put
setglobal
/InitialExtGState 20 dict begin
/BG2 currentblackgeneration cp2g def
/UCR2 currentundercolorremoval cp2g def
/TR2 currentglobal false setglobal[currentcolortransfer]exch setglobal cp2g def
/HT currenthalftone cp2g def
currentdict end readonly def
/InitialGraphicState 20 dict begin
/FontSize 0 def
/CharacterSpacing 0 def
/TextLeading 0 def
/TextRenderingMode 0 def
/WordSpacing 0 def
currentdict end readonly def
/SimpleColorSpaceNames 15 dict begin
/DeviceGray true def
/DeviceRGB true def
/DeviceCMYK true def
currentdict end readonly def
/1_24_bitshift_1_sub 1 24 bitshift 1 sub def
/ReadFontProcs 10 dict def
/GetObject{
dup ObjectRegistryMaxLength idiv
//PDFReader /ObjectRegistry get exch knownget
{exch knownget}{pop false}ifelse
}bind def
/PutObject
{1 index ObjectRegistryMaxLength idiv
//PDFReader /ObjectRegistry get 1 index knownget{
exch pop 3 1 roll put}{
//PDFReader /ObjectRegistry get dup begin
1 index ObjectRegistryMaxLength dict def
end exch get 3 1 roll put
}ifelse
}bind def
/Register
{1 index GetObject{
dup xcheck{
4 3 roll pop
//PDFR_DEBUG{
(Have a daemon for ) print 2 index ==
}if
exec
}{
dup null ne{
mark (The object ) 4 index (is already defined : ) 4 index //error exec
}{
pop
}ifelse
3 2 roll
exec
}ifelse
}{
3 2 roll
exec
}ifelse
PutObject
} bind def
/IsRegistered{
GetObject{
null ne
}{
false
}ifelse
}bind def
/GetRegistered{
dup GetObject not{
exch mark exch (Object ) exch ( isn't defined before needed (1).) //error exec
}if
dup xcheck{
exch mark exch (Object ) exch ( isn't defined before needed (2).) //error exec
}{
dup null eq{
exch mark exch (Object ) exch ( isn't defined before needed (3).) //error exec
}if
exch pop
}ifelse
}bind def
/StandardFontNames<<
/Times-Roman true
/Helvetica true
/Courier true
/Symbol true
/Times-Bold true
/Helvetica-Bold true
/Courier-Bold true
/ZapfDingbats true
/Times-Italic true
/Helvetica-Oblique true
/Courier-Oblique true
/Times-BoldItalic true
/Helvetica-BoldOblique true
/Courier-BoldOblique true
>>def
/CleanAllResources
{//PDFR_DEBUG{
(CleanAllResources beg)=
}if
//PDFReader/ObjectRegistry get{
dup length 0 exch 1 exch 1 sub{
2 copy get dup xcheck{
pop pop
}{
dup null eq{
pop pop
}{
dup type/dicttype eq{/.Global known}{pop false}ifelse{
pop
}{
//PDFR_DEBUG{
(Dropping )print dup =
}if
1 index exch/DroppedObject put
}ifelse
}ifelse
}ifelse
}for
pop
}forall
FontDirectory length dict begin
FontDirectory{
pop
dup//StandardFontNames exch known not{
dup null def
}if
pop
}forall
currentdict
end{
pop
//PDFR_DEBUG{
(Undefining font )print dup =
}if
undefinefont
}forall
//PDFR_DEBUG{
(CleanAllResources end)=
}if
}bind def
/PrintReference
{
//PDFR_DEBUG{
({ )print
dup{
=only( )print
}forall
( })=
}if
}bind def
/R
{
0 ne{
exch mark exch(A referred object generation )exch( isn't 0.)//error exec
}if
[
exch//GetRegistered/exec load
]cvx
//PrintReference exec
}bind def
/IsObjRef
{
dup type/arraytype eq{
dup length 3 eq{
dup xcheck exch
dup 0 get type/integertype eq 3 2 roll and exch
dup 1 get//GetRegistered eq 3 2 roll and exch
2 get/exec load eq and
}{
pop false
}ifelse
}{
pop false
}ifelse
}bind def
/DoNothing
{
}def
/RunTypeDaemon
{
dup type/dicttype eq{
dup/Type//knownget exec{
//PDFReader/TypeDaemons get exch
//knownget exec{
exec
}if
}if
}if
}bind def
/obj
{
//PDFR_DEBUG{
(Defining )print 1 index =only( )print dup =only( obj)=
}if
0 ne{
exch mark exch(An object generation )exch( isn't 0.)//error exec
}if
}bind def
/endobj
{
//PDFR_DEBUG{
(endobj )=
}if
count 1 eq {pop} {dup type/dicttype eq{
dup/.endobj_daemon//knownget exec{
//PDFR_DEBUG{(.endobj_daemon for )print 2 index =}if
exec
}if
}if
dup type/dicttype eq{dup/ImmediateExec known}{false}ifelse{
pop pop
}{
//PDFR_DEBUG{
(Storing )print 1 index =
}if
//RunTypeDaemon exec
//DoNothing 3 1 roll//Register exec
}ifelse
}ifelse}bind def
/StoreBlock
{
//PDFR_DEBUG{
(StoreBlock )print//PDFReader/BlockCount get =only(, Length = )print dup length =
}if
dup length string copy
//PDFReader/BlockCount get exch
//PDFReader/CurrentObject get 3 1 roll
put
//PDFReader/BlockCount get 1 add
//PDFReader exch/BlockCount exch put
}bind def
/CheckLength
{dup type/integertype ne{
mark(Object length isn't an integer.)//error exec
}if
}bind def
/ResolveD
{
3 copy pop get
dup//IsObjRef exec{
//PDFR_DEBUG{
(Resolving )print//PrintReference exec
}if
exec
exch exec
}{
exch pop
}ifelse
dup 4 1 roll
put
}bind def
/ResolveA
{2 index 2 index get
dup//IsObjRef exec{
exec
exch exec
3 copy put
}{
exch pop
}ifelse
exch pop exch pop
}bind def
/StoreStream
{
dup//PDFReader exch/CurrentObject exch put
//PDFReader/BlockCount 0 put
dup/Length//CheckLength//ResolveD exec
//PDFR_DEBUG{
(StoreStream Length = )print dup =
}if
currentfile exch()/SubFileDecode filter
{dup//BlockBuffer readstring{
//StoreBlock exec
}{
//StoreBlock exec
exit
}ifelse
}loop
pop
//PDFReader/CurrentObject null put
//PDFR_DEBUG{
(StoreStream end.)=
}if
}bind def
/MakeStreamDumper
{
//PDFR_DEBUG{
(MakeStreamDumper beg.)=
}if
currentglobal exch dup gcheck setglobal
[exch
1 dict dup/c 0 put exch
1024 string
{readstring pop
(StreamDumper )print 1 index/c get =string cvs print( )print
dup length =string cvs print( <)print dup print(>\n)print
dup length
3 2 roll
dup/c get
3 2 roll
add/c exch put
}/exec load
]
cvx 0()/SubFileDecode filter
exch setglobal
//PDFR_DEBUG{
(MakeStreamDumper end.)=
}if
}bind def
/ShortFilterNames 15 dict begin
/AHx/ASCIIHexDecode def
/A85/ASCII85Decode def
/LZW/LZWDecode def
/Fl/FlateDecode def
/RL/RunLengthDecode def
/CCF/CCITTFaxDecode def
/DCT/DCTDecode def
currentdict end readonly def
/AppendFilters
{
//PDFR_DEBUG{
(AppendFilters beg.)=
}if
dup 3 1 roll
/Filter//knownget exec{
dup type/nametype eq{
dup//ShortFilterNames exch//knownget exec{
exch pop
}if
2 index/DecodeParms//knownget exec{
exch
}if
filter
}{
dup 0 exch 1 exch length 1 sub{
2 copy get
dup//ShortFilterNames exch//knownget exec{
exch pop
}if
3 1 roll
4 index/DecodeParms//knownget exec{
exch get
}{
pop null
}ifelse
dup null eq{
pop 3 1 roll filter exch
}{
3 1 roll
4 1 roll filter exch
}ifelse
}for
pop
}ifelse
//PDFR_DEBUG//PDFR_DUMP and{
//MakeStreamDumper exec
}if
}if
exch pop
//PDFR_DEBUG{
(AppendFilters end.)=
}if
}bind def
/ExecuteStream
{
dup//PDFReader exch/CurrentObject exch put
dup/Length//CheckLength//ResolveD exec
//PDFR_DEBUG{
(ExecuteStream id = )print 2 index =only( Length = )print dup =
}if
//PDFReader/InitialGraphicState get
//PDFReader/GraphicState get copy pop
//PDFReader/Operators get begin
currentfile exch ()/SubFileDecode filter
1 index//AppendFilters exec
cvx mark exch
exec
counttomark 0 ne{
mark(Data left on ostack after an immediate stream execution.)//error exec
}if
cleartomark
end
//PDFR_DEBUG{
(ExecuteStream end.)=
}if
//PDFReader/CurrentObject null put
dup/IsPage known{
dup/Context get/NumCopies//knownget exec{
1 sub{
copypage
}repeat
}if
EPS2Write not {showpage} if
}if
}bind def
/stream
{
//PDFR_DEBUG{
1 index =only( stream)=
}if
1 index GetObject{
dup xcheck{
exec
1 index null PutObject
}{
pop
}ifelse
}if
dup/ImmediateExec known{
dup/GlobalExec//knownget exec{
currentglobal 4 1 roll
setglobal
//ExecuteStream exec
3 2 roll setglobal
}{
//ExecuteStream exec
}ifelse
}{
//StoreStream exec
}ifelse
dup/.CleanResources//knownget exec{
/All eq{
//CleanAllResources exec
}if
}if
}bind def
/HookFont
{
//PDFR_DEBUG{
(Loaded the font )print dup/FontName get =
}if
{
dup/FontFileType get dup/Type1 eq exch/MMType1 eq or{
dup/FontName get
//PDFReader/RemoveFontNamePrefix get exec
findfont
exit
}if
dup/FontFileType get/TrueType eq{
//PDFReader/MakeType42 get exec
//PDFR_DEBUG{
(Font dict <<)=
dup{
1 index/sfnts eq{
exch pop
(/sfnts [)print
{
(-string\()print length//=only exec(\)- )=
}forall
(])=
}{
exch//=only exec( )print ==
}ifelse
}forall
(>>)=
}if
dup/FontName get exch definefont
exit
}if
mark(FontHook has no proc for )2 index/FontFileType get//error exec
}loop
/Font exch put
}bind def
/endstream
{
}bind def
/xref
{
//PDFR_DEBUG{
(xref)=
//PDFR_DUMP{
//PDFReader/ObjectRegistry get ==
}if
}if
end
count 0 ne{
mark(Excessive data on estack at the end of the interpretation.)//error exec
}if
currentfile 1(%%EOF)/SubFileDecode filter
flushfile
cleardictstack
}bind def
/ResolveDict
{dup{
pop 1 index exch
//DoNothing//ResolveD exec
pop
}forall
pop
}bind def
/SetupPageView
{
//PDFR_DEBUG{
(SetupPageView beg)=
}if
//DSC_OPDFREAD not{
//GraphicState/InitialMatrix get setmatrix
}if
/MediaBox get aload pop
3 index neg 3 index neg translate
3 -1 roll sub 3 1 roll exch sub exch
userdict/.HWMargins//knownget exec{
aload pop
}{
currentpagedevice/.HWMargins//knownget exec{
aload pop
}{
0 0 0 0
}ifelse
}ifelse
currentpagedevice/PageSize get aload pop
3 -1 roll sub 3 1 roll exch sub exch
exch 3 index sub exch 3 index sub
//SetPageSize{
//PDFR_DEBUG{
(Setting page size to )print 1 index//=only exec( )print dup =
}if
pop pop 3 index 3 index 2 copy
currentglobal false setglobal 3 1 roll
currentpagedevice dup /PageSize known{
/PageSize get aload pop}{
0 0}ifelse
round cvi 2 index round cvi eq
exch round cvi 3 index round cvi eq and{
//PDFR_DEBUG{(PageSize matches request) == flush}if
pop pop}{
/MediaRequested where {
//PDFR_DEBUG{(MediaRequested is true, check against new request) == flush}if
/MediaRequested get aload pop
round cvi 2 index round cvi eq
exch round cvi 3 index round cvi eq and
{//PDFR_DEBUG{(MediaRequested same as current request, ignore) == flush}if pop pop false}
{//PDFR_DEBUG{(MediaRequested different to current request) == flush}if true}ifelse
}{
//PDFR_DEBUG{(No MediaRequested yet) == flush}if
true
}ifelse
{
//PDFR_DEBUG{(Setting pagesize) == flush}if
2 array astore
dup /MediaRequested exch def
<< exch /PageSize exch >> setpagedevice
/pagesave save def
}if
}ifelse
userdict/PDFR_InitialGS gstate put
setglobal
}if
//RotatePages{
2 copy gt 6 index 6 index gt ne{
1 index 5 index le 1 index 5 index le and not
}{
false
}ifelse
}{
false
}ifelse
{//CenterPages{
//PDFR_DEBUG{
(Rotating page, and then centering it)==
}if
90 rotate
0 5 index neg translate
5 index 1 index exch sub 2 div
2 index 6 index sub 2 div neg
translate
}{
//FitPages{
1 index 5 index div 1 index 7 index div
2 copy gt{
exch
}if
pop dup scale
}if
90 rotate
0 5 index neg translate
}ifelse
}{
//CenterPages{
//PDFR_DEBUG{
(Ccentering page)==
}if
1 index 6 index sub 2 div
1 index 6 index sub 2 div
translate
}{
//FitPages{
1 index 6 index div 1 index 6 index div
2 copy gt{
exch
}if
pop dup scale
}if
}ifelse
}ifelse
pop pop
translate
pop pop
//PDFR_DEBUG{
(SetupPageView end)=
}if
}bind def
/PageContentsDaemon
{
//PDFR_DEBUG{
(Executing PageContentsDaemon for )print 2 index =
}if
1 index exch/Context exch put
dup/ImmediateExec true put
dup/IsPage true put
SetPageSize {dup/Context get//SetupPageView exec}if
}bind def
/FontFileDaemon
{
//PDFR_DEBUG{
(Executing FontFileDaemon for )print 2 index =
}if
dup/FontFileType get
2 index exch
dup//ReadFontProcs exch//knownget exec{
exch pop exec
}{
mark(FontFile reader for )2 index( isn't implemented yet.)//error exec
}ifelse
//PDFR_DEBUG{
(FontFileDaemon end)=
}if
pop
}bind def
/FontDescriptorDaemon
{
//PDFR_DEBUG{
(Executing FontDescriptorDaemon for )print 2 index =
}if
2 copy/FontResource exch put
/Subtype get 1 index exch/FontFileType exch put
}bind def
/UnPDFEscape{
dup dup length string cvs
dup(#)search{
{
pop
(16#--)2 index 0 2 getinterval
1 index 3 2 getinterval copy pop
cvi
0 exch put
0
1 index 2 1 index length 2 sub getinterval
3 copy putinterval
length
3 copy exch put
getinterval
(#)search not{
pop exit
}if
}loop
(\0)search pop exch pop exch pop
cvn
exch pop
}{
pop pop
}ifelse
}bind def
/TypeDaemons<<
/Page
{//PDFR_DEBUG{
(Recognized a page.)=
}if
dup/Contents//knownget exec{
0 get//DoNothing exch
[
3 index//PageContentsDaemon/exec load
]cvx
//Register exec
}{
(fixme: page with no Contents won't be printed.)=
}ifelse
}bind
/FontDescriptor
{//PDFR_DEBUG{
(Recognized a font descriptor.)=
}if
dup/FontName//knownget exec{
1 index/FontName 3 -1 roll//UnPDFEscape exec put
}if
dup dup/FontFile known{/FontFile}{/FontFile2}ifelse
//knownget exec{
0 get//DoNothing exch
[
3 index//FontFileDaemon/exec load
]cvx
//Register exec
}{
(Font descriptor )print 1 index =only( has no FontFile.)=
}ifelse
}bind
/Font
{//PDFR_DEBUG{
(Recognized a font resource.)=
}if
dup/BaseFont//knownget exec{
//UnPDFEscape exec 2 copy/BaseFont exch put
//PDFReader/RemoveFontNamePrefix get exec
currentglobal exch
dup/Font resourcestatus{
pop pop
//PDFReader/GetInstalledFont get exec pop
}{
pop
}ifelse
setglobal
}if
dup/FontDescriptor//knownget exec{
0 get
dup//IsRegistered exec{
//PDFR_DEBUG{
(already registered )print dup =
}if
pop
}{
//DoNothing exch
[
3 index//FontDescriptorDaemon/exec load
]cvx
//Register exec
}ifelse
}if
}bind
>>def
/MakeStreamReader
{dup
[
exch
//PDFR_DEBUG{
(Stream proc )
/print load
//PDFR_STREAM{
(<)
/print load
}if
}if
1 dict dup/i -1 put
/dup load
/i
/get load
1
/add load
/dup load
3
1
/roll load
/i
/exch load
/put load
//knownget
/exec load
/not load
{()}
/if load
//PDFR_DEBUG{
//PDFR_STREAM{
/dup load
/print load
(>)
/print load
}if
( end of stream proc.\n)
/print load
}if
]cvx
//PDFR_DEBUG{
(Stream reader )print dup ==
}if
0()/SubFileDecode filter
exch//AppendFilters exec
}bind def
/RunDelayedStream
{
//GraphicState/InitialTextMatrix get
//InitialTextMatrixStack//PDFReader/InitialTextMatrixStackPointer get
2 copy get null eq{
2 copy currentglobal true setglobal matrix exch setglobal put
}if
get copy pop
//PDFReader/InitialTextMatrixStackPointer 2 copy get 1 add put
//MakeStreamReader exec
mark exch
cvx exec
counttomark 0 ne{
mark(Data left on ostack after a delayed stream execution.)//error exec
}if
cleartomark
//PDFReader/InitialTextMatrixStackPointer 2 copy get 1 sub put
//InitialTextMatrixStack//PDFReader/InitialTextMatrixStackPointer get get
//GraphicState/InitialTextMatrix get
copy pop
}bind def
//ReadFontProcs begin
/Type1
{//PDFR_DEBUG{
(ReadFontProcs.Type1)=
}if
dup/.endobj_daemon[4 index//HookFont/exec load]cvx put
dup/ImmediateExec true put
/GlobalExec true put
}bind def
/MMType1//Type1 def
/TrueType
{//PDFR_DEBUG{
(ReadFontProcs.TrueType)=
}if
dup/.endobj_daemon[4 index//HookFont/exec load]cvx put
pop
}bind def
end
/.opdloadttfontdict 50 dict def
.opdloadttfontdict begin
/maxstring 65400 def
end
/.InsertionSort
{
/CompareProc exch def
/Array exch def
1 1 Array length 1 sub
{
/Ix exch def
/Value1 Array Ix get def
/Jx Ix 1 sub def
{
Jx 0 lt{
exit
}if
/Value2 Array Jx get def
Value1 Value2 CompareProc{
exit
}if
Array Jx 1 add Value2 put
/Jx Jx 1 sub def
}loop
Array Jx 1 add Value1 put
}for
Array
}bind def
/putu16{
3 copy -8 bitshift put
exch 1 add exch 16#ff and put
}bind def
/putu32{
3 copy -16 bitshift putu16
exch 2 add exch 16#ffff and putu16
}bind def
/.readtable{
dup dup 1 and add string
dup 0 4 -1 roll getinterval
3 -1 roll exch
dup()ne{readstring}if pop pop
}bind def
/.readbigtable{
dup maxstring lt{
.readtable
}{
currentuserparams/VMReclaim get -2 vmreclaim
[4 2 roll{
dup maxstring le{exit}if
1 index maxstring string readstring pop 3 1 roll maxstring sub
}loop .readtable]
exch vmreclaim
}ifelse
}bind def
/ReadTTF
{
.opdloadttfontdict begin
/TTFontFile exch def
/TableDir TTFontFile 12 string readstring pop def
/tables TTFontFile TableDir 4 getu16 16 mul string readstring pop def
/tabarray tables length 16 idiv array def
TableDir 0 4 getinterval(ttcf)eq{
QUIET not{(Can't handle TrueType font Collections.)=}if
/.loadttfonttables cvx/invalidfont signalerror
}{
0 16 tables length 1 sub{
dup
tables exch 16 getinterval
exch 16 div cvi exch
tabarray 3 1 roll put
}for
}ifelse
tabarray{exch 8 getu32 exch 8 getu32 gt}.InsertionSort pop
/Read TableDir length tables length add def
/tabs[
tabarray{
dup 8 getu32
Read sub
dup 0 gt{
dup string TTFontFile exch readstring pop pop
Read add/Read exch def
}{
pop
}ifelse
12 getu32
dup Read add
/Read exch def
TTFontFile exch .readbigtable
}forall
]def
end
}bind def
/GetLocaType
{
0 1 tabarray length 1 sub{
dup tabarray exch get
0 4 getinterval(head)eq{
tabs exch get
50 gets16
/LocaType exch def
exit
}{
pop
}ifelse
}for
}bind def
/GetNumGlyphs
{
0 1 tabarray length 1 sub{
dup tabarray exch get
0 4 getinterval(maxp)eq{
tabs exch get
4 getu16
/NumGlyphs exch def
exit
}{
pop
}ifelse
}for
}bind def
/StringToLoca
{
/LocaIndex exch def
/StringOffset 0 def
{
dup length StringOffset gt{
dup
LocaType 1 eq{
StringOffset getu32
LocaArray LocaIndex 3 -1 roll put
/LocaIndex LocaIndex 1 add def
/StringOffset StringOffset 4 add
def
}{
StringOffset getu16 2 mul
LocaArray length LocaIndex gt {LocaArray LocaIndex 3 -1 roll put}{pop}ifelse/LocaIndex LocaIndex 1 add def
/StringOffset StringOffset 2 add
def
}ifelse
}{
pop
LocaIndex
exit
}ifelse
}loop
}bind def
/GetSortedLoca
{
NumGlyphs 1 add array/LocaArray exch def
0 1 tabarray length 1 sub{
dup tabarray exch get
0 4 getinterval(loca)eq{
tabs exch get
exit
}{
pop
}ifelse
}for
dup type/stringtype eq{
0 StringToLoca pop
}{
0 exch
{
exch StringToLoca
}forall
pop
}ifelse
LocaArray{gt}.InsertionSort pop
}bind def
/GetWorkingString
{
WorkString 0
GlyfArray GlyfStringIndex get
putinterval
/WorkBytes GlyfArray GlyfStringIndex get length def
/GlyfStringIndex GlyfStringIndex 1 add def
}bind def
/GetWorkingBytes
{
/BytesToRead exch def
WorkString 0 BytesToRead getinterval
dup length string copy
WorkString BytesToRead WorkBytes BytesToRead sub getinterval
dup length string copy
WorkString 0 3 -1 roll putinterval
/WorkBytes WorkBytes BytesToRead sub def
}bind def
/GetGlyfBytes
{
/ToRead exch def
WorkBytes 0 eq{
GetWorkingString
}if
WorkBytes ToRead ge{
ToRead string dup 0
ToRead GetWorkingBytes putinterval
}{
ToRead string
dup
0
WorkString 0 WorkBytes getinterval
putinterval
dup
WorkBytes
ToRead WorkBytes sub
GetWorkingString
GetWorkingBytes
putinterval
}ifelse
}bind def
/SplitGlyf
{
/GlyfArray exch def
/DestArray GlyfArray length 2 mul array def
/DestArrayIndex 0 def
/LastLoca 0 def
/NextLocaIndex 0 def
/LastLocaIndex 0 def
/GlyfStringIndex 0 def
/WorkString maxstring string def
/WorkBytes 0 def
{
LocaArray NextLocaIndex get
LastLoca sub maxstring gt
{
LocaArray LastLocaIndex get LastLoca sub
GetGlyfBytes
DestArray DestArrayIndex 3 -1 roll put
/DestArrayIndex DestArrayIndex 1 add def
LocaArray LastLocaIndex get/LastLoca exch def
}{
/LastLocaIndex NextLocaIndex def
/NextLocaIndex NextLocaIndex 1 add def
NextLocaIndex NumGlyphs gt
{
WorkBytes
GlyfStringIndex GlyfArray length lt{
GlyfArray GlyfStringIndex get length
add string dup
0
WorkString 0 WorkBytes getinterval
putinterval
dup
WorkBytes
GetWorkingString
WorkString 0 WorkBytes getinterval
putinterval
}{
pop
WorkString 0 WorkBytes getinterval
}ifelse
dup length string copy
DestArray DestArrayIndex 3 -1 roll put
exit
}if
}ifelse
}loop
DestArray
}bind def
/ProcessTTData
{
.opdloadttfontdict begin
0 1 tabarray length 1 sub{
/ix exch def
tabarray ix get
12 getu32 dup maxstring le{
dup 4 mod 0 ne{
4 div cvi 1 add 4 mul string/newstring exch def
/oldstring tabs ix get def
newstring 0 oldstring putinterval
0 1 newstring length oldstring length sub 1 sub{
newstring exch oldstring length add 0 put
}for
tabs ix newstring put
}{
pop
}ifelse
}{
dup 4 mod 0 ne{
dup maxstring idiv maxstring mul sub
4 idiv 1 add 4 mul string/newstring exch def
tabs ix get
dup length 1 sub dup/iy exch def get/oldstring exch def
newstring 0 oldstring putinterval
0 1 newstring length oldstring length sub 1 sub{
newstring exch oldstring length add 0 put
}for
tabs ix get iy newstring put
}{
pop
}ifelse
}ifelse
}for
0 1 tabarray length 1 sub{
dup tabarray exch get
dup 12 getu32 maxstring gt{
0 4 getinterval dup(glyf)eq{
pop
GetLocaType
GetNumGlyphs
GetSortedLoca
dup tabs exch get
SplitGlyf
tabs 3 1 roll put
}{
(Warning, table )print print( > 64Kb\n)print
pop
}ifelse
}{
pop
pop
}ifelse
}for
end
}bind def
/Makesfnts
{
.opdloadttfontdict begin
0
tabs{
dup type/stringtype eq{
pop
1 add
}{
{
type/stringtype eq{
1 add
}if
}forall
}ifelse
}forall
1 add
/TTOffset
TableDir length
tabarray length 16 mul add
def
0
tabarray{
exch dup 1 add
3 1 roll
dup
tabs exch get
dup type/stringtype eq{
length
2 index exch
TTOffset
dup 3 1 roll add
/TTOffset exch def
8 exch putu32
exch tabarray 3 1 roll
put
}{
0 exch
{
dup type/stringtype eq{
length add
}{
pop
}ifelse
}forall
2 index exch
TTOffset
dup 3 1 roll add
/TTOffset exch def
8 exch putu32
exch tabarray 3 1 roll
put
}ifelse
}forall
pop
array
dup 0
TableDir length
tables length add
string
dup 0 TableDir putinterval
dup 12 tables putinterval
put
dup
/ix 1 def
tabs{
dup type/stringtype eq{
ix exch
put dup
/ix ix 1 add def
}{
{
dup type/stringtype eq{
ix exch put dup
/ix ix 1 add def
}{
pop
}ifelse
}forall
}ifelse
}forall
pop
end
}bind def
/MakeType42
{
//PDFR_DEBUG{
(MakeType42 beg)=
}if
10 dict begin
/FontName 1 index/FontName get def
/FontType 42 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox 1 index/FontBBox get def
dup/FontResource get
dup/Encoding known{
//PDFReader/ObtainEncoding get exec
/Encoding get
}{
pop null
}ifelse
/PDFEncoding exch def
/CharStrings 2 index//PDFReader/MakeTTCharStrings get exec def
/sfnts 2 index//MakeStreamReader exec
ReadTTF
ProcessTTData
Makesfnts
def
/Encoding StandardEncoding def
/PaintType 0 def
currentdict end
//PDFR_DEBUG{
(MakeType42 end)=
}if
}bind def
/GetInstalledFont
{
dup//InstalledFonts exch knownget{
exch pop
}{
dup findfont dup 3 1 roll
//InstalledFonts 3 1 roll put
}ifelse
}bind def
/RemoveFontNamePrefix
{//=string cvs true
0 1 5{
2 index exch get//IsUpper exec not{
pop false exit
}if
}for
{(+)search{
pop pop
}if
}if
cvn
}bind def
/CheckFont
{dup/Type get/Font ne{
mark(Resource )3 index( must have /Type/Font .)//error exec
}if
}bind def
/CheckEncoding
{dup type/nametype ne{
dup/Type get/Encoding ne{
mark(Resource )3 index( must have /Type/Encoding .)//error exec
}if
}if
}bind def
/ObtainEncoding
{dup/Encoding known{
dup dup/Encoding//CheckEncoding//ResolveD exec
dup type dup/arraytype eq exch/packedarraytype eq or{
pop pop
}{
dup type/nametype eq{
/Encoding findresource
}{
dup/BaseEncoding//knownget exec not{
/StandardEncoding
}if
/Encoding findresource
exch
/Differences//knownget exec{
exch dup length array copy exch
0 exch
{
dup type/integertype eq{
exch pop
}{
3 copy put pop
1 add
}ifelse
}forall
pop
}if
}ifelse
/Encoding exch put
}ifelse
}{
dup/Encoding/StandardEncoding/Encoding findresource put
}ifelse
}bind def
/ObtainMetrics
{dup/Widths//knownget exec{
1 index/Encoding get
256 dict
3 index/Subtype get/TrueType eq{
1000
}{
1
}ifelse
4 index/MissingWidth//knownget exec not{
0
}if
5 index/FirstChar//knownget exec not{
0
}if
6 5 roll
dup 0 exch 1 exch length 1 sub{
2 copy get
exch 3 index add
7 index exch get
dup dup null ne exch/.notdef ne and{
6 index 3 1 roll exch
6 index div
3 copy pop//knownget exec{
0 eq
}{
true
}ifelse
{put
}{
pop pop pop
}ifelse
}{
pop pop
}ifelse
}for
pop pop pop pop exch pop
1 index exch/Metrics exch put
}{
dup/MissingWidth//knownget exec{
256 dict
2 index/Encoding get{
dup null ne{
3 copy 3 2 roll put
}if
pop
}forall
exch pop
1 index exch/Metrics exch put
}if
}ifelse
}bind def
/NotDef
{
FontMatrix aload pop pop pop exch pop exch pop
1 exch div exch
1 exch div exch
1 index 0 setcharwidth
0 setlinewidth
0 0 moveto
2 copy rlineto
1 index 0 rlineto
neg exch neg exch rlineto
closepath stroke
}bind def
/SaveResourcesToStack{[//PDFReader/OldResources known{//PDFReader/OldResources get}{null}ifelse
//PDFReader/CurrentObject get/Context get/Resources get]//PDFReader/OldResources 3 -1 roll put}bind def
/RestoreResourcesFromStack{//PDFReader/OldResources get dup
0 get//PDFReader/OldResources 3 -1 roll put
1 get//PDFReader/CurrentObject get/Context get/Resources 3 -1 roll put} bind def
/BuildChar
{//PDFR_DEBUG{
(BuildChar )print dup//=only exec( )print
}if
exch begin
Encoding exch get
//PDFR_DEBUG{
dup =
}if
dup null eq{
pop//NotDef exec
}{
CharProcs exch//knownget exec{currentfont/Font get/Resources//knownget exec{exec SaveResourcesToStack//PDFReader/CurrentObject get/Context get/Resources 3 -1 roll put//RunDelayedStream exec RestoreResourcesFromStack}{//RunDelayedStream exec}ifelse}{
//NotDef exec
}ifelse
}ifelse
end
}bind def
/printdict
{(<<)=
{exch = ==}forall
(>>)=
}bind def
/printfont
{
dup{
exch dup =
dup/Encoding eq{
pop =
}{
dup/FontInfo eq exch/Private eq or{
//printdict exec
}{
==
}ifelse
}ifelse
}forall
}bind def
/ScaleMetrics
{1 index{
2 index div
3 index
3 1 roll put
}forall
pop
}bind def
/ResolveAndSetFontAux
{exch dup
//PDFReader/CurrentObject get/Context get/Resources get
/Font//DoNothing//ResolveD exec
exch//CheckFont//ResolveD exec
dup/Font//knownget exec{
exch pop exch pop
}{
{
dup/Subtype get dup dup/Type1 eq exch/TrueType eq or exch/MMType1 eq or{
exch pop
dup/BaseFont get
//RemoveFontNamePrefix exec
//PDFR_DEBUG{
(Font )print dup =
}if
1 index/FontDescriptor known{
//PDFR_DEBUG{
(Font from a font descriptor.)=
}if
1 index
/FontDescriptor//DoNothing//ResolveD exec
/Font//knownget exec{
exch pop
}{
//PDFR_DEBUG{
(Font descriptor has no Font resolved.)=
}if
//GetInstalledFont exec
}ifelse
}{
//GetInstalledFont exec
}ifelse
exch
dup/Encoding known not{
1 index/Encoding get 1 index exch/Encoding exch put
}if
//ObtainEncoding exec
//ObtainMetrics exec
exch
dup length dict copy
dup 2 index/Encoding get
/Encoding exch put
1 index/Metrics//knownget exec{
2 index/Subtype get/TrueType ne{
1 index/FontMatrix get 0 get
dup 0 eq{
pop
1 index/FontMatrix get 1 get
dup 0 eq{pop 1}if
}if
0.001 div
//ScaleMetrics exec
}{
1 index/sfnts known not{
1 index/FontMatrix get 0 get
dup 0 eq{
pop
1 index/FontMatrix get 1 get
dup 0 eq{pop 1}if
}if
//ScaleMetrics exec
}if
}ifelse
1 index exch/Metrics exch put
}if
1 index/BaseFont get
exch
dup/FID undef
dup/UniqueID undef
definefont
dup 3 1 roll
/Font exch put
exit
}if
dup/Subtype get/Type3 eq{
//ObtainEncoding exec
2 copy exch/FontName exch put
dup/CharProcs get//ResolveDict exec
dup/FontType 3 put
dup/BuildChar//BuildChar put
dup dup/Font exch put
dup 3 1 roll
definefont
2 copy ne{
2 copy/Font exch put
}if
exch pop
exit
}if
dup/Subtype get/Type0 eq{
}if
dup/Subtype get/CIDFontType0 eq{
}if
dup/Subtype get/CIDFontType2 eq{
}if
mark(Unknown font type )2 index/Subtype get//error exec
}loop
}ifelse
exch scalefont setfont
}bind def
/ResolveAndSetFont
{
//ResolveAndSetFontAux exec
}bind def
/.knownget
{2 copy known{
get true
}{
pop pop false
}ifelse
}bind def
/.min
{2 copy lt{
exch
}if
pop
}bind def
/.max
{2 copy gt{
exch
}if
pop
}bind def
/.dicttomark
{>>
}bind def
/getu16{
2 copy get 8 bitshift 3 1 roll 1 add get add
}bind def
/gets16{
getu16 16#8000 xor 16#8000 sub
}bind def
/getu32{
2 copy getu16 16 bitshift 3 1 roll 2 add getu16 add
}bind def
/gets32{
2 copy gets16 16 bitshift 3 1 roll 2 add getu16 add
}bind def
/cmapformats mark
0{
6 256 getinterval{}forall 256 packedarray
}bind
2{
/sHK_sz 2 def
/sH_sz 8 def
dup 2 getu16/cmapf2_tblen exch def
dup 4 getu16/cmapf2_lang exch def
dup 6 256 sHK_sz mul getinterval/sHKs exch def
0
0 1 255{
sHKs exch
2 mul getu16
1 index
1 index
lt{exch}if pop
}for
/sH_len exch def
dup 6 256 sHK_sz mul add
cmapf2_tblen 1 index sub getinterval
/sH_gIA exch def
/cmapf2_glyph_array 65535 array def
/.cmapf2_putGID{
/cmapf2_ch cmapf2_ch_hi 8 bitshift cmapf2_ch_lo add def
firstCode cmapf2_ch_lo le
cmapf2_ch_lo firstCode entryCount add lt
and{
sH_offset idRangeOffset add
cmapf2_ch_lo firstCode sub 2 mul
add 6 add
sH_gIA exch getu16
dup 0 gt{
idDelta add
cmapf2_glyph_array exch cmapf2_ch exch put
}{
pop
}ifelse
}{
}ifelse
}def
16#00 1 16#ff{
/cmapf2_ch_hi exch def
sHKs cmapf2_ch_hi sHK_sz mul getu16
/sH_offset exch def
sH_gIA sH_offset sH_sz getinterval
dup 0 getu16/firstCode exch def
dup 2 getu16/entryCount exch def
dup 4 gets16/idDelta exch def
dup 6 getu16/idRangeOffset exch def
pop
sH_offset 0 eq{
/cmapf2_ch_lo cmapf2_ch_hi def
/cmapf2_ch_hi 0 def
.cmapf2_putGID
}{
16#00 1 16#ff{
/cmapf2_ch_lo exch def
.cmapf2_putGID
}for
}ifelse
}for
pop
0 1 cmapf2_glyph_array length 1 sub{
dup cmapf2_glyph_array exch get
null eq{cmapf2_glyph_array exch 0 put}{pop}ifelse
}for
cmapf2_glyph_array
}bind
4{
/etab exch def
/nseg2 etab 6 getu16 def
14/endc etab 2 index nseg2 getinterval def
2 add
nseg2 add/startc etab 2 index nseg2 getinterval def
nseg2 add/iddelta etab 2 index nseg2 getinterval def
nseg2 add/idroff etab 2 index nseg2 getinterval def
pop
/firstcode startc 0 getu16 16#ff00 and dup 16#f000 ne{pop 0}if def
/lastcode firstcode def
/striptopbyte false def
/putglyph{
glyphs code 3 -1 roll put/code code 1 add def
}bind def
/numcodes 0 def/glyphs 0 0 2 nseg2 3 sub{
/i2 exch def
/scode startc i2 getu16 def
/ecode endc i2 getu16 def
ecode lastcode gt {
/lastcode ecode def
}if
}for pop
firstcode 16#f000 ge lastcode firstcode sub 255 le and {
lastcode 255 and
/striptopbyte true def
} {
lastcode
}ifelse
1 add
array def
glyphs length 1024 ge{
.array1024z 0 1024 glyphs length 1023 sub{glyphs exch 2 index putinterval}for
glyphs dup length 1024 sub 3 -1 roll
putinterval
}{
0 1 glyphs length 1 sub{glyphs exch 0 put}for
}ifelse
/numcodes 0 def/code 0 def
0 2 nseg2 3 sub{
/i2 exch def
/scode startc i2 getu16 def
/ecode endc i2 getu16 def
numcodes scode firstcode sub
exch sub 0 .max dup/code exch code exch add def
ecode scode sub 1 add add numcodes add/numcodes exch def
/delta iddelta i2 gets16 def
TTFDEBUG{
(scode=)print scode =only
( ecode=)print ecode =only
( delta=)print delta =only
( droff=)print idroff i2 getu16 =
}if
idroff i2 getu16 dup 0 eq{
pop scode delta add 65535 and 1 ecode delta add 65535 and
striptopbyte {
/code scode 255 and def
} {
/code scode def
} ifelse
{putglyph}for
}{
/gloff exch 14 nseg2 3 mul add 2 add i2 add add def
striptopbyte {
/code scode 255 and def
} {
/code scode def
} ifelse
0 1 ecode scode sub{
2 mul gloff add etab exch getu16
dup 0 ne{delta add 65535 and}if putglyph
}for
}ifelse
}for glyphs/glyphs null def
}bind
6{
dup 6 getu16/firstcode exch def dup 8 getu16/ng exch def
firstcode ng add array
0 1 firstcode 1 sub{2 copy 0 put pop}for
dup firstcode ng getinterval
0 1 ng 1 sub{
dup 2 mul 10 add 4 index exch getu16 3 copy put pop pop
}for pop exch pop
}bind
.dicttomark readonly def
/cmaparray{
dup 0 getu16 cmapformats exch .knownget{
TTFDEBUG{
(cmap: format )print 1 index 0 getu16 = flush
}if exec
}{
(Can't handle format )print 0 getu16 = flush
0 1 255{}for 256 packedarray
}ifelse
TTFDEBUG{
(cmap: length=)print dup length = dup ==
}if
}bind def
/postremap mark
/Cdot/Cdotaccent
/Edot/Edotaccent
/Eoverdot/Edotaccent
/Gdot/Gdotaccent
/Ldot/Ldotaccent
/Zdot/Zdotaccent
/cdot/cdotaccent
/edot/edotaccent
/eoverdot/edotaccent
/gdot/gdotaccent
/ldot/ldotaccent
/zdot/zdotaccent
.dicttomark readonly def
/get_from_stringarray
{1 index type/stringtype eq{
get
}{
exch{
2 copy length ge{
length sub
}{
exch get exit
}ifelse
}forall
}ifelse
}bind def
/getinterval_from_stringarray
{
2 index type/stringtype eq{
getinterval
}{
string exch 0
4 3 roll{
dup length
dup 4 index lt{
3 index exch sub
exch pop 3 1 roll exch pop
}{
dup 3 1 roll
4 index sub
5 index length 4 index sub
2 copy gt{exch}if pop
dup 3 1 roll
5 index exch getinterval
5 index 4 index 3 index
getinterval
copy pop
exch pop add exch pop 0 exch
dup 3 index length ge{exit}if
}ifelse
}forall
pop pop
}ifelse
}bind def
/string_array_size
{dup type/stringtype eq{
length
}{
0 exch{length add}forall
}ifelse
}bind def
/postformats mark
16#00010000{
pop MacGlyphEncoding
}
16#00020000{
dup dup type/arraytype eq{0 get}if length 36 lt{
TTFDEBUG{(post format 2.0 invalid.)= flush}if
pop[]
}{
/postglyphs exch def
/post_first postglyphs dup type/arraytype eq{0 get}if def
post_first 32 getu16/numglyphs exch def
/glyphnames numglyphs 2 mul 34 add def
/postpos glyphnames def
/total_length postglyphs//string_array_size exec def
numglyphs array 0 1 numglyphs 1 sub{
postpos total_length ge{
1 numglyphs 1 sub{1 index exch/.notdef put}for
exit
}if
postglyphs postpos//get_from_stringarray exec
postglyphs postpos 1 add 2 index//getinterval_from_stringarray exec cvn
exch postpos add 1 add/postpos exch def
2 index 3 1 roll
put
}for
/postnames exch def
numglyphs array 0 1 numglyphs 1 sub{
dup 2 mul 34 add postglyphs exch 2//getinterval_from_stringarray exec
dup 0 get 8 bitshift exch 1 get add dup 258 lt{
MacGlyphEncoding exch get
}{
dup 32768 ge{
pop/.notdef
}{
258 sub dup postnames length ge{
TTFDEBUG{(   *** warning: glyph index past end of 'post' table)= flush}if
pop
exit
}if
postnames exch get
postremap 1 index .knownget{exch pop}if
}ifelse
}ifelse
2 index 3 1 roll put
}for
}
ifelse
}bind
16#00030000{
pop[]
}bind
.dicttomark readonly def
/first_post_string
{
post dup type/arraytype eq{0 get}if
}bind def
/.getpost{
/glyphencoding post null eq{
TTFDEBUG{(post missing)= flush}if[]
}{
postformats first_post_string 0 getu32 .knownget{
TTFDEBUG{
(post: format )print
first_post_string
dup 0 getu16 =only(,)print 2 getu16 = flush
}if
post exch exec
}{
TTFDEBUG{(post: unknown format )print post 0 getu32 = flush}if[]
}ifelse
}ifelse def
}bind def
/TTParser<<
/Pos 0
/post null
>>def
/readu8
{read not{
mark(Insufficient data in the stream.)//error exec
}if
}bind def
/readu16
{dup//readu8 exec 8 bitshift exch//readu8 exec or
}bind def
/reads16
{//readu16 exec 16#8000 xor 16#8000 sub
}bind def
/readu32
{dup//readu16 exec 16 bitshift exch//readu16 exec or
}bind def
/reads32
{dup//reads16 exec 16 bitshift exch//readu16 exec or
}bind def
/SkipToPosition
{dup//TTParser/Pos get
exch//TTParser exch/Pos exch put
sub
//PDFR_DEBUG{
(Skipping )print dup//=only exec( bytes.)=
}if
dup 0 eq{
pop pop
}{
dup 3 1 roll
()/SubFileDecode filter
exch
{1 index//BlockBuffer readstring pop length
dup 0 eq{pop exch pop exit}if
sub
}loop
0 ne{
mark(Insufficient data in the stream for SkipToPosition.)//error exec
}if
}ifelse
}bind def
/TagBuffer 4 string def
/ParseTTTableDirectory
{//PDFR_DEBUG{
(ParseTTTableDirectory beg)=
}if
15 dict begin
dup//readu32 exec 16#00010000 ne{
mark(Unknown True Type version.)//error exec
}if
dup//readu16 exec/NumTables exch def
dup//readu16 exec/SearchRange exch def
dup//readu16 exec/EntrySelector exch def
dup//readu16 exec/RangeShift exch def
//PDFR_DEBUG{
(NumTables = )print NumTables =
}if
NumTables{
dup//TagBuffer readstring not{
mark(Could not read TT tag.)//error exec
}if
cvn
[2 index//readu32 exec pop
2 index//readu32 exec
3 index//readu32 exec
]
//PDFR_DEBUG{
2 copy exch//=only exec( )print ==
}if
def
}repeat
pop
//TTParser/Pos 12 NumTables 16 mul add put
currentdict end
//PDFR_DEBUG{
(ParseTTTableDirectory end)=
}if
}bind def
/ParseTTcmap
{//PDFR_DEBUG{
(ParseTTcmap beg)=
}if
/cmap get aload pop
3 1 roll
7 dict begin
//PDFR_DEBUG{
(Current position = )print//TTParser/Pos get =
(cmap position = )print dup =
}if
1 index exch//SkipToPosition exec
//TTParser/Pos get/TablePos exch def
dup//readu16 exec pop
dup//readu16 exec/NumEncodings exch def
//PDFR_DEBUG{
(NumEncodings = )print NumEncodings =
}if
null
NumEncodings{
1 index//readu32 exec
2 index//readu32 exec
3 array dup 3 2 roll 0 exch put
2 index null ne{
dup 0 get 3 index 0 get sub
3 index exch 1 exch put
}if
dup 4 3 roll pop 3 1 roll
def
}repeat
dup 0 get
4 3 roll exch sub
1 exch put
//PDFR_DEBUG{
currentdict{
exch dup type/integertype eq{
//PrintHex exec( )print ==
}{
pop pop
}ifelse
}forall
}if
4 NumEncodings 8 mul add/HeaderLength exch def
//TTParser/Pos//TTParser/Pos get HeaderLength add put
0
NumEncodings{
16#7FFFFFF null
currentdict{
1 index type/integertype eq{
exch pop dup 0 get
dup 5 index gt{
dup 4 index lt{
4 1 roll
exch pop exch pop
}{
pop pop
}ifelse
}{
pop pop
}ifelse
}{
pop pop
}ifelse
}forall
//PDFR_DEBUG{
(Obtaining subtable for )print dup ==
}if
3 2 roll pop
3 copy pop
TablePos add//SkipToPosition exec
3 copy exch pop 1 get
//TTParser/Pos//TTParser/Pos get 3 index add put
string
readstring not{
mark(Can't read a cmap subtable.)//error exec
}if
2 exch put
}repeat
pop pop
currentdict end
//PDFR_DEBUG{
(ParseTTcmap end)=
}if
}bind def
/GetTTEncoding
{//PDFR_DEBUG{
(GetTTEncoding beg)=
}if
get
exch pop
2 get
10 dict begin
/TTFDEBUG//PDFR_DEBUG def
//cmaparray exec
end
//PDFR_DEBUG{
(GetTTEncoding end)=
dup ==
}if
}bind def
/InverseEncoding
{
256 dict begin
dup length 1 sub -1 0{
2 copy get
exch
1 index currentdict exch//knownget exec{
dup type/arraytype eq{
aload length 1 add array astore
}{
2 array astore
}ifelse
}if
def
}for
pop
currentdict end
}bind def
/GetMacRomanEncodingInverse
{//PDFReader/MacRomanEncodingInverse get
dup null eq{
pop
MacRomanEncoding//InverseEncoding exec
dup//PDFReader exch/MacRomanEncodingInverse exch put
}if
}bind def
/PutCharStringSingle
{
dup 3 index length lt{
2 index exch get
dup 0 ne{
def
}{
pop pop
}ifelse
}{
pop pop
}ifelse
}bind def
/PutCharString
{1 index type/nametype ne{
mark(Bad charstring name)//error exec
}if
dup type/arraytype eq{
{
3 copy//PutCharStringSingle exec
pop pop
}forall
pop
}{
//PutCharStringSingle exec
}ifelse
}bind def
/ComposeCharStrings
{
//PDFR_DEBUG{
(ComposeCharStrings beg)=
}if
1 index length 1 add dict begin
/.notdef 0 def
exch
//TTParser/post get
dup null ne{
exch
1 index length 1 sub -1 0{
dup 3 index exch get exch
dup 0 eq 2 index/.notdef eq or{
pop pop
}{
def
}ifelse
}for
}if
exch pop exch
{
//PutCharString exec
}forall
pop
currentdict end
//PDFR_DEBUG{
(ComposeCharStrings end)=
}if
}bind def
/ParseTTpost
{
//PDFR_DEBUG{
(ParseTTpost beg)=
}if
/post get aload pop
3 1 roll
//PDFR_DEBUG{
(Current position = )print//TTParser/Pos get =
(post position = )print dup =
}if
1 index exch//SkipToPosition exec
//TTParser/Pos//TTParser/Pos get 4 index add put
exch dup 65535 le{
string
readstring not{
mark(Insufficient data in the stream for ParseTTpost.)//error exec
}if
}{
[3 1 roll
dup 16384 div floor cvi
exch 1 index 16384 mul
sub exch
1 sub 0 1 3 -1 roll
{
1 add index
16384 string readstring not{
mark(Insufficient data in the stream for ParseTTpost.)//error exec
}if
}for
counttomark -2 roll
string readstring not{
mark(Insufficient data in the stream for ParseTTpost.)//error exec
}if
]
}ifelse
1 dict begin
/post exch def
//.getpost exec
//TTParser/post glyphencoding put
//PDFR_DEBUG{
(ParseTTpost end)=
glyphencoding ==
}if
end
}bind def
/MakeTTCharStrings
{//MakeStreamReader exec
dup dup//ParseTTTableDirectory exec
//TTParser/post null put
dup/post//knownget exec{
0 get
1 index/cmap get 0 get
lt{
2 copy//ParseTTpost exec
//ParseTTcmap exec
}{
2 copy//ParseTTcmap exec
3 1 roll
//ParseTTpost exec
}ifelse
}{
//ParseTTcmap exec
}ifelse
{
dup 16#00030001 known{
//PDFR_DEBUG{
(Using the TT cmap encoding for Windows Unicode.)=
}if
16#00030001//GetTTEncoding exec
AdobeGlyphList//ComposeCharStrings exec
exit
}if
dup 16#00010000 known{
//PDFR_DEBUG{
(Using the TT cmap encoding for Macintosh Roman.)=
}if
16#00010000//GetTTEncoding exec
PDFEncoding dup null eq{
pop//GetMacRomanEncodingInverse exec
}{
//InverseEncoding exec
}ifelse
//ComposeCharStrings exec
exit
}if
dup 16#00030000 known{
//PDFR_DEBUG{
(Using the TT cmap encoding 3.0 - not sure why Ghostscript writes it since old versions.)=
}if
16#00030000//GetTTEncoding exec
PDFEncoding dup null eq{
pop//GetMacRomanEncodingInverse exec
}{
//InverseEncoding exec
}ifelse
//ComposeCharStrings exec
exit
}if
mark(True Type cmap has no useful encodings.)//error exec
}loop
//PDFR_DEBUG{
(CharStrings <<)=
dup{
exch
dup type/nametype eq{
//=only exec
}{
==
}ifelse
( )print ==
}forall
(>>)=
}if
}bind def
/ScaleVal
{
aload pop
1 index sub
3 2 roll mul add
}bind def
/ScaleArg
{
aload pop
1 index sub
3 1 roll
sub exch div
}bind def
/ScaleArgN
{
dup length 2 sub -2 0{
2
2 index 3 1 roll getinterval
3 2 roll
exch//ScaleArg exec
1 index length 2 idiv 1 add 1 roll
}for
pop
}bind def
/ComputeFunction_10
{
//PDFR_DEBUG{
(ComputeFunction_10 beg )print 1 index//=only exec( stack=)print count =
}if
exch
dup 1 eq{
pop dup length 1 sub get
}{
1 index length 1 sub mul
dup dup floor sub
dup 0 eq{
pop cvi get
}{
3 1 roll floor cvi
2 getinterval
aload pop
2 index mul 3 2 roll 1 exch sub 3 2 roll mul add
}ifelse
}ifelse
//PDFR_DEBUG{
(ComputeFunction_10 end )print dup//=only exec( stack=)print count =
}if
}bind def
/ComputeFunction_n0
{
//PDFR_DEBUG{
(ComputeFunction_n0 beg N=)print dup//=only exec( stack=)print count =
}if
dup 0 eq{
pop
}{
dup 2 add -1 roll
dup 3 index length 1 sub ge{
pop 1 sub
exch dup length 1 sub get exch
//PDFReader/ComputeFunction_n0 get exec
}{
dup floor cvi dup
4 index exch get
3 index dup
5 add copy
6 2 roll
pop pop pop pop
1 sub
//PDFReader/ComputeFunction_n0 get exec
3 2 roll pop
exch
4 3 roll exch
4 add 2 roll 1 add
3 2 roll exch get
exch 1 sub
//PDFReader/ComputeFunction_n0 get exec
1 index mul
3 1 roll
1 exch sub mul add
}ifelse
}ifelse
//PDFR_DEBUG{
(ComputeFunction_n0 end )print dup//=only exec( stack=)print count =
}if
}bind def
/FunctionToProc_x01
{
dup/Domain get exch
dup/Data get 0 get exch
/Size get length
[4 1 roll
//PDFR_DEBUG{
{(function beg, stack =)print count//=only exec(\n)print}/exec load
5 2 roll
}if
dup 1 gt{
{mark exch
3 add 2 roll
//ScaleArgN exec
counttomark dup
3 add -2 roll
pop exch
//ComputeFunction_n0 exec
}/exec load
}{
pop
3 1/roll load//ScaleArg/exec load
/exch load
//ComputeFunction_10/exec load
}ifelse
//PDFR_DEBUG{
(function end, stack =)/print load/count load//=only/exec load(\n)/print load
}if
]cvx
//PDFR_DEBUG{
(Made a procedure for the 1-result function :)=
dup ==
}if
}bind def
/FunctionProcDebugBeg
{(FunctionProcDebugBeg )print count =
}bind def
/FunctionProcDebugEnd
{(FunctionProcDebugEnd )print count =
}bind def
/FunctionToProc_x0n
{
PDFR_DEBUG{
(FunctionToProc_x0n beg m=)print dup =
}if
1 index/Size get length exch
dup 7 mul 2 add array
PDFR_DEBUG{
dup 0//FunctionProcDebugBeg put
}{
dup 0//DoNothing put
}ifelse
dup 1/exec load put
dup 2 5 index/Domain get put
2 index 1 eq{
dup 3//ScaleArg put
}{
dup 3//ScaleArgN put
}ifelse
dup 4/exec load put
1 index 1 sub 0 exch 1 exch{
dup 7 mul 5 add
1 index 4 index 1 sub ne{
dup 3 index exch 6 index put 1 add
dup 3 index exch/copy load put 1 add
}if
[
6 index/Data get 3 index get
6 index 1 eq{
//ComputeFunction_10/exec load
}{
6 index
//ComputeFunction_n0/exec load
}ifelse
]cvx
3 index exch 2 index exch put 1 add
2 index 1 index/exec load put 1 add
1 index 4 index 1 sub ne{
2 index 1 index 6 index 1 add put 1 add
2 index 1 index 1 put 1 add
2 index 1 index/roll load put
}if
pop pop
}for
PDFR_DEBUG{
dup dup length 2 sub//FunctionProcDebugEnd put
}{
dup dup length 2 sub//DoNothing put
}ifelse
dup dup length 1 sub/exec load put
cvx exch pop exch pop exch pop
//PDFR_DEBUG{
(Made a procedure for the n-argument function :)=
dup ==
}if
PDFR_DEBUG{
(FunctionToProc_x0n end)=
}if
}bind def
/MakeTableRec
{
0
exec
}bind def
/MakeTable
{//PDFR_DEBUG{
(MakeTable beg )print count =
}if
1 index/Size get exch
1 sub dup
3 1 roll
get
array
1 index 0 eq{
exch pop exch pop
}{
dup length 1 sub -1 0{
3 index 3 index//MakeTableRec exec
2 index 3 1 roll put
}for
exch pop exch pop
}ifelse
//PDFR_DEBUG{
(MakeTable end )print count =
}if
}bind def
//MakeTableRec 0//MakeTable put
/StoreSample
{
1 sub
dup 0 eq{
pop
}{
-1 1{
I exch get get
}for
}ifelse
I 0 get 3 2 roll put
}bind def
/ReadSample32
{
4{
File read not{
mark(Insufficient data for function.)//error exec
}if
}repeat
pop
3 1 roll exch
256 mul add 256 mul add
//1_24_bitshift_1_sub div
}bind def
/ReadSample
{
Buffer BitsLeft BitsPerSample
{2 copy ge{
exit
}if
3 1 roll
8 add 3 1 roll
256 mul File read not{
mark(Insufficient data for function.)//error exec
}if
add
3 1 roll
}loop
sub dup
2 index exch
neg bitshift
2 copy exch bitshift
4 3 roll exch sub
/Buffer exch def
exch/BitsLeft exch def
Div div
}bind def
/ReadSamplesRec
{0
exec
}bind def
/ReadSamples
{
//PDFR_DEBUG{
(ReadSamples beg )print count =
}if
dup 1 eq{
pop
0 1 Size 0 get 1 sub{
I exch 0 exch put
0 1 M 1 sub{
dup Range exch 2 mul 2 getinterval
//PDFR_DEBUG{
(Will read a sample ... )print
}if
BitsPerSample 32 eq{//ReadSample32}{//ReadSample}ifelse
exec exch//ScaleVal exec
//PDFR_DEBUG{
(value=)print dup =
}if
exch Table exch get
Size length//StoreSample exec
}for
}for
}{
1 sub
dup Size exch get 0 exch 1 exch 1 sub{
I exch 2 index exch put
dup//ReadSamplesRec exec
}for
pop
}ifelse
//PDFR_DEBUG{
(ReadSamples end )print count =
}if
}bind def
//ReadSamplesRec 0//ReadSamples put
/StreamToArray
{//PDFR_DEBUG{
(StreamToArray beg )print count =
}if
userdict/FuncDataReader get begin
dup/BitsPerSample get/BitsPerSample exch def
dup/Size get length/N exch def
dup/Range get length 2 idiv/M exch def
1 BitsPerSample bitshift 1 sub/Div exch def
/BitsLeft 0 def
/Buffer 0 def
dup/Size get/Size exch def
dup/Range get/Range exch def
/File 1 index//MakeStreamReader exec def
/I[N{0}repeat]def
M array
dup length 1 sub -1 0{
2 index N//MakeTable exec
2 index 3 1 roll put
}for
/Table exch def
N//ReadSamples exec
PDFR_DEBUG{
(Table = )print Table ==
}if
/Data Table put
end
//PDFR_DEBUG{
(StreamToArray end )print count =
}if
}bind def
/FunctionToProc10
{
PDFR_DEBUG{
(FunctionToProc10 beg, Range = )print dup/Range get ==
}if
dup/Order//knownget exec{
1 ne{
(Underimplemented function Type 0 Order 3.)=
}if
}if
dup//StreamToArray exec
dup/Range get length dup 2 eq{
pop//FunctionToProc_x01 exec
}{
2 idiv//FunctionToProc_x0n exec
}ifelse
PDFR_DEBUG{
(FunctionToProc10 end)=
}if
}bind def
/FunctionToProc12
{begin
currentdict/C0//knownget exec{length 1 eq}{true}ifelse{
N
currentdict/C0//knownget exec{
0 get
}{
0
}ifelse
currentdict/C1//knownget exec{
0 get
}{
1
}ifelse
1 index sub
[4 1 roll
{
4 2 roll
exp mul add
}aload pop
]cvx
}{
[
0 1 C0 length 1 sub{
N
C0 2 index get
C1 3 index get
4 3 roll pop
1 index sub
[/dup load
5 2 roll
{
4 2 roll
exp mul add
exch
}aload pop
]cvx
/exec load
}for
/pop load
]cvx
}ifelse
end
//PDFR_DEBUG{
(FunctionType2Proc : )print dup ==
}if
}bind def
/FunctionToProc14
{//MakeStreamReader exec cvx exec
//PDFR_DEBUG{
(FunctionType4Proc : )print dup ==
}if
}bind def
/FunctionToProc1
{
dup/FunctionType get
{dup 0 eq{
pop//FunctionToProc10 exec exit
}if
dup 2 eq{
pop//FunctionToProc12 exec exit
}if
dup 4 eq{
pop//FunctionToProc14 exec exit
}if
mark exch(Function type )exch( isn't implemented yet.)//error exec
}loop
}bind def
/FunctionToProc20
{
PDFR_DEBUG{
(FunctionToProc20, Range = )print dup/Range get ==
}if
dup/Order//knownget exec{
1 ne{
(Underimplemented function Type 0 Order 3.)=
}if
}if
dup//StreamToArray exec
dup/Range get length dup 2 eq{
pop//FunctionToProc_x01 exec
}{
2 idiv//FunctionToProc_x0n exec
}ifelse
}bind def
/FunctionToProc
{//PDFR_DEBUG{
(FunctionToProc beg )print count =
}if
dup type/dicttype eq{
dup/Domain get length 2 idiv
{
dup 1 eq{
pop//FunctionToProc1 exec exit
}if
dup 2 eq{
pop//FunctionToProc20 exec exit
}if
mark(Functions with many arguments aren't implemented yet.)//error exec
}loop
}{
//PDFR_DEBUG{(Not a function dict, assume already a procedure.)print}if
}ifelse
//PDFR_DEBUG{
(FunctionToProc end )print count =
}if
}bind def
/spotfunctions mark
/Round{
abs exch abs 2 copy add 1 le{
dup mul exch dup mul add 1 exch sub
}{
1 sub dup mul exch 1 sub dup mul add 1 sub
}ifelse
}
/Diamond{
abs exch abs 2 copy add .75 le{
dup mul exch dup mul add 1 exch sub
}{
2 copy add 1.23 le{
.85 mul add 1 exch sub
}{
1 sub dup mul exch 1 sub dup mul add 1 sub
}ifelse
}ifelse
}
/Ellipse{
abs exch abs 2 copy 3 mul exch 4 mul add 3 sub dup 0 lt{
pop dup mul exch .75 div dup mul add 4 div 1 exch sub
}{
dup 1 gt{
pop 1 exch sub dup mul exch 1 exch sub
.75 div dup mul add 4 div 1 sub
}{
.5 exch sub exch pop exch pop
}ifelse
}ifelse
}
/EllipseA{dup mul .9 mul exch dup mul add 1 exch sub}
/InvertedEllipseA{dup mul .9 mul exch dup mul add 1 sub}
/EllipseB{dup 5 mul 8 div mul exch dup mul exch add sqrt 1 exch sub}
/EllipseC{dup mul .9 mul exch dup mul add 1 exch sub}
/InvertedEllipseC{dup mul .9 mul exch dup mul add 1 sub}
/Line{exch pop abs neg}
/LineX{pop}
/LineY{exch pop}
/Square{abs exch abs 2 copy lt{exch}if pop neg}
/Cross{abs exch abs 2 copy gt{exch}if pop neg}
/Rhomboid{abs exch abs 0.9 mul add 2 div}
/DoubleDot{2{360 mul sin 2 div exch}repeat add}
/InvertedDoubleDot{2{360 mul sin 2 div exch}repeat add neg}
/SimpleDot{dup mul exch dup mul add 1 exch sub}
/InvertedSimpleDot{dup mul exch dup mul add 1 sub}
/CosineDot{180 mul cos exch 180 mul cos add 2 div}
/Double{exch 2 div exch 2{360 mul sin 2 div exch}repeat add}
/InvertedDouble{
exch 2 div exch 2{360 mul sin 2 div exch}repeat add neg
}
.dicttomark readonly def
/CheckColorSpace
{
dup type/arraytype ne{
mark(Resource )3 index( must be an array.)//error exec
}if
}bind def
/SubstitutePDFColorSpaceRec
{0
exec
}bind def
/SubstitutePDFColorSpace
{
{
dup 0 get/Pattern eq{
dup length 1 gt{
dup dup 1//CheckColorSpace//ResolveA exec
dup type/nametype ne{
//SubstitutePDFColorSpaceRec exec
}if
1 exch put
}if
exit
}if
dup 0 get/Indexed eq{
exit
}if
dup 0 get/Separation eq{
dup dup 2//CheckColorSpace//ResolveA exec
dup type/nametype ne{
//SubstitutePDFColorSpaceRec exec
}if
2 exch put
exit
}if
dup 0 get/CalGray eq{
1 get
dup/Gamma//knownget exec{
[exch[exch/exp load]cvx dup dup]
1 index exch/DecodeLMN exch put
}if
[exch/CIEBasedA exch]
exit
}if
dup 0 get/CalRGB eq{
1 get
dup/Matrix//knownget exec{
1 index exch/MatrixLMN exch put
}if
dup/Gamma//knownget exec{
aload pop
[exch/exp load]cvx
3 1 roll
[exch/exp load]cvx
3 1 roll
[exch/exp load]cvx
3 1 roll
3 array astore
1 index exch/DecodeLMN exch put
}if
[exch/CIEBasedABC exch]
exit
}if
dup 0 get/Lab eq{
1 get
begin
currentdict/Range//knownget exec{aload pop}{-100 100 -100 100}ifelse
0 100 6 2 roll 6 array astore
/RangeABC exch def
/DecodeABC[{16 add 116 div}bind{500 div}bind{200 div}bind]def
/MatrixABC[1 1 1 1 0 0 0 0 -1]def
{dup 6 29 div ge{dup dup mul mul}{4 29 div sub 108 841 div mul}ifelse}
/DecodeLMN[
[3 index aload pop WhitePoint 0 get/mul load]cvx
[4 index aload pop WhitePoint 1 get/mul load]cvx
[5 index aload pop WhitePoint 2 get/mul load]cvx
]def pop
//PDFR_DEBUG{
(Constructed from Lab <<)=
currentdict{exch = ==}forall
(>>)=
}if
[/CIEBasedABC currentdict]
end
exit
pop
}if
dup 0 get/CIEBasedA eq{exit}if
dup 0 get/CIEBasedABC eq{exit}if
mark exch(Unimplemented color space )exch//error exec
}loop
}bind def
//SubstitutePDFColorSpaceRec 0//SubstitutePDFColorSpace put
/ResolveArrayElement
{2 copy get
dup type dup/arraytype eq exch
/packedarraytype eq or{
dup length 1 ge exch xcheck and{
2 copy get
dup 0 get type/integertype eq
1 index 1 get type dup/arraytype
eq exch
/packedarraytype eq or
and{
exec
2 index 4 1 roll put
}{
pop pop
}ifelse
}{
pop
}ifelse
}{
pop pop
}ifelse
}bind def
/ResolveColorSpaceArrayRec
{0
exec
}bind def
/SetColorSpaceSafe
{
PDFR_DEBUG{
(SetColorSpaceSafe beg)=
}if
currentcolorspace dup type/arraytype eq{
1 index type/arraytype eq{
dup length 2 index length eq{
false exch
dup length 0 exch 1 exch 1 sub{
dup
4 index exch get exch
2 index exch get
ne{
exch pop true exch exit
}if
}for
pop
{
setcolorspace
}{
pop
}ifelse
}{
pop setcolorspace
}ifelse
}{
pop setcolorspace
}ifelse
}{
pop setcolorspace
}ifelse
PDFR_DEBUG{
(SetColorSpaceSafe end)=
}if
}bind def
/ResolveColorSpaceArray
{
//PDFR_DEBUG{
(ResolveColorSpaceArray beg )print dup ==
}if
dup 0 get/Indexed eq{
1//ResolveArrayElement exec
dup dup 1 get
dup type/arraytype eq{
//SubstitutePDFColorSpace exec
//ResolveColorSpaceArrayRec exec
1 exch put
}{
pop pop
}ifelse
}if
dup 0 get/Separation eq{
dup dup 1 get UnPDFEscape 1 exch put
3//ResolveArrayElement exec
dup 3 get//FunctionToProc exec
2 copy 3 exch put
pop
}if
dup 0 get/Pattern eq{
dup length 1 gt{dup
1 get dup type/arraytype eq{
ResolveColorSpaceArray
1 index 1 3 -1 roll put
}{pop}ifelse}if
}if
PDFR_DEBUG{
(Construcrted color space :)=
dup ==
}if
//PDFR_DEBUG{
(ResolveColorSpaceArray end )print dup ==
}if
}bind def
//ResolveColorSpaceArrayRec 0//ResolveColorSpaceArray put
/ResolveColorSpace
{
//PDFR_DEBUG{
(ResolveColorSpace beg )print dup =
}if
dup//SimpleColorSpaceNames exch known not{
dup//PDFColorSpaces exch//knownget exec{
exch pop
//PDFR_DEBUG{
(ResolveColorSpace known )=
}if
}{
dup
//PDFReader/CurrentObject get/Context get/Resources get
/ColorSpace//DoNothing//ResolveD exec
exch//CheckColorSpace//ResolveD exec
dup type/arraytype eq{
//SubstitutePDFColorSpace exec
//ResolveColorSpaceArray exec
dup//PDFColorSpaces 4 2 roll put
}if
}ifelse
}if
//PDFR_DEBUG{
(ResolveColorSpace end )print dup ==
}if
}bind def
/CheckPattern
{
dup/PatternType//knownget exec{
dup 1 ne{
mark(Resource )4 index( is a shading, which can't be handled at level 2. )//error exec
}if
pop
}if
dup/Type knownget{
/Pattern ne{
mark(Resource )4 index( must have /Type/Pattern .)//error exec
}if
}if
}bind def
/PaintProc
{/Context get
//RunDelayedStream exec
}bind def
/ResolvePattern
{
dup
userdict/PDFR_Patterns get
exch//knownget exec{
exch pop
}{
dup
//PDFReader/CurrentObject get/Context get/Resources get
/Pattern//DoNothing//ResolveD exec
exch//CheckPattern//ResolveD exec
dup dup/Context exch put
dup/Resources//DoNothing//ResolveD exec pop
dup/PaintProc//PaintProc put
gsave userdict/PDFR_InitialGS get setgstate
currentglobal exch false setglobal
dup/Matrix get
makepattern
exch setglobal
grestore
dup userdict/PDFR_Patterns get
4 2 roll
put
}ifelse
}bind def
/SetColor
{//PDFR_DEBUG{
(SetColor beg)=
}if
currentcolorspace dup type/nametype eq{
pop setcolor
}{
0 get/Pattern eq{
//ResolvePattern exec setpattern
}{
setcolor
}ifelse
}ifelse
//PDFR_DEBUG{
(SetColor end)=
}if
}bind def
/ImageKeys 15 dict begin
/BPC/BitsPerComponent def
/CS/ColorSpace def
/D/Decode def
/DP/DecodeParms def
/F/Filter def
/H/Height def
/IM/ImageMask def
/I/Interpolate def
/W/Width def
currentdict end readonly def
/ImageValues 15 dict begin
/G/DeviceGray def
/RGB/DeviceRGB def
/CMYK/DeviceCMYK def
/I/Indexed def
/AHx/ASCIIHexDecode def
/A85/ASCII85Decode def
/LZW/LZWDecode def
/Fl/FlateDecode def
/RL/RunLengthDecode def
/CCF/CCITTFaxDecode def
/DCT/DCTDecode def
currentdict end readonly def
/GetColorSpaceRange
{2 index/ColorSpace get
dup type/arraytype eq{
1 get
}if
exch//knownget exec{
exch pop
}if
}bind def
/DecodeArrays 15 dict begin
/DeviceGray{[0 1]}def
/DeviceRGB{[0 1 0 1 0 1]}def
/DeviceCMYK{[0 1 0 1 0 1 0 1]}def
/Indexed{
dup/BitsPerComponent get 1 exch bitshift 1 sub[exch 0 exch]
}def
/Separation{[0 1]}def
/CIEBasedA{[0 1]/RangeA//GetColorSpaceRange exec}def
/CIEBasedABC{[0 1 0 1 0 1]/RangeABC//GetColorSpaceRange exec}def
currentdict end readonly def
/Substitute
{1 index//knownget exec{
exch pop
}if
}bind def
/DebugImagePrinting
{
//PDFR_DEBUG{
(Image :)=
dup{exch//=only exec( )print ==
}forall
}if
}bind def
/CompleteImage
{
dup/ColorSpace known{
dup/ColorSpace//CheckColorSpace//ResolveD exec pop
}if
dup/Decode known not{
dup/ColorSpace//knownget exec{
dup type/arraytype eq{
0 get
}if
//DecodeArrays exch get exec
}{
[0 1]
}ifelse
1 index exch/Decode exch put
}if
dup/ImageMatrix[2 index/Width get 0 0 5 index/Height get neg
0 7 index/Height get]put
//DebugImagePrinting exec
}bind def
/CompleteInlineImage
{
//PDFR_DEBUG{
(CompleteInlineImage beg)=
}if
dup/ImageType known not{
dup/ImageType 1 put
}if
dup length dict exch{
exch//ImageKeys//Substitute exec
dup/Filter eq{
exch//ImageValues//Substitute exec exch
}if
dup/ColorSpace eq{
exch
dup//ImageValues exch//knownget exec{
exch pop
}{
//ResolveColorSpace exec
}ifelse
exch
}if
exch
2 index 3 1 roll put
}forall
//CompleteImage exec
dup/DataSource 2 copy get
2 index//AppendFilters exec put
//PDFR_DEBUG{
(CompleteInlineImage end)=
}if
}bind def
/CompleteOutlineImage
{
currentglobal exch dup gcheck setglobal
//PDFR_DEBUG{
(CompleteOutlineImage beg)=
}if
dup dup//MakeStreamReader exec/DataSource exch put
dup/ImageType known not{
//CompleteImage exec
dup/ImageType 1 put
dup/ColorSpace known{
dup/ColorSpace//CheckColorSpace//ResolveD exec
dup type/arraytype eq{
//ResolveColorSpaceArray exec
//SubstitutePDFColorSpace exec
1 index exch/ColorSpace exch put
}{
pop
}ifelse
}if
}if
//PDFR_DEBUG{
(CompleteOutlineImage end)=
}if
exch setglobal
}bind def
/DoImage
{
//PDFR_DEBUG{
(DoImage beg)=
}if
gsave
dup/ColorSpace//knownget exec{setcolorspace}if
dup/ImageMask//knownget exec not{false}if
{imagemask}{image}ifelse
grestore
//PDFR_DEBUG{
(DoImage end)=
}if
}bind def
/GSave
{
gsave
//PDFReader/GraphicStateStackPointer get
dup//GraphicStateStack exch get null eq{
dup//GraphicStateStack exch//InitialGraphicState length dict put
}if
dup//GraphicStateStack exch get
//GraphicState exch copy pop
1 add//PDFReader exch/GraphicStateStackPointer exch put
}bind def
/GRestore
{
grestore
//PDFReader/GraphicStateStackPointer get
1 sub dup
//PDFReader exch/GraphicStateStackPointer exch put
//GraphicStateStack exch get
//GraphicState copy pop
}bind def
/SetFont
{dup//GraphicState exch/FontSize exch put
//ResolveAndSetFont exec
//GraphicState/FontMatrixNonHV currentfont/FontMatrix get 1 get 0 ne put
}bind def
/ShowText
{//GraphicState/TextRenderingMode get 0 eq{
//GraphicState/WordSpacing get 0
32
//GraphicState/CharacterSpacing get 0
6 5 roll
//GraphicState/FontMatrixNonHV get{
[
7 -2 roll pop
5 -2 roll pop
5 -1 roll
{
exch
pop
3 index add
exch 2 index eq{3 index add}if
4 1 roll
}
currentfont/FontMatrix get 0 get 0 ne{
1 1 index length 1 sub getinterval cvx
}if
5 index
cshow
pop pop pop]
xshow
}{
awidthshow
}ifelse
}{
//GraphicState/CharacterSpacing get 0 eq
//GraphicState/FontMatrixNonHV get not and
//GraphicState/WordSpacing get 0 eq and{
true charpath
}{
{
exch
pop 0
currentpoint 5 4 roll
( )dup 0 3 index put true charpath
5 1 roll
moveto rmoveto
//GraphicState/CharacterSpacing get 0 rmoveto
32 eq{
//GraphicState/WordSpacing get 0 rmoveto
}if
}
//GraphicState/FontMatrixNonHV get dup not exch{
pop currentfont/FontMatrix get 0 get 0 ne
}if{
1 1 index length 1 sub getinterval cvx
}if
exch cshow
}ifelse
}ifelse
}bind def
/ShowTextBeg
{//GraphicState/TextRenderingMode get 0 ne{
currentpoint newpath moveto
}if
}bind def
/ShowTextEnd
{//GraphicState/TextRenderingMode get
{dup 1 eq{
stroke exit
}if
dup 2 eq{
gsave fill grestore stroke exit
}if
dup 3 eq{
currentpoint newpath moveto
}if
dup 4 eq{
gsave fill grestore clip exit
}if
dup 5 eq{
gsave stroke grestore clip exit
}if
dup 6 eq{
gsave fill grestore gsave stroke grestore fill exit
}if
dup 7 eq{
clip exit
}if
exit
}loop
pop
}bind def
/ShowTextWithGlyphPositioning
{//ShowTextBeg exec
{dup type/stringtype eq{
//ShowText exec
}{
neg 1000 div//GraphicState/FontSize get mul 0 rmoveto
}ifelse
}forall
//ShowTextEnd exec
}bind def
/CheckFont
{dup/Type get/ExtGState ne{
mark(Resource )3 index( must have /Type/ExtGState.)//error exec
}if
}bind def
/SetTransfer
{
//PDFR_DEBUG{(SetTransfer beg )print count =}if
dup type/arraytype eq 1 index xcheck not and{
0 4 getinterval aload pop
setcolortransfer
}{
settransfer
}ifelse
//PDFR_DEBUG{(SetTransfer end )print count =}if
}bind def
/CheckExtGState
{dup/Type get/ExtGState ne{
mark(Resource )3 index( must have /Type/ExtGState.)//error exec
}if
}bind def
/CheckHalftone
{dup/HalftoneType known not{
mark(Resource )3 index( must have /HalftoneType.)//error exec
}if
}bind def
/ResolveFunction
{
//PDFR_DEBUG{(ResolveFunction beg )print dup = count =}if
2 copy get//IsObjRef exec{
2 copy//DoNothing//ResolveD exec
3 copy put pop
}if
2 copy get dup type/arraytype eq exch xcheck and not{
2 copy get
dup type/arraytype eq 1 index xcheck not and{
dup length 1 sub -1 0{
2 copy//DoNothing ResolveA
dup/Identity eq{
pop 2 copy{}put
}{
//FunctionToProc exec
3 copy put pop
}ifelse
pop
}for
}{
dup/Default eq{
}{
dup/Identity eq{
pop{}
}{dup type/nametype eq{
//spotfunctions exch get
}{
//FunctionToProc exec
}ifelse
}ifelse
}ifelse
}ifelse
3 copy put
exch pop
}{
1 index exch get
}ifelse
//PDFR_DEBUG{(ResolveFunction end )print dup == count =}if
}bind def
/ResolveFunctionSafe
{2 copy known{
//ResolveFunction exec
}if
pop
}bind def
/CreateHalftoneThresholds
{
dup/Thresholds known not{
dup/HalftoneType get 10 eq{
dup dup//MakeStreamReader exec
/Thresholds exch put
}if
dup/HalftoneType get dup 3 eq exch 6 eq or{
dup dup//MakeStreamReader exec
//BlockBuffer readstring pop
dup length
dup 0 eq{
mark(Could not read Thresholds)//error exec
}if
string copy/Thresholds exch put
dup/HalftoneType 3 put
}if
}if
}bind def
/SetExtGState
{
//PDFReader/CurrentObject get/Context get/Resources get
/ExtGState//DoNothing//ResolveD exec
exch//CheckExtGState//ResolveD exec
dup/LW//knownget exec{
setlinewidth
}if
dup/LC//knownget exec{
setlinecap
}if
dup/LJ//knownget exec{
setlinejoin
}if
dup/ML//knownget exec{
setmeterlimit
}if
dup/D//knownget exec{
setdash
}if
dup/RI//knownget exec{
mark(Unimplemented ExtGState.RI)//error exec
}if
dup/OP//knownget exec{
setoverprint
}if
dup/op//knownget exec{
setoverprint
}if
dup/OPM//knownget exec{
mark(Unimplemented ExtGState.OPM)//error exec
}if
dup/Font//knownget exec{
mark(Unimplemented ExtGState.Font)//error exec
}if
dup/BG known{
/BG//ResolveFunction exec
setblackgeneration
}if
dup/BG2 known{
/BG2//ResolveFunction exec
dup/Default eq{
//InitialExtGState/BG2 get
}if
setblackgeneration
}if
dup/UCR known{
/UCR//ResolveFunction exec
setundercolorremoval
}if
dup/UCR2 known{
/UCR2//ResolveFunction exec
dup/Default eq{
//InitialExtGState/UCR2 get
}if
setundercolorremoval
}if
dup/TR known{
/TR//ResolveFunction exec
//SetTransfer exec
}if
dup/TR2 known{
/TR2//ResolveFunction exec
dup/Default eq{
pop//InitialExtGState/TR2 get
aload pop setcolortransfer
}{
//SetTransfer exec
}ifelse
}if
dup/HT//knownget exec{
dup/Default eq{
pop//InitialExtGState/HT get
sethalftone
}{
//PDFR_DEBUG{(Ht beg)=}if
pop dup/HT//CheckHalftone//ResolveD exec
/SpotFunction//ResolveFunctionSafe exec
/TransferFunction//ResolveFunctionSafe exec
null exch
dup/HalftoneType get dup 5 eq exch dup 4 eq exch 2 eq or or{
dup{
dup//IsObjRef exec{
pop
1 index exch//CheckHalftone ResolveD
}if
dup type/dicttype eq{
dup/SpotFunction//ResolveFunctionSafe exec
/TransferFunction//ResolveFunctionSafe exec
//CreateHalftoneThresholds exec
dup/HalftoneType get 5 gt{
4 3 roll pop
dup 4 1 roll
}if
}if
pop pop
}forall
}if
//CreateHalftoneThresholds exec
//PDFR_DEBUG{
(HT:)=
dup{
1 index/Default eq{
(Default <<)=
exch pop
{exch = ==}forall
(>>)=
}{
exch = ==
}ifelse
}forall
(HT end)= flush
}if
exch dup null ne{
(Warning: Ignoring a halftone with a Level 3 component halftone Type )print dup/HalftoneType get =
pop pop
}{
pop
dup/HalftoneType get 5 gt{
(Warning: Ignoring a Level 3 halftone Type )print dup/HalftoneType get =
pop
}{
sethalftone
}ifelse
}ifelse
//PDFR_DEBUG{(HT set)= flush}if
}ifelse
}if
dup/FL//knownget exec{
setflattness
}if
dup/SM//knownget exec{
setsmoothness
}if
dup/SA//knownget exec{
setstrokeadjust
}if
dup/BM//knownget exec{
mark(Unimplemented ExtGState.BM)//error exec
}if
dup/SMask//knownget exec{
mark(Unimplemented ExtGState.SMask)//error exec
}if
dup/CA//knownget exec{
mark(Unimplemented ExtGState.CA)//error exec
}if
dup/ca//knownget exec{
mark(Unimplemented ExtGState.ca)//error exec
}if
dup/AIS//knownget exec{
mark(Unimplemented ExtGState.AIS)//error exec
}if
dup/TK//knownget exec{
mark(Unimplemented ExtGState.TK)//error exec
}if
pop
}bind def
/CheckXObject
{dup/Subtype get dup/Image ne exch dup/Form ne exch/PS ne and and{
mark(Resource )3 index( must have /Subtype /Image or /Form or /PS.)//error exec
}if
}bind def
/DoXObject
{
//PDFReader/CurrentObject get/Context get/Resources get
/XObject//DoNothing//ResolveD exec
exch//CheckXObject//ResolveD exec
dup/Subtype get
dup/Image eq{
pop
//CompleteOutlineImage exec
//DoImage exec
}{
dup/PS eq{
PDFR_DEBUG{
(Executing a PS Xobject)=
}if
pop
//RunDelayedStream exec
}{
dup/Form eq{
pop
PDFR_DEBUG{
(Executing a Form XObject)=
}if
//PDFReader/CurrentObject get exch
dup//PDFReader exch<< exch/Context exch >>/CurrentObject exch put
dup/Matrix get concat
dup/BBox get aload pop exch 3 index sub exch 2 index sub rectclip
//RunDelayedStream exec
//PDFReader exch/CurrentObject exch put
}{
mark exch(unimplemented XObject type )exch//error exec
}ifelse
}ifelse
}ifelse
}bind def
/Operators 50 dict begin
/q{//GSave exec}bind def
/Q{//GRestore exec}bind def
/cm{//TempMatrix astore concat}bind def
/i{1 .min setflat}bind def
/J/setlinecap load def
/d/setdash load def
/j/setlinejoin load def
/w/setlinewidth load def
/M/setmiterlimit load def
/gs{SetExtGState}bind def
/g/setgray load def
/rg/setrgbcolor load def
/k/setcmykcolor load def
/cs{//ResolveColorSpace exec//SetColorSpaceSafe exec
}bind def
/sc/setcolor load def
/scn{//SetColor exec}bind def
/G/setgray load def
/RG/setrgbcolor load def
/K/setcmykcolor load def
/CS//cs def
/ri{SetColorRenderingIntent}bind def
/SC/setcolor load def
/SCN{//SetColor exec}bind def
/m/moveto load def
/l/lineto load def
/c/curveto load def
/v{currentpoint 6 2 roll curveto}bind def
/y{2 copy curveto}bind def
/re{
4 2 roll moveto exch dup 0 rlineto 0 3 -1 roll rlineto neg 0 rlineto
closepath
}def
/h/closepath load def
/n/newpath load def
/S/stroke load def
/s{closepath stroke}bind def
/f/fill load def
/f*/eofill load def
/B{gsave fill grestore stroke}bind def
/b{closepath gsave fill grestore stroke}bind def
/B*{gsave eofill grestore stroke}bind def
/b*{closepath gsave eofill grestore stroke}bind def
/W/clip load def
/W*/eoclip load def
/sh{
ResolveShading
dup/Background known{
gsave
dup/ColorSpace get setcolorspace
dup/Background get aload pop setcolor
pathbbox
2 index sub exch 3 index sub exch
rectfill
grestore
}if
shfill
}bind def
/Do{//DoXObject exec}bind def
/BI{currentglobal false setglobal<<}bind def
/ID{>>
dup/DataSource currentfile
2 index/F//knownget exec{
/A85 eq{
0(~>)/SubFileDecode filter
}if
}if
put
//CompleteInlineImage exec
exch setglobal
//DoImage exec
}bind def
/EI{}bind def
/BT{gsave//GraphicState/InitialTextMatrix get currentmatrix pop}bind def
/ET{grestore}bind def
/Tc{//GraphicState exch/CharacterSpacing exch put}bind def
/TL{//GraphicState exch/TextLeading exch put}bind def
/Tr{//GraphicState exch/TextRenderingMode exch put}bind def
/Ts{
mark(Unimplemented SetTextRise)//error exec
}bind def
/Tw{//GraphicState exch/WordSpacing exch put}bind def
/Tz{
mark(Unimplemented SetHorizontalTextScaling)//error exec
}bind def
/Td{translate 0 0 moveto}bind def
/TD{dup neg//TL exec//Td exec}bind def
/Tm{//GraphicState/InitialTextMatrix get setmatrix
//TempMatrix astore concat
0 0 moveto}bind def
/T*{0//GraphicState/TextLeading get neg//Td exec}bind def
/Tj{//ShowTextBeg exec//ShowText exec//ShowTextEnd exec}bind def
/'{//T* exec//ShowText exec//ShowTextEnd exec}bind def
/"{3 2 roll//Tw exec exch//Tc exec//' exec}bind def
/TJ//ShowTextWithGlyphPositioning def
/Tf//SetFont def
/d0/setcharwidth load def
/d1/setcachedevice load def
/BDC{pop pop}bind def
/BMC{pop}bind def
/EMC{}bind def
/BX{BeginCompatibilitySection}bind def
/EX{EndCompatibilitySection}bind def
/DP{DefineMarkedContentPointWithPropertyList}bind def
/MP{DefineMarkedContentPoint}bind def
/PS{cvx exec}bind def
currentdict end def
//PDFR_STREAM{
//Operators length dict begin
//Operators{
exch dup
[exch//=only/exec load
( )/print load
8 7 roll
dup type/arraytype eq{
/exec load
}if
( )/print load
]cvx
def
}forall
currentdict end/Operators exch def
}if
/.registerencoding
{pop pop
}bind def
/.defineencoding
{def
}bind def
/.findencoding
{load
}bind def
/currentglobal where
{pop currentglobal{setglobal}true setglobal}
{{}}
ifelse
/MacRomanEncoding
StandardEncoding 0 39 getinterval aload pop
/quotesingle
StandardEncoding 40 56 getinterval aload pop
/grave
StandardEncoding 97 31 getinterval aload pop
/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute
/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave
/ecircumflex/edieresis/iacute/igrave
/icircumflex/idieresis/ntilde/oacute
/ograve/ocircumflex/odieresis/otilde
/uacute/ugrave/ucircumflex/udieresis
/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef
/florin/.notdef/.notdef/guillemotleft
/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright
/quoteleft/quoteright/divide/.notdef
/ydieresis/Ydieresis/fraction/currency
/guilsinglleft/guilsinglright/fi/fl
/daggerdbl/periodcentered/quotesinglbase/quotedblbase
/perthousand/Acircumflex/Ecircumflex/Aacute
/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex
/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde
/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caron
256 packedarray
5 1 index .registerencoding
.defineencoding
exec
/AdobeGlyphList mark
/A 16#0041
/AE 16#00c6
/AEacute 16#01fc
/AEmacron 16#01e2
/AEsmall 16#f7e6
/Aacute 16#00c1
/Aacutesmall 16#f7e1
/Abreve 16#0102
/Abreveacute 16#1eae
/Abrevecyrillic 16#04d0
/Abrevedotbelow 16#1eb6
/Abrevegrave 16#1eb0
/Abrevehookabove 16#1eb2
/Abrevetilde 16#1eb4
/Acaron 16#01cd
/Acircle 16#24b6
/Acircumflex 16#00c2
/Acircumflexacute 16#1ea4
/Acircumflexdotbelow 16#1eac
/Acircumflexgrave 16#1ea6
/Acircumflexhookabove 16#1ea8
/Acircumflexsmall 16#f7e2
/Acircumflextilde 16#1eaa
/Acute 16#f6c9
/Acutesmall 16#f7b4
/Acyrillic 16#0410
/Adblgrave 16#0200
/Adieresis 16#00c4
/Adieresiscyrillic 16#04d2
/Adieresismacron 16#01de
/Adieresissmall 16#f7e4
/Adotbelow 16#1ea0
/Adotmacron 16#01e0
/Agrave 16#00c0
/Agravesmall 16#f7e0
/Ahookabove 16#1ea2
/Aiecyrillic 16#04d4
/Ainvertedbreve 16#0202
/Alpha 16#0391
/Alphatonos 16#0386
/Amacron 16#0100
/Amonospace 16#ff21
/Aogonek 16#0104
/Aring 16#00c5
/Aringacute 16#01fa
/Aringbelow 16#1e00
/Aringsmall 16#f7e5
/Asmall 16#f761
/Atilde 16#00c3
/Atildesmall 16#f7e3
/Aybarmenian 16#0531
/B 16#0042
/Bcircle 16#24b7
/Bdotaccent 16#1e02
/Bdotbelow 16#1e04
/Becyrillic 16#0411
/Benarmenian 16#0532
/Beta 16#0392
/Bhook 16#0181
/Blinebelow 16#1e06
/Bmonospace 16#ff22
/Brevesmall 16#f6f4
/Bsmall 16#f762
/Btopbar 16#0182
/C 16#0043
/Caarmenian 16#053e
/Cacute 16#0106
/Caron 16#f6ca
/Caronsmall 16#f6f5
/Ccaron 16#010c
/Ccedilla 16#00c7
/Ccedillaacute 16#1e08
/Ccedillasmall 16#f7e7
/Ccircle 16#24b8
/Ccircumflex 16#0108
/Cdot 16#010a
/Cdotaccent 16#010a
/Cedillasmall 16#f7b8
/Chaarmenian 16#0549
/Cheabkhasiancyrillic 16#04bc
/Checyrillic 16#0427
/Chedescenderabkhasiancyrillic 16#04be
/Chedescendercyrillic 16#04b6
/Chedieresiscyrillic 16#04f4
/Cheharmenian 16#0543
/Chekhakassiancyrillic 16#04cb
/Cheverticalstrokecyrillic 16#04b8
/Chi 16#03a7
/Chook 16#0187
/Circumflexsmall 16#f6f6
/Cmonospace 16#ff23
/Coarmenian 16#0551
/Csmall 16#f763
/D 16#0044
/DZ 16#01f1
/DZcaron 16#01c4
/Daarmenian 16#0534
/Dafrican 16#0189
/Dcaron 16#010e
/Dcedilla 16#1e10
/Dcircle 16#24b9
/Dcircumflexbelow 16#1e12
/Dcroat 16#0110
/Ddotaccent 16#1e0a
/Ddotbelow 16#1e0c
/Decyrillic 16#0414
/Deicoptic 16#03ee
/Delta 16#2206
/Deltagreek 16#0394
/Dhook 16#018a
/Dieresis 16#f6cb
/DieresisAcute 16#f6cc
/DieresisGrave 16#f6cd
/Dieresissmall 16#f7a8
/Digammagreek 16#03dc
/Djecyrillic 16#0402
/Dlinebelow 16#1e0e
/Dmonospace 16#ff24
/Dotaccentsmall 16#f6f7
/Dslash 16#0110
/Dsmall 16#f764
/Dtopbar 16#018b
/Dz 16#01f2
/Dzcaron 16#01c5
/Dzeabkhasiancyrillic 16#04e0
/Dzecyrillic 16#0405
/Dzhecyrillic 16#040f
/E 16#0045
/Eacute 16#00c9
/Eacutesmall 16#f7e9
/Ebreve 16#0114
/Ecaron 16#011a
/Ecedillabreve 16#1e1c
/Echarmenian 16#0535
/Ecircle 16#24ba
/Ecircumflex 16#00ca
/Ecircumflexacute 16#1ebe
/Ecircumflexbelow 16#1e18
/Ecircumflexdotbelow 16#1ec6
/Ecircumflexgrave 16#1ec0
/Ecircumflexhookabove 16#1ec2
/Ecircumflexsmall 16#f7ea
/Ecircumflextilde 16#1ec4
/Ecyrillic 16#0404
/Edblgrave 16#0204
/Edieresis 16#00cb
/Edieresissmall 16#f7eb
/Edot 16#0116
/Edotaccent 16#0116
/Edotbelow 16#1eb8
/Efcyrillic 16#0424
/Egrave 16#00c8
/Egravesmall 16#f7e8
/Eharmenian 16#0537
/Ehookabove 16#1eba
/Eightroman 16#2167
/Einvertedbreve 16#0206
/Eiotifiedcyrillic 16#0464
/Elcyrillic 16#041b
/Elevenroman 16#216a
/Emacron 16#0112
/Emacronacute 16#1e16
/Emacrongrave 16#1e14
/Emcyrillic 16#041c
/Emonospace 16#ff25
/Encyrillic 16#041d
/Endescendercyrillic 16#04a2
/Eng 16#014a
/Enghecyrillic 16#04a4
/Enhookcyrillic 16#04c7
/Eogonek 16#0118
/Eopen 16#0190
/Epsilon 16#0395
/Epsilontonos 16#0388
/Ercyrillic 16#0420
/Ereversed 16#018e
/Ereversedcyrillic 16#042d
/Escyrillic 16#0421
/Esdescendercyrillic 16#04aa
/Esh 16#01a9
/Esmall 16#f765
/Eta 16#0397
/Etarmenian 16#0538
/Etatonos 16#0389
/Eth 16#00d0
/Ethsmall 16#f7f0
/Etilde 16#1ebc
/Etildebelow 16#1e1a
/Euro 16#20ac
/Ezh 16#01b7
/Ezhcaron 16#01ee
/Ezhreversed 16#01b8
/F 16#0046
/Fcircle 16#24bb
/Fdotaccent 16#1e1e
/Feharmenian 16#0556
/Feicoptic 16#03e4
/Fhook 16#0191
/Fitacyrillic 16#0472
/Fiveroman 16#2164
/Fmonospace 16#ff26
/Fourroman 16#2163
/Fsmall 16#f766
/G 16#0047
/GBsquare 16#3387
/Gacute 16#01f4
/Gamma 16#0393
/Gammaafrican 16#0194
/Gangiacoptic 16#03ea
/Gbreve 16#011e
/Gcaron 16#01e6
/Gcedilla 16#0122
/Gcircle 16#24bc
/Gcircumflex 16#011c
/Gcommaaccent 16#0122
/Gdot 16#0120
/Gdotaccent 16#0120
/Gecyrillic 16#0413
/Ghadarmenian 16#0542
/Ghemiddlehookcyrillic 16#0494
/Ghestrokecyrillic 16#0492
/Gheupturncyrillic 16#0490
/Ghook 16#0193
/Gimarmenian 16#0533
/Gjecyrillic 16#0403
/Gmacron 16#1e20
/Gmonospace 16#ff27
/Grave 16#f6ce
/Gravesmall 16#f760
/Gsmall 16#f767
/Gsmallhook 16#029b
/Gstroke 16#01e4
/H 16#0048
/H18533 16#25cf
/H18543 16#25aa
/H18551 16#25ab
/H22073 16#25a1
/HPsquare 16#33cb
/Haabkhasiancyrillic 16#04a8
/Hadescendercyrillic 16#04b2
/Hardsigncyrillic 16#042a
/Hbar 16#0126
/Hbrevebelow 16#1e2a
/Hcedilla 16#1e28
/Hcircle 16#24bd
/Hcircumflex 16#0124
/Hdieresis 16#1e26
/Hdotaccent 16#1e22
/Hdotbelow 16#1e24
/Hmonospace 16#ff28
/Hoarmenian 16#0540
/Horicoptic 16#03e8
/Hsmall 16#f768
/Hungarumlaut 16#f6cf
/Hungarumlautsmall 16#f6f8
/Hzsquare 16#3390
/I 16#0049
/IAcyrillic 16#042f
/IJ 16#0132
/IUcyrillic 16#042e
/Iacute 16#00cd
/Iacutesmall 16#f7ed
/Ibreve 16#012c
/Icaron 16#01cf
/Icircle 16#24be
/Icircumflex 16#00ce
/Icircumflexsmall 16#f7ee
/Icyrillic 16#0406
/Idblgrave 16#0208
/Idieresis 16#00cf
/Idieresisacute 16#1e2e
/Idieresiscyrillic 16#04e4
/Idieresissmall 16#f7ef
/Idot 16#0130
/Idotaccent 16#0130
/Idotbelow 16#1eca
/Iebrevecyrillic 16#04d6
/Iecyrillic 16#0415
/Ifraktur 16#2111
/Igrave 16#00cc
/Igravesmall 16#f7ec
/Ihookabove 16#1ec8
/Iicyrillic 16#0418
/Iinvertedbreve 16#020a
/Iishortcyrillic 16#0419
/Imacron 16#012a
/Imacroncyrillic 16#04e2
/Imonospace 16#ff29
/Iniarmenian 16#053b
/Iocyrillic 16#0401
/Iogonek 16#012e
/Iota 16#0399
/Iotaafrican 16#0196
/Iotadieresis 16#03aa
/Iotatonos 16#038a
/Ismall 16#f769
/Istroke 16#0197
/Itilde 16#0128
/Itildebelow 16#1e2c
/Izhitsacyrillic 16#0474
/Izhitsadblgravecyrillic 16#0476
/J 16#004a
/Jaarmenian 16#0541
/Jcircle 16#24bf
/Jcircumflex 16#0134
/Jecyrillic 16#0408
/Jheharmenian 16#054b
/Jmonospace 16#ff2a
/Jsmall 16#f76a
/K 16#004b
/KBsquare 16#3385
/KKsquare 16#33cd
/Kabashkircyrillic 16#04a0
/Kacute 16#1e30
/Kacyrillic 16#041a
/Kadescendercyrillic 16#049a
/Kahookcyrillic 16#04c3
/Kappa 16#039a
/Kastrokecyrillic 16#049e
/Kaverticalstrokecyrillic 16#049c
/Kcaron 16#01e8
/Kcedilla 16#0136
/Kcircle 16#24c0
/Kcommaaccent 16#0136
/Kdotbelow 16#1e32
/Keharmenian 16#0554
/Kenarmenian 16#053f
/Khacyrillic 16#0425
/Kheicoptic 16#03e6
/Khook 16#0198
/Kjecyrillic 16#040c
/Klinebelow 16#1e34
/Kmonospace 16#ff2b
/Koppacyrillic 16#0480
/Koppagreek 16#03de
/Ksicyrillic 16#046e
/Ksmall 16#f76b
/L 16#004c
/LJ 16#01c7
/LL 16#f6bf
/Lacute 16#0139
/Lambda 16#039b
/Lcaron 16#013d
/Lcedilla 16#013b
/Lcircle 16#24c1
/Lcircumflexbelow 16#1e3c
/Lcommaaccent 16#013b
/Ldot 16#013f
/Ldotaccent 16#013f
/Ldotbelow 16#1e36
/Ldotbelowmacron 16#1e38
/Liwnarmenian 16#053c
/Lj 16#01c8
/Ljecyrillic 16#0409
/Llinebelow 16#1e3a
/Lmonospace 16#ff2c
/Lslash 16#0141
/Lslashsmall 16#f6f9
/Lsmall 16#f76c
/M 16#004d
/MBsquare 16#3386
/Macron 16#f6d0
/Macronsmall 16#f7af
/Macute 16#1e3e
/Mcircle 16#24c2
/Mdotaccent 16#1e40
/Mdotbelow 16#1e42
/Menarmenian 16#0544
/Mmonospace 16#ff2d
/Msmall 16#f76d
/Mturned 16#019c
/Mu 16#039c
/N 16#004e
/NJ 16#01ca
/Nacute 16#0143
/Ncaron 16#0147
/Ncedilla 16#0145
/Ncircle 16#24c3
/Ncircumflexbelow 16#1e4a
/Ncommaaccent 16#0145
/Ndotaccent 16#1e44
/Ndotbelow 16#1e46
/Nhookleft 16#019d
/Nineroman 16#2168
/Nj 16#01cb
/Njecyrillic 16#040a
/Nlinebelow 16#1e48
/Nmonospace 16#ff2e
/Nowarmenian 16#0546
/Nsmall 16#f76e
/Ntilde 16#00d1
/Ntildesmall 16#f7f1
/Nu 16#039d
/O 16#004f
/OE 16#0152
/OEsmall 16#f6fa
/Oacute 16#00d3
/Oacutesmall 16#f7f3
/Obarredcyrillic 16#04e8
/Obarreddieresiscyrillic 16#04ea
/Obreve 16#014e
/Ocaron 16#01d1
/Ocenteredtilde 16#019f
/Ocircle 16#24c4
/Ocircumflex 16#00d4
/Ocircumflexacute 16#1ed0
/Ocircumflexdotbelow 16#1ed8
/Ocircumflexgrave 16#1ed2
/Ocircumflexhookabove 16#1ed4
/Ocircumflexsmall 16#f7f4
/Ocircumflextilde 16#1ed6
/Ocyrillic 16#041e
/Odblacute 16#0150
/Odblgrave 16#020c
/Odieresis 16#00d6
/Odieresiscyrillic 16#04e6
/Odieresissmall 16#f7f6
/Odotbelow 16#1ecc
/Ogoneksmall 16#f6fb
/Ograve 16#00d2
/Ogravesmall 16#f7f2
/Oharmenian 16#0555
/Ohm 16#2126
/Ohookabove 16#1ece
/Ohorn 16#01a0
/Ohornacute 16#1eda
/Ohorndotbelow 16#1ee2
/Ohorngrave 16#1edc
/Ohornhookabove 16#1ede
/Ohorntilde 16#1ee0
/Ohungarumlaut 16#0150
/Oi 16#01a2
/Oinvertedbreve 16#020e
/Omacron 16#014c
/Omacronacute 16#1e52
/Omacrongrave 16#1e50
/Omega 16#2126
/Omegacyrillic 16#0460
/Omegagreek 16#03a9
/Omegaroundcyrillic 16#047a
/Omegatitlocyrillic 16#047c
/Omegatonos 16#038f
/Omicron 16#039f
/Omicrontonos 16#038c
/Omonospace 16#ff2f
/Oneroman 16#2160
/Oogonek 16#01ea
/Oogonekmacron 16#01ec
/Oopen 16#0186
/Oslash 16#00d8
/Oslashacute 16#01fe
/Oslashsmall 16#f7f8
/Osmall 16#f76f
/Ostrokeacute 16#01fe
/Otcyrillic 16#047e
/Otilde 16#00d5
/Otildeacute 16#1e4c
/Otildedieresis 16#1e4e
/Otildesmall 16#f7f5
/P 16#0050
/Pacute 16#1e54
/Pcircle 16#24c5
/Pdotaccent 16#1e56
/Pecyrillic 16#041f
/Peharmenian 16#054a
/Pemiddlehookcyrillic 16#04a6
/Phi 16#03a6
/Phook 16#01a4
/Pi 16#03a0
/Piwrarmenian 16#0553
/Pmonospace 16#ff30
/Psi 16#03a8
/Psicyrillic 16#0470
/Psmall 16#f770
/Q 16#0051
/Qcircle 16#24c6
/Qmonospace 16#ff31
/Qsmall 16#f771
/R 16#0052
/Raarmenian 16#054c
/Racute 16#0154
/Rcaron 16#0158
/Rcedilla 16#0156
/Rcircle 16#24c7
/Rcommaaccent 16#0156
/Rdblgrave 16#0210
/Rdotaccent 16#1e58
/Rdotbelow 16#1e5a
/Rdotbelowmacron 16#1e5c
/Reharmenian 16#0550
/Rfraktur 16#211c
/Rho 16#03a1
/Ringsmall 16#f6fc
/Rinvertedbreve 16#0212
/Rlinebelow 16#1e5e
/Rmonospace 16#ff32
/Rsmall 16#f772
/Rsmallinverted 16#0281
/Rsmallinvertedsuperior 16#02b6
/S 16#0053
/SF010000 16#250c
/SF020000 16#2514
/SF030000 16#2510
/SF040000 16#2518
/SF050000 16#253c
/SF060000 16#252c
/SF070000 16#2534
/SF080000 16#251c
/SF090000 16#2524
/SF100000 16#2500
/SF110000 16#2502
/SF190000 16#2561
/SF200000 16#2562
/SF210000 16#2556
/SF220000 16#2555
/SF230000 16#2563
/SF240000 16#2551
/SF250000 16#2557
/SF260000 16#255d
/SF270000 16#255c
/SF280000 16#255b
/SF360000 16#255e
/SF370000 16#255f
/SF380000 16#255a
/SF390000 16#2554
/SF400000 16#2569
/SF410000 16#2566
/SF420000 16#2560
/SF430000 16#2550
/SF440000 16#256c
/SF450000 16#2567
/SF460000 16#2568
/SF470000 16#2564
/SF480000 16#2565
/SF490000 16#2559
/SF500000 16#2558
/SF510000 16#2552
/SF520000 16#2553
/SF530000 16#256b
/SF540000 16#256a
/Sacute 16#015a
/Sacutedotaccent 16#1e64
/Sampigreek 16#03e0
/Scaron 16#0160
/Scarondotaccent 16#1e66
/Scaronsmall 16#f6fd
/Scedilla 16#015e
/Schwa 16#018f
/Schwacyrillic 16#04d8
/Schwadieresiscyrillic 16#04da
/Scircle 16#24c8
/Scircumflex 16#015c
/Scommaaccent 16#0218
/Sdotaccent 16#1e60
/Sdotbelow 16#1e62
/Sdotbelowdotaccent 16#1e68
/Seharmenian 16#054d
/Sevenroman 16#2166
/Shaarmenian 16#0547
/Shacyrillic 16#0428
/Shchacyrillic 16#0429
/Sheicoptic 16#03e2
/Shhacyrillic 16#04ba
/Shimacoptic 16#03ec
/Sigma 16#03a3
/Sixroman 16#2165
/Smonospace 16#ff33
/Softsigncyrillic 16#042c
/Ssmall 16#f773
/Stigmagreek 16#03da
/T 16#0054
/Tau 16#03a4
/Tbar 16#0166
/Tcaron 16#0164
/Tcedilla 16#0162
/Tcircle 16#24c9
/Tcircumflexbelow 16#1e70
/Tcommaaccent 16#0162
/Tdotaccent 16#1e6a
/Tdotbelow 16#1e6c
/Tecyrillic 16#0422
/Tedescendercyrillic 16#04ac
/Tenroman 16#2169
/Tetsecyrillic 16#04b4
/Theta 16#0398
/Thook 16#01ac
/Thorn 16#00de
/Thornsmall 16#f7fe
/Threeroman 16#2162
/Tildesmall 16#f6fe
/Tiwnarmenian 16#054f
/Tlinebelow 16#1e6e
/Tmonospace 16#ff34
/Toarmenian 16#0539
/Tonefive 16#01bc
/Tonesix 16#0184
/Tonetwo 16#01a7
/Tretroflexhook 16#01ae
/Tsecyrillic 16#0426
/Tshecyrillic 16#040b
/Tsmall 16#f774
/Twelveroman 16#216b
/Tworoman 16#2161
/U 16#0055
/Uacute 16#00da
/Uacutesmall 16#f7fa
/Ubreve 16#016c
/Ucaron 16#01d3
/Ucircle 16#24ca
/Ucircumflex 16#00db
/Ucircumflexbelow 16#1e76
/Ucircumflexsmall 16#f7fb
/Ucyrillic 16#0423
/Udblacute 16#0170
/Udblgrave 16#0214
/Udieresis 16#00dc
/Udieresisacute 16#01d7
/Udieresisbelow 16#1e72
/Udieresiscaron 16#01d9
/Udieresiscyrillic 16#04f0
/Udieresisgrave 16#01db
/Udieresismacron 16#01d5
/Udieresissmall 16#f7fc
/Udotbelow 16#1ee4
/Ugrave 16#00d9
/Ugravesmall 16#f7f9
/Uhookabove 16#1ee6
/Uhorn 16#01af
/Uhornacute 16#1ee8
/Uhorndotbelow 16#1ef0
/Uhorngrave 16#1eea
/Uhornhookabove 16#1eec
/Uhorntilde 16#1eee
/Uhungarumlaut 16#0170
/Uhungarumlautcyrillic 16#04f2
/Uinvertedbreve 16#0216
/Ukcyrillic 16#0478
/Umacron 16#016a
/Umacroncyrillic 16#04ee
/Umacrondieresis 16#1e7a
/Umonospace 16#ff35
/Uogonek 16#0172
/Upsilon 16#03a5
/Upsilon1 16#03d2
/Upsilonacutehooksymbolgreek 16#03d3
/Upsilonafrican 16#01b1
/Upsilondieresis 16#03ab
/Upsilondieresishooksymbolgreek 16#03d4
/Upsilonhooksymbol 16#03d2
/Upsilontonos 16#038e
/Uring 16#016e
/Ushortcyrillic 16#040e
/Usmall 16#f775
/Ustraightcyrillic 16#04ae
/Ustraightstrokecyrillic 16#04b0
/Utilde 16#0168
/Utildeacute 16#1e78
/Utildebelow 16#1e74
/V 16#0056
/Vcircle 16#24cb
/Vdotbelow 16#1e7e
/Vecyrillic 16#0412
/Vewarmenian 16#054e
/Vhook 16#01b2
/Vmonospace 16#ff36
/Voarmenian 16#0548
/Vsmall 16#f776
/Vtilde 16#1e7c
/W 16#0057
/Wacute 16#1e82
/Wcircle 16#24cc
/Wcircumflex 16#0174
/Wdieresis 16#1e84
/Wdotaccent 16#1e86
/Wdotbelow 16#1e88
/Wgrave 16#1e80
/Wmonospace 16#ff37
/Wsmall 16#f777
/X 16#0058
/Xcircle 16#24cd
/Xdieresis 16#1e8c
/Xdotaccent 16#1e8a
/Xeharmenian 16#053d
/Xi 16#039e
/Xmonospace 16#ff38
/Xsmall 16#f778
/Y 16#0059
/Yacute 16#00dd
/Yacutesmall 16#f7fd
/Yatcyrillic 16#0462
/Ycircle 16#24ce
/Ycircumflex 16#0176
/Ydieresis 16#0178
/Ydieresissmall 16#f7ff
/Ydotaccent 16#1e8e
/Ydotbelow 16#1ef4
/Yericyrillic 16#042b
/Yerudieresiscyrillic 16#04f8
/Ygrave 16#1ef2
/Yhook 16#01b3
/Yhookabove 16#1ef6
/Yiarmenian 16#0545
/Yicyrillic 16#0407
/Yiwnarmenian 16#0552
/Ymonospace 16#ff39
/Ysmall 16#f779
/Ytilde 16#1ef8
/Yusbigcyrillic 16#046a
/Yusbigiotifiedcyrillic 16#046c
/Yuslittlecyrillic 16#0466
/Yuslittleiotifiedcyrillic 16#0468
/Z 16#005a
/Zaarmenian 16#0536
/Zacute 16#0179
/Zcaron 16#017d
/Zcaronsmall 16#f6ff
/Zcircle 16#24cf
/Zcircumflex 16#1e90
/Zdot 16#017b
/Zdotaccent 16#017b
/Zdotbelow 16#1e92
/Zecyrillic 16#0417
/Zedescendercyrillic 16#0498
/Zedieresiscyrillic 16#04de
/Zeta 16#0396
/Zhearmenian 16#053a
/Zhebrevecyrillic 16#04c1
/Zhecyrillic 16#0416
/Zhedescendercyrillic 16#0496
/Zhedieresiscyrillic 16#04dc
/Zlinebelow 16#1e94
/Zmonospace 16#ff3a
/Zsmall 16#f77a
/Zstroke 16#01b5
/a 16#0061
/aabengali 16#0986
/aacute 16#00e1
/aadeva 16#0906
/aagujarati 16#0a86
/aagurmukhi 16#0a06
/aamatragurmukhi 16#0a3e
/aarusquare 16#3303
/aavowelsignbengali 16#09be
/aavowelsigndeva 16#093e
/aavowelsigngujarati 16#0abe
/abbreviationmarkarmenian 16#055f
/abbreviationsigndeva 16#0970
/abengali 16#0985
/abopomofo 16#311a
/abreve 16#0103
/abreveacute 16#1eaf
/abrevecyrillic 16#04d1
/abrevedotbelow 16#1eb7
/abrevegrave 16#1eb1
/abrevehookabove 16#1eb3
/abrevetilde 16#1eb5
/acaron 16#01ce
/acircle 16#24d0
/acircumflex 16#00e2
/acircumflexacute 16#1ea5
/acircumflexdotbelow 16#1ead
/acircumflexgrave 16#1ea7
/acircumflexhookabove 16#1ea9
/acircumflextilde 16#1eab
/acute 16#00b4
/acutebelowcmb 16#0317
/acutecmb 16#0301
/acutecomb 16#0301
/acutedeva 16#0954
/acutelowmod 16#02cf
/acutetonecmb 16#0341
/acyrillic 16#0430
/adblgrave 16#0201
/addakgurmukhi 16#0a71
/adeva 16#0905
/adieresis 16#00e4
/adieresiscyrillic 16#04d3
/adieresismacron 16#01df
/adotbelow 16#1ea1
/adotmacron 16#01e1
/ae 16#00e6
/aeacute 16#01fd
/aekorean 16#3150
/aemacron 16#01e3
/afii00208 16#2015
/afii08941 16#20a4
/afii10017 16#0410
/afii10018 16#0411
/afii10019 16#0412
/afii10020 16#0413
/afii10021 16#0414
/afii10022 16#0415
/afii10023 16#0401
/afii10024 16#0416
/afii10025 16#0417
/afii10026 16#0418
/afii10027 16#0419
/afii10028 16#041a
/afii10029 16#041b
/afii10030 16#041c
/afii10031 16#041d
/afii10032 16#041e
/afii10033 16#041f
/afii10034 16#0420
/afii10035 16#0421
/afii10036 16#0422
/afii10037 16#0423
/afii10038 16#0424
/afii10039 16#0425
/afii10040 16#0426
/afii10041 16#0427
/afii10042 16#0428
/afii10043 16#0429
/afii10044 16#042a
/afii10045 16#042b
/afii10046 16#042c
/afii10047 16#042d
/afii10048 16#042e
/afii10049 16#042f
/afii10050 16#0490
/afii10051 16#0402
/afii10052 16#0403
/afii10053 16#0404
/afii10054 16#0405
/afii10055 16#0406
/afii10056 16#0407
/afii10057 16#0408
/afii10058 16#0409
/afii10059 16#040a
/afii10060 16#040b
/afii10061 16#040c
/afii10062 16#040e
/afii10063 16#f6c4
/afii10064 16#f6c5
/afii10065 16#0430
/afii10066 16#0431
/afii10067 16#0432
/afii10068 16#0433
/afii10069 16#0434
/afii10070 16#0435
/afii10071 16#0451
/afii10072 16#0436
/afii10073 16#0437
/afii10074 16#0438
/afii10075 16#0439
/afii10076 16#043a
/afii10077 16#043b
/afii10078 16#043c
/afii10079 16#043d
/afii10080 16#043e
/afii10081 16#043f
/afii10082 16#0440
/afii10083 16#0441
/afii10084 16#0442
/afii10085 16#0443
/afii10086 16#0444
/afii10087 16#0445
/afii10088 16#0446
/afii10089 16#0447
/afii10090 16#0448
/afii10091 16#0449
/afii10092 16#044a
/afii10093 16#044b
/afii10094 16#044c
/afii10095 16#044d
/afii10096 16#044e
/afii10097 16#044f
/afii10098 16#0491
/afii10099 16#0452
/afii10100 16#0453
/afii10101 16#0454
/afii10102 16#0455
/afii10103 16#0456
/afii10104 16#0457
/afii10105 16#0458
/afii10106 16#0459
/afii10107 16#045a
/afii10108 16#045b
/afii10109 16#045c
/afii10110 16#045e
/afii10145 16#040f
/afii10146 16#0462
/afii10147 16#0472
/afii10148 16#0474
/afii10192 16#f6c6
/afii10193 16#045f
/afii10194 16#0463
/afii10195 16#0473
/afii10196 16#0475
/afii10831 16#f6c7
/afii10832 16#f6c8
/afii10846 16#04d9
/afii299 16#200e
/afii300 16#200f
/afii301 16#200d
/afii57381 16#066a
/afii57388 16#060c
/afii57392 16#0660
/afii57393 16#0661
/afii57394 16#0662
/afii57395 16#0663
/afii57396 16#0664
/afii57397 16#0665
/afii57398 16#0666
/afii57399 16#0667
/afii57400 16#0668
/afii57401 16#0669
/afii57403 16#061b
/afii57407 16#061f
/afii57409 16#0621
/afii57410 16#0622
/afii57411 16#0623
/afii57412 16#0624
/afii57413 16#0625
/afii57414 16#0626
/afii57415 16#0627
/afii57416 16#0628
/afii57417 16#0629
/afii57418 16#062a
/afii57419 16#062b
/afii57420 16#062c
/afii57421 16#062d
/afii57422 16#062e
/afii57423 16#062f
/afii57424 16#0630
/afii57425 16#0631
/afii57426 16#0632
/afii57427 16#0633
/afii57428 16#0634
/afii57429 16#0635
/afii57430 16#0636
/afii57431 16#0637
/afii57432 16#0638
/afii57433 16#0639
/afii57434 16#063a
/afii57440 16#0640
/afii57441 16#0641
/afii57442 16#0642
/afii57443 16#0643
/afii57444 16#0644
/afii57445 16#0645
/afii57446 16#0646
/afii57448 16#0648
/afii57449 16#0649
/afii57450 16#064a
/afii57451 16#064b
/afii57452 16#064c
/afii57453 16#064d
/afii57454 16#064e
/afii57455 16#064f
/afii57456 16#0650
/afii57457 16#0651
/afii57458 16#0652
/afii57470 16#0647
/afii57505 16#06a4
/afii57506 16#067e
/afii57507 16#0686
/afii57508 16#0698
/afii57509 16#06af
/afii57511 16#0679
/afii57512 16#0688
/afii57513 16#0691
/afii57514 16#06ba
/afii57519 16#06d2
/afii57534 16#06d5
/afii57636 16#20aa
/afii57645 16#05be
/afii57658 16#05c3
/afii57664 16#05d0
/afii57665 16#05d1
/afii57666 16#05d2
/afii57667 16#05d3
/afii57668 16#05d4
/afii57669 16#05d5
/afii57670 16#05d6
/afii57671 16#05d7
/afii57672 16#05d8
/afii57673 16#05d9
/afii57674 16#05da
/afii57675 16#05db
/afii57676 16#05dc
/afii57677 16#05dd
/afii57678 16#05de
/afii57679 16#05df
/afii57680 16#05e0
/afii57681 16#05e1
/afii57682 16#05e2
/afii57683 16#05e3
/afii57684 16#05e4
/afii57685 16#05e5
/afii57686 16#05e6
/afii57687 16#05e7
/afii57688 16#05e8
/afii57689 16#05e9
/afii57690 16#05ea
/afii57694 16#fb2a
/afii57695 16#fb2b
/afii57700 16#fb4b
/afii57705 16#fb1f
/afii57716 16#05f0
/afii57717 16#05f1
/afii57718 16#05f2
/afii57723 16#fb35
/afii57793 16#05b4
/afii57794 16#05b5
/afii57795 16#05b6
/afii57796 16#05bb
/afii57797 16#05b8
/afii57798 16#05b7
/afii57799 16#05b0
/afii57800 16#05b2
/afii57801 16#05b1
/afii57802 16#05b3
/afii57803 16#05c2
/afii57804 16#05c1
/afii57806 16#05b9
/afii57807 16#05bc
/afii57839 16#05bd
/afii57841 16#05bf
/afii57842 16#05c0
/afii57929 16#02bc
/afii61248 16#2105
/afii61289 16#2113
/afii61352 16#2116
/afii61573 16#202c
/afii61574 16#202d
/afii61575 16#202e
/afii61664 16#200c
/afii63167 16#066d
/afii64937 16#02bd
/agrave 16#00e0
/agujarati 16#0a85
/agurmukhi 16#0a05
/ahiragana 16#3042
/ahookabove 16#1ea3
/aibengali 16#0990
/aibopomofo 16#311e
/aideva 16#0910
/aiecyrillic 16#04d5
/aigujarati 16#0a90
/aigurmukhi 16#0a10
/aimatragurmukhi 16#0a48
/ainarabic 16#0639
/ainfinalarabic 16#feca
/aininitialarabic 16#fecb
/ainmedialarabic 16#fecc
/ainvertedbreve 16#0203
/aivowelsignbengali 16#09c8
/aivowelsigndeva 16#0948
/aivowelsigngujarati 16#0ac8
/akatakana 16#30a2
/akatakanahalfwidth 16#ff71
/akorean 16#314f
/alef 16#05d0
/alefarabic 16#0627
/alefdageshhebrew 16#fb30
/aleffinalarabic 16#fe8e
/alefhamzaabovearabic 16#0623
/alefhamzaabovefinalarabic 16#fe84
/alefhamzabelowarabic 16#0625
/alefhamzabelowfinalarabic 16#fe88
/alefhebrew 16#05d0
/aleflamedhebrew 16#fb4f
/alefmaddaabovearabic 16#0622
/alefmaddaabovefinalarabic 16#fe82
/alefmaksuraarabic 16#0649
/alefmaksurafinalarabic 16#fef0
/alefmaksurainitialarabic 16#fef3
/alefmaksuramedialarabic 16#fef4
/alefpatahhebrew 16#fb2e
/alefqamatshebrew 16#fb2f
/aleph 16#2135
/allequal 16#224c
/alpha 16#03b1
/alphatonos 16#03ac
/amacron 16#0101
/amonospace 16#ff41
/ampersand 16#0026
/ampersandmonospace 16#ff06
/ampersandsmall 16#f726
/amsquare 16#33c2
/anbopomofo 16#3122
/angbopomofo 16#3124
/angkhankhuthai 16#0e5a
/angle 16#2220
/anglebracketleft 16#3008
/anglebracketleftvertical 16#fe3f
/anglebracketright 16#3009
/anglebracketrightvertical 16#fe40
/angleleft 16#2329
/angleright 16#232a
/angstrom 16#212b
/anoteleia 16#0387
/anudattadeva 16#0952
/anusvarabengali 16#0982
/anusvaradeva 16#0902
/anusvaragujarati 16#0a82
/aogonek 16#0105
/apaatosquare 16#3300
/aparen 16#249c
/apostrophearmenian 16#055a
/apostrophemod 16#02bc
/apple 16#f8ff
/approaches 16#2250
/approxequal 16#2248
/approxequalorimage 16#2252
/approximatelyequal 16#2245
/araeaekorean 16#318e
/araeakorean 16#318d
/arc 16#2312
/arighthalfring 16#1e9a
/aring 16#00e5
/aringacute 16#01fb
/aringbelow 16#1e01
/arrowboth 16#2194
/arrowdashdown 16#21e3
/arrowdashleft 16#21e0
/arrowdashright 16#21e2
/arrowdashup 16#21e1
/arrowdblboth 16#21d4
/arrowdbldown 16#21d3
/arrowdblleft 16#21d0
/arrowdblright 16#21d2
/arrowdblup 16#21d1
/arrowdown 16#2193
/arrowdownleft 16#2199
/arrowdownright 16#2198
/arrowdownwhite 16#21e9
/arrowheaddownmod 16#02c5
/arrowheadleftmod 16#02c2
/arrowheadrightmod 16#02c3
/arrowheadupmod 16#02c4
/arrowhorizex 16#f8e7
/arrowleft 16#2190
/arrowleftdbl 16#21d0
/arrowleftdblstroke 16#21cd
/arrowleftoverright 16#21c6
/arrowleftwhite 16#21e6
/arrowright 16#2192
/arrowrightdblstroke 16#21cf
/arrowrightheavy 16#279e
/arrowrightoverleft 16#21c4
/arrowrightwhite 16#21e8
/arrowtableft 16#21e4
/arrowtabright 16#21e5
/arrowup 16#2191
/arrowupdn 16#2195
/arrowupdnbse 16#21a8
/arrowupdownbase 16#21a8
/arrowupleft 16#2196
/arrowupleftofdown 16#21c5
/arrowupright 16#2197
/arrowupwhite 16#21e7
/arrowvertex 16#f8e6
/asciicircum 16#005e
/asciicircummonospace 16#ff3e
/asciitilde 16#007e
/asciitildemonospace 16#ff5e
/ascript 16#0251
/ascriptturned 16#0252
/asmallhiragana 16#3041
/asmallkatakana 16#30a1
/asmallkatakanahalfwidth 16#ff67
/asterisk 16#002a
/asteriskaltonearabic 16#066d
/asteriskarabic 16#066d
/asteriskmath 16#2217
/asteriskmonospace 16#ff0a
/asterisksmall 16#fe61
/asterism 16#2042
/asuperior 16#f6e9
/asymptoticallyequal 16#2243
/at 16#0040
/atilde 16#00e3
/atmonospace 16#ff20
/atsmall 16#fe6b
/aturned 16#0250
/aubengali 16#0994
/aubopomofo 16#3120
/audeva 16#0914
/augujarati 16#0a94
/augurmukhi 16#0a14
/aulengthmarkbengali 16#09d7
/aumatragurmukhi 16#0a4c
/auvowelsignbengali 16#09cc
/auvowelsigndeva 16#094c
/auvowelsigngujarati 16#0acc
/avagrahadeva 16#093d
/aybarmenian 16#0561
/ayin 16#05e2
/ayinaltonehebrew 16#fb20
/ayinhebrew 16#05e2
/b 16#0062
/babengali 16#09ac
/backslash 16#005c
/backslashmonospace 16#ff3c
/badeva 16#092c
/bagujarati 16#0aac
/bagurmukhi 16#0a2c
/bahiragana 16#3070
/bahtthai 16#0e3f
/bakatakana 16#30d0
/bar 16#007c
/barmonospace 16#ff5c
/bbopomofo 16#3105
/bcircle 16#24d1
/bdotaccent 16#1e03
/bdotbelow 16#1e05
/beamedsixteenthnotes 16#266c
/because 16#2235
/becyrillic 16#0431
/beharabic 16#0628
/behfinalarabic 16#fe90
/behinitialarabic 16#fe91
/behiragana 16#3079
/behmedialarabic 16#fe92
/behmeeminitialarabic 16#fc9f
/behmeemisolatedarabic 16#fc08
/behnoonfinalarabic 16#fc6d
/bekatakana 16#30d9
/benarmenian 16#0562
/bet 16#05d1
/beta 16#03b2
/betasymbolgreek 16#03d0
/betdagesh 16#fb31
/betdageshhebrew 16#fb31
/bethebrew 16#05d1
/betrafehebrew 16#fb4c
/bhabengali 16#09ad
/bhadeva 16#092d
/bhagujarati 16#0aad
/bhagurmukhi 16#0a2d
/bhook 16#0253
/bihiragana 16#3073
/bikatakana 16#30d3
/bilabialclick 16#0298
/bindigurmukhi 16#0a02
/birusquare 16#3331
/blackcircle 16#25cf
/blackdiamond 16#25c6
/blackdownpointingtriangle 16#25bc
/blackleftpointingpointer 16#25c4
/blackleftpointingtriangle 16#25c0
/blacklenticularbracketleft 16#3010
/blacklenticularbracketleftvertical 16#fe3b
/blacklenticularbracketright 16#3011
/blacklenticularbracketrightvertical 16#fe3c
/blacklowerlefttriangle 16#25e3
/blacklowerrighttriangle 16#25e2
/blackrectangle 16#25ac
/blackrightpointingpointer 16#25ba
/blackrightpointingtriangle 16#25b6
/blacksmallsquare 16#25aa
/blacksmilingface 16#263b
/blacksquare 16#25a0
/blackstar 16#2605
/blackupperlefttriangle 16#25e4
/blackupperrighttriangle 16#25e5
/blackuppointingsmalltriangle 16#25b4
/blackuppointingtriangle 16#25b2
/blank 16#2423
/blinebelow 16#1e07
/block 16#2588
/bmonospace 16#ff42
/bobaimaithai 16#0e1a
/bohiragana 16#307c
/bokatakana 16#30dc
/bparen 16#249d
/bqsquare 16#33c3
/braceex 16#f8f4
/braceleft 16#007b
/braceleftbt 16#f8f3
/braceleftmid 16#f8f2
/braceleftmonospace 16#ff5b
/braceleftsmall 16#fe5b
/bracelefttp 16#f8f1
/braceleftvertical 16#fe37
/braceright 16#007d
/bracerightbt 16#f8fe
/bracerightmid 16#f8fd
/bracerightmonospace 16#ff5d
/bracerightsmall 16#fe5c
/bracerighttp 16#f8fc
/bracerightvertical 16#fe38
/bracketleft 16#005b
/bracketleftbt 16#f8f0
/bracketleftex 16#f8ef
/bracketleftmonospace 16#ff3b
/bracketlefttp 16#f8ee
/bracketright 16#005d
/bracketrightbt 16#f8fb
/bracketrightex 16#f8fa
/bracketrightmonospace 16#ff3d
/bracketrighttp 16#f8f9
/breve 16#02d8
/brevebelowcmb 16#032e
/brevecmb 16#0306
/breveinvertedbelowcmb 16#032f
/breveinvertedcmb 16#0311
/breveinverteddoublecmb 16#0361
/bridgebelowcmb 16#032a
/bridgeinvertedbelowcmb 16#033a
/brokenbar 16#00a6
/bstroke 16#0180
/bsuperior 16#f6ea
/btopbar 16#0183
/buhiragana 16#3076
/bukatakana 16#30d6
/bullet 16#2022
/bulletinverse 16#25d8
/bulletoperator 16#2219
/bullseye 16#25ce
/c 16#0063
/caarmenian 16#056e
/cabengali 16#099a
/cacute 16#0107
/cadeva 16#091a
/cagujarati 16#0a9a
/cagurmukhi 16#0a1a
/calsquare 16#3388
/candrabindubengali 16#0981
/candrabinducmb 16#0310
/candrabindudeva 16#0901
/candrabindugujarati 16#0a81
/capslock 16#21ea
/careof 16#2105
/caron 16#02c7
/caronbelowcmb 16#032c
/caroncmb 16#030c
/carriagereturn 16#21b5
/cbopomofo 16#3118
/ccaron 16#010d
/ccedilla 16#00e7
/ccedillaacute 16#1e09
/ccircle 16#24d2
/ccircumflex 16#0109
/ccurl 16#0255
/cdot 16#010b
/cdotaccent 16#010b
/cdsquare 16#33c5
/cedilla 16#00b8
/cedillacmb 16#0327
/cent 16#00a2
/centigrade 16#2103
/centinferior 16#f6df
/centmonospace 16#ffe0
/centoldstyle 16#f7a2
/centsuperior 16#f6e0
/chaarmenian 16#0579
/chabengali 16#099b
/chadeva 16#091b
/chagujarati 16#0a9b
/chagurmukhi 16#0a1b
/chbopomofo 16#3114
/cheabkhasiancyrillic 16#04bd
/checkmark 16#2713
/checyrillic 16#0447
/chedescenderabkhasiancyrillic 16#04bf
/chedescendercyrillic 16#04b7
/chedieresiscyrillic 16#04f5
/cheharmenian 16#0573
/chekhakassiancyrillic 16#04cc
/cheverticalstrokecyrillic 16#04b9
/chi 16#03c7
/chieuchacirclekorean 16#3277
/chieuchaparenkorean 16#3217
/chieuchcirclekorean 16#3269
/chieuchkorean 16#314a
/chieuchparenkorean 16#3209
/chochangthai 16#0e0a
/chochanthai 16#0e08
/chochingthai 16#0e09
/chochoethai 16#0e0c
/chook 16#0188
/cieucacirclekorean 16#3276
/cieucaparenkorean 16#3216
/cieuccirclekorean 16#3268
/cieuckorean 16#3148
/cieucparenkorean 16#3208
/cieucuparenkorean 16#321c
/circle 16#25cb
/circlemultiply 16#2297
/circleot 16#2299
/circleplus 16#2295
/circlepostalmark 16#3036
/circlewithlefthalfblack 16#25d0
/circlewithrighthalfblack 16#25d1
/circumflex 16#02c6
/circumflexbelowcmb 16#032d
/circumflexcmb 16#0302
/clear 16#2327
/clickalveolar 16#01c2
/clickdental 16#01c0
/clicklateral 16#01c1
/clickretroflex 16#01c3
/club 16#2663
/clubsuitblack 16#2663
/clubsuitwhite 16#2667
/cmcubedsquare 16#33a4
/cmonospace 16#ff43
/cmsquaredsquare 16#33a0
/coarmenian 16#0581
/colon 16#003a
/colonmonetary 16#20a1
/colonmonospace 16#ff1a
/colonsign 16#20a1
/colonsmall 16#fe55
/colontriangularhalfmod 16#02d1
/colontriangularmod 16#02d0
/comma 16#002c
/commaabovecmb 16#0313
/commaaboverightcmb 16#0315
/commaaccent 16#f6c3
/commaarabic 16#060c
/commaarmenian 16#055d
/commainferior 16#f6e1
/commamonospace 16#ff0c
/commareversedabovecmb 16#0314
/commareversedmod 16#02bd
/commasmall 16#fe50
/commasuperior 16#f6e2
/commaturnedabovecmb 16#0312
/commaturnedmod 16#02bb
/compass 16#263c
/congruent 16#2245
/contourintegral 16#222e
/control 16#2303
/controlACK 16#0006
/controlBEL 16#0007
/controlBS 16#0008
/controlCAN 16#0018
/controlCR 16#000d
/controlDC1 16#0011
/controlDC2 16#0012
/controlDC3 16#0013
/controlDC4 16#0014
/controlDEL 16#007f
/controlDLE 16#0010
/controlEM 16#0019
/controlENQ 16#0005
/controlEOT 16#0004
/controlESC 16#001b
/controlETB 16#0017
/controlETX 16#0003
/controlFF 16#000c
/controlFS 16#001c
/controlGS 16#001d
/controlHT 16#0009
/controlLF 16#000a
/controlNAK 16#0015
/controlRS 16#001e
/controlSI 16#000f
/controlSO 16#000e
/controlSOT 16#0002
/controlSTX 16#0001
/controlSUB 16#001a
/controlSYN 16#0016
/controlUS 16#001f
/controlVT 16#000b
/copyright 16#00a9
/copyrightsans 16#f8e9
/copyrightserif 16#f6d9
/cornerbracketleft 16#300c
/cornerbracketlefthalfwidth 16#ff62
/cornerbracketleftvertical 16#fe41
/cornerbracketright 16#300d
/cornerbracketrighthalfwidth 16#ff63
/cornerbracketrightvertical 16#fe42
/corporationsquare 16#337f
/cosquare 16#33c7
/coverkgsquare 16#33c6
/cparen 16#249e
/cruzeiro 16#20a2
/cstretched 16#0297
/curlyand 16#22cf
/curlyor 16#22ce
/currency 16#00a4
/cyrBreve 16#f6d1
/cyrFlex 16#f6d2
/cyrbreve 16#f6d4
/cyrflex 16#f6d5
/d 16#0064
/daarmenian 16#0564
/dabengali 16#09a6
/dadarabic 16#0636
/dadeva 16#0926
/dadfinalarabic 16#febe
/dadinitialarabic 16#febf
/dadmedialarabic 16#fec0
/dagesh 16#05bc
/dageshhebrew 16#05bc
/dagger 16#2020
/daggerdbl 16#2021
/dagujarati 16#0aa6
/dagurmukhi 16#0a26
/dahiragana 16#3060
/dakatakana 16#30c0
/dalarabic 16#062f
/dalet 16#05d3
/daletdagesh 16#fb33
/daletdageshhebrew 16#fb33
/dalethebrew 16#05d3
/dalfinalarabic 16#feaa
/dammaarabic 16#064f
/dammalowarabic 16#064f
/dammatanaltonearabic 16#064c
/dammatanarabic 16#064c
/danda 16#0964
/dargahebrew 16#05a7
/dargalefthebrew 16#05a7
/dasiapneumatacyrilliccmb 16#0485
/dblGrave 16#f6d3
/dblanglebracketleft 16#300a
/dblanglebracketleftvertical 16#fe3d
/dblanglebracketright 16#300b
/dblanglebracketrightvertical 16#fe3e
/dblarchinvertedbelowcmb 16#032b
/dblarrowleft 16#21d4
/dblarrowright 16#21d2
/dbldanda 16#0965
/dblgrave 16#f6d6
/dblgravecmb 16#030f
/dblintegral 16#222c
/dbllowline 16#2017
/dbllowlinecmb 16#0333
/dbloverlinecmb 16#033f
/dblprimemod 16#02ba
/dblverticalbar 16#2016
/dblverticallineabovecmb 16#030e
/dbopomofo 16#3109
/dbsquare 16#33c8
/dcaron 16#010f
/dcedilla 16#1e11
/dcircle 16#24d3
/dcircumflexbelow 16#1e13
/dcroat 16#0111
/ddabengali 16#09a1
/ddadeva 16#0921
/ddagujarati 16#0aa1
/ddagurmukhi 16#0a21
/ddalarabic 16#0688
/ddalfinalarabic 16#fb89
/dddhadeva 16#095c
/ddhabengali 16#09a2
/ddhadeva 16#0922
/ddhagujarati 16#0aa2
/ddhagurmukhi 16#0a22
/ddotaccent 16#1e0b
/ddotbelow 16#1e0d
/decimalseparatorarabic 16#066b
/decimalseparatorpersian 16#066b
/decyrillic 16#0434
/degree 16#00b0
/dehihebrew 16#05ad
/dehiragana 16#3067
/deicoptic 16#03ef
/dekatakana 16#30c7
/deleteleft 16#232b
/deleteright 16#2326
/delta 16#03b4
/deltaturned 16#018d
/denominatorminusonenumeratorbengali 16#09f8
/dezh 16#02a4
/dhabengali 16#09a7
/dhadeva 16#0927
/dhagujarati 16#0aa7
/dhagurmukhi 16#0a27
/dhook 16#0257
/dialytikatonos 16#0385
/dialytikatonoscmb 16#0344
/diamond 16#2666
/diamondsuitwhite 16#2662
/dieresis 16#00a8
/dieresisacute 16#f6d7
/dieresisbelowcmb 16#0324
/dieresiscmb 16#0308
/dieresisgrave 16#f6d8
/dieresistonos 16#0385
/dihiragana 16#3062
/dikatakana 16#30c2
/dittomark 16#3003
/divide 16#00f7
/divides 16#2223
/divisionslash 16#2215
/djecyrillic 16#0452
/dkshade 16#2593
/dlinebelow 16#1e0f
/dlsquare 16#3397
/dmacron 16#0111
/dmonospace 16#ff44
/dnblock 16#2584
/dochadathai 16#0e0e
/dodekthai 16#0e14
/dohiragana 16#3069
/dokatakana 16#30c9
/dollar 16#0024
/dollarinferior 16#f6e3
/dollarmonospace 16#ff04
/dollaroldstyle 16#f724
/dollarsmall 16#fe69
/dollarsuperior 16#f6e4
/dong 16#20ab
/dorusquare 16#3326
/dotaccent 16#02d9
/dotaccentcmb 16#0307
/dotbelowcmb 16#0323
/dotbelowcomb 16#0323
/dotkatakana 16#30fb
/dotlessi 16#0131
/dotlessj 16#f6be
/dotlessjstrokehook 16#0284
/dotmath 16#22c5
/dottedcircle 16#25cc
/doubleyodpatah 16#fb1f
/doubleyodpatahhebrew 16#fb1f
/downtackbelowcmb 16#031e
/downtackmod 16#02d5
/dparen 16#249f
/dsuperior 16#f6eb
/dtail 16#0256
/dtopbar 16#018c
/duhiragana 16#3065
/dukatakana 16#30c5
/dz 16#01f3
/dzaltone 16#02a3
/dzcaron 16#01c6
/dzcurl 16#02a5
/dzeabkhasiancyrillic 16#04e1
/dzecyrillic 16#0455
/dzhecyrillic 16#045f
/e 16#0065
/eacute 16#00e9
/earth 16#2641
/ebengali 16#098f
/ebopomofo 16#311c
/ebreve 16#0115
/ecandradeva 16#090d
/ecandragujarati 16#0a8d
/ecandravowelsigndeva 16#0945
/ecandravowelsigngujarati 16#0ac5
/ecaron 16#011b
/ecedillabreve 16#1e1d
/echarmenian 16#0565
/echyiwnarmenian 16#0587
/ecircle 16#24d4
/ecircumflex 16#00ea
/ecircumflexacute 16#1ebf
/ecircumflexbelow 16#1e19
/ecircumflexdotbelow 16#1ec7
/ecircumflexgrave 16#1ec1
/ecircumflexhookabove 16#1ec3
/ecircumflextilde 16#1ec5
/ecyrillic 16#0454
/edblgrave 16#0205
/edeva 16#090f
/edieresis 16#00eb
/edot 16#0117
/edotaccent 16#0117
/edotbelow 16#1eb9
/eegurmukhi 16#0a0f
/eematragurmukhi 16#0a47
/efcyrillic 16#0444
/egrave 16#00e8
/egujarati 16#0a8f
/eharmenian 16#0567
/ehbopomofo 16#311d
/ehiragana 16#3048
/ehookabove 16#1ebb
/eibopomofo 16#311f
/eight 16#0038
/eightarabic 16#0668
/eightbengali 16#09ee
/eightcircle 16#2467
/eightcircleinversesansserif 16#2791
/eightdeva 16#096e
/eighteencircle 16#2471
/eighteenparen 16#2485
/eighteenperiod 16#2499
/eightgujarati 16#0aee
/eightgurmukhi 16#0a6e
/eighthackarabic 16#0668
/eighthangzhou 16#3028
/eighthnotebeamed 16#266b
/eightideographicparen 16#3227
/eightinferior 16#2088
/eightmonospace 16#ff18
/eightoldstyle 16#f738
/eightparen 16#247b
/eightperiod 16#248f
/eightpersian 16#06f8
/eightroman 16#2177
/eightsuperior 16#2078
/eightthai 16#0e58
/einvertedbreve 16#0207
/eiotifiedcyrillic 16#0465
/ekatakana 16#30a8
/ekatakanahalfwidth 16#ff74
/ekonkargurmukhi 16#0a74
/ekorean 16#3154
/elcyrillic 16#043b
/element 16#2208
/elevencircle 16#246a
/elevenparen 16#247e
/elevenperiod 16#2492
/elevenroman 16#217a
/ellipsis 16#2026
/ellipsisvertical 16#22ee
/emacron 16#0113
/emacronacute 16#1e17
/emacrongrave 16#1e15
/emcyrillic 16#043c
/emdash 16#2014
/emdashvertical 16#fe31
/emonospace 16#ff45
/emphasismarkarmenian 16#055b
/emptyset 16#2205
/enbopomofo 16#3123
/encyrillic 16#043d
/endash 16#2013
/endashvertical 16#fe32
/endescendercyrillic 16#04a3
/eng 16#014b
/engbopomofo 16#3125
/enghecyrillic 16#04a5
/enhookcyrillic 16#04c8
/enspace 16#2002
/eogonek 16#0119
/eokorean 16#3153
/eopen 16#025b
/eopenclosed 16#029a
/eopenreversed 16#025c
/eopenreversedclosed 16#025e
/eopenreversedhook 16#025d
/eparen 16#24a0
/epsilon 16#03b5
/epsilontonos 16#03ad
/equal 16#003d
/equalmonospace 16#ff1d
/equalsmall 16#fe66
/equalsuperior 16#207c
/equivalence 16#2261
/erbopomofo 16#3126
/ercyrillic 16#0440
/ereversed 16#0258
/ereversedcyrillic 16#044d
/escyrillic 16#0441
/esdescendercyrillic 16#04ab
/esh 16#0283
/eshcurl 16#0286
/eshortdeva 16#090e
/eshortvowelsigndeva 16#0946
/eshreversedloop 16#01aa
/eshsquatreversed 16#0285
/esmallhiragana 16#3047
/esmallkatakana 16#30a7
/esmallkatakanahalfwidth 16#ff6a
/estimated 16#212e
/esuperior 16#f6ec
/eta 16#03b7
/etarmenian 16#0568
/etatonos 16#03ae
/eth 16#00f0
/etilde 16#1ebd
/etildebelow 16#1e1b
/etnahtafoukhhebrew 16#0591
/etnahtafoukhlefthebrew 16#0591
/etnahtahebrew 16#0591
/etnahtalefthebrew 16#0591
/eturned 16#01dd
/eukorean 16#3161
/euro 16#20ac
/evowelsignbengali 16#09c7
/evowelsigndeva 16#0947
/evowelsigngujarati 16#0ac7
/exclam 16#0021
/exclamarmenian 16#055c
/exclamdbl 16#203c
/exclamdown 16#00a1
/exclamdownsmall 16#f7a1
/exclammonospace 16#ff01
/exclamsmall 16#f721
/existential 16#2203
/ezh 16#0292
/ezhcaron 16#01ef
/ezhcurl 16#0293
/ezhreversed 16#01b9
/ezhtail 16#01ba
/f 16#0066
/fadeva 16#095e
/fagurmukhi 16#0a5e
/fahrenheit 16#2109
/fathaarabic 16#064e
/fathalowarabic 16#064e
/fathatanarabic 16#064b
/fbopomofo 16#3108
/fcircle 16#24d5
/fdotaccent 16#1e1f
/feharabic 16#0641
/feharmenian 16#0586
/fehfinalarabic 16#fed2
/fehinitialarabic 16#fed3
/fehmedialarabic 16#fed4
/feicoptic 16#03e5
/female 16#2640
/ff 16#fb00
/ffi 16#fb03
/ffl 16#fb04
/fi 16#fb01
/fifteencircle 16#246e
/fifteenparen 16#2482
/fifteenperiod 16#2496
/figuredash 16#2012
/filledbox 16#25a0
/filledrect 16#25ac
/finalkaf 16#05da
/finalkafdagesh 16#fb3a
/finalkafdageshhebrew 16#fb3a
/finalkafhebrew 16#05da
/finalmem 16#05dd
/finalmemhebrew 16#05dd
/finalnun 16#05df
/finalnunhebrew 16#05df
/finalpe 16#05e3
/finalpehebrew 16#05e3
/finaltsadi 16#05e5
/finaltsadihebrew 16#05e5
/firsttonechinese 16#02c9
/fisheye 16#25c9
/fitacyrillic 16#0473
/five 16#0035
/fivearabic 16#0665
/fivebengali 16#09eb
/fivecircle 16#2464
/fivecircleinversesansserif 16#278e
/fivedeva 16#096b
/fiveeighths 16#215d
/fivegujarati 16#0aeb
/fivegurmukhi 16#0a6b
/fivehackarabic 16#0665
/fivehangzhou 16#3025
/fiveideographicparen 16#3224
/fiveinferior 16#2085
/fivemonospace 16#ff15
/fiveoldstyle 16#f735
/fiveparen 16#2478
/fiveperiod 16#248c
/fivepersian 16#06f5
/fiveroman 16#2174
/fivesuperior 16#2075
/fivethai 16#0e55
/fl 16#fb02
/florin 16#0192
/fmonospace 16#ff46
/fmsquare 16#3399
/fofanthai 16#0e1f
/fofathai 16#0e1d
/fongmanthai 16#0e4f
/forall 16#2200
/four 16#0034
/fourarabic 16#0664
/fourbengali 16#09ea
/fourcircle 16#2463
/fourcircleinversesansserif 16#278d
/fourdeva 16#096a
/fourgujarati 16#0aea
/fourgurmukhi 16#0a6a
/fourhackarabic 16#0664
/fourhangzhou 16#3024
/fourideographicparen 16#3223
/fourinferior 16#2084
/fourmonospace 16#ff14
/fournumeratorbengali 16#09f7
/fouroldstyle 16#f734
/fourparen 16#2477
/fourperiod 16#248b
/fourpersian 16#06f4
/fourroman 16#2173
/foursuperior 16#2074
/fourteencircle 16#246d
/fourteenparen 16#2481
/fourteenperiod 16#2495
/fourthai 16#0e54
/fourthtonechinese 16#02cb
/fparen 16#24a1
/fraction 16#2044
/franc 16#20a3
/g 16#0067
/gabengali 16#0997
/gacute 16#01f5
/gadeva 16#0917
/gafarabic 16#06af
/gaffinalarabic 16#fb93
/gafinitialarabic 16#fb94
/gafmedialarabic 16#fb95
/gagujarati 16#0a97
/gagurmukhi 16#0a17
/gahiragana 16#304c
/gakatakana 16#30ac
/gamma 16#03b3
/gammalatinsmall 16#0263
/gammasuperior 16#02e0
/gangiacoptic 16#03eb
/gbopomofo 16#310d
/gbreve 16#011f
/gcaron 16#01e7
/gcedilla 16#0123
/gcircle 16#24d6
/gcircumflex 16#011d
/gcommaaccent 16#0123
/gdot 16#0121
/gdotaccent 16#0121
/gecyrillic 16#0433
/gehiragana 16#3052
/gekatakana 16#30b2
/geometricallyequal 16#2251
/gereshaccenthebrew 16#059c
/gereshhebrew 16#05f3
/gereshmuqdamhebrew 16#059d
/germandbls 16#00df
/gershayimaccenthebrew 16#059e
/gershayimhebrew 16#05f4
/getamark 16#3013
/ghabengali 16#0998
/ghadarmenian 16#0572
/ghadeva 16#0918
/ghagujarati 16#0a98
/ghagurmukhi 16#0a18
/ghainarabic 16#063a
/ghainfinalarabic 16#fece
/ghaininitialarabic 16#fecf
/ghainmedialarabic 16#fed0
/ghemiddlehookcyrillic 16#0495
/ghestrokecyrillic 16#0493
/gheupturncyrillic 16#0491
/ghhadeva 16#095a
/ghhagurmukhi 16#0a5a
/ghook 16#0260
/ghzsquare 16#3393
/gihiragana 16#304e
/gikatakana 16#30ae
/gimarmenian 16#0563
/gimel 16#05d2
/gimeldagesh 16#fb32
/gimeldageshhebrew 16#fb32
/gimelhebrew 16#05d2
/gjecyrillic 16#0453
/glottalinvertedstroke 16#01be
/glottalstop 16#0294
/glottalstopinverted 16#0296
/glottalstopmod 16#02c0
/glottalstopreversed 16#0295
/glottalstopreversedmod 16#02c1
/glottalstopreversedsuperior 16#02e4
/glottalstopstroke 16#02a1
/glottalstopstrokereversed 16#02a2
/gmacron 16#1e21
/gmonospace 16#ff47
/gohiragana 16#3054
/gokatakana 16#30b4
/gparen 16#24a2
/gpasquare 16#33ac
/gradient 16#2207
/grave 16#0060
/gravebelowcmb 16#0316
/gravecmb 16#0300
/gravecomb 16#0300
/gravedeva 16#0953
/gravelowmod 16#02ce
/gravemonospace 16#ff40
/gravetonecmb 16#0340
/greater 16#003e
/greaterequal 16#2265
/greaterequalorless 16#22db
/greatermonospace 16#ff1e
/greaterorequivalent 16#2273
/greaterorless 16#2277
/greateroverequal 16#2267
/greatersmall 16#fe65
/gscript 16#0261
/gstroke 16#01e5
/guhiragana 16#3050
/guillemotleft 16#00ab
/guillemotright 16#00bb
/guilsinglleft 16#2039
/guilsinglright 16#203a
/gukatakana 16#30b0
/guramusquare 16#3318
/gysquare 16#33c9
/h 16#0068
/haabkhasiancyrillic 16#04a9
/haaltonearabic 16#06c1
/habengali 16#09b9
/hadescendercyrillic 16#04b3
/hadeva 16#0939
/hagujarati 16#0ab9
/hagurmukhi 16#0a39
/haharabic 16#062d
/hahfinalarabic 16#fea2
/hahinitialarabic 16#fea3
/hahiragana 16#306f
/hahmedialarabic 16#fea4
/haitusquare 16#332a
/hakatakana 16#30cf
/hakatakanahalfwidth 16#ff8a
/halantgurmukhi 16#0a4d
/hamzaarabic 16#0621
/hamzalowarabic 16#0621
/hangulfiller 16#3164
/hardsigncyrillic 16#044a
/harpoonleftbarbup 16#21bc
/harpoonrightbarbup 16#21c0
/hasquare 16#33ca
/hatafpatah 16#05b2
/hatafpatah16 16#05b2
/hatafpatah23 16#05b2
/hatafpatah2f 16#05b2
/hatafpatahhebrew 16#05b2
/hatafpatahnarrowhebrew 16#05b2
/hatafpatahquarterhebrew 16#05b2
/hatafpatahwidehebrew 16#05b2
/hatafqamats 16#05b3
/hatafqamats1b 16#05b3
/hatafqamats28 16#05b3
/hatafqamats34 16#05b3
/hatafqamatshebrew 16#05b3
/hatafqamatsnarrowhebrew 16#05b3
/hatafqamatsquarterhebrew 16#05b3
/hatafqamatswidehebrew 16#05b3
/hatafsegol 16#05b1
/hatafsegol17 16#05b1
/hatafsegol24 16#05b1
/hatafsegol30 16#05b1
/hatafsegolhebrew 16#05b1
/hatafsegolnarrowhebrew 16#05b1
/hatafsegolquarterhebrew 16#05b1
/hatafsegolwidehebrew 16#05b1
/hbar 16#0127
/hbopomofo 16#310f
/hbrevebelow 16#1e2b
/hcedilla 16#1e29
/hcircle 16#24d7
/hcircumflex 16#0125
/hdieresis 16#1e27
/hdotaccent 16#1e23
/hdotbelow 16#1e25
/he 16#05d4
/heart 16#2665
/heartsuitblack 16#2665
/heartsuitwhite 16#2661
/hedagesh 16#fb34
/hedageshhebrew 16#fb34
/hehaltonearabic 16#06c1
/heharabic 16#0647
/hehebrew 16#05d4
/hehfinalaltonearabic 16#fba7
/hehfinalalttwoarabic 16#feea
/hehfinalarabic 16#feea
/hehhamzaabovefinalarabic 16#fba5
/hehhamzaaboveisolatedarabic 16#fba4
/hehinitialaltonearabic 16#fba8
/hehinitialarabic 16#feeb
/hehiragana 16#3078
/hehmedialaltonearabic 16#fba9
/hehmedialarabic 16#feec
/heiseierasquare 16#337b
/hekatakana 16#30d8
/hekatakanahalfwidth 16#ff8d
/hekutaarusquare 16#3336
/henghook 16#0267
/herutusquare 16#3339
/het 16#05d7
/hethebrew 16#05d7
/hhook 16#0266
/hhooksuperior 16#02b1
/hieuhacirclekorean 16#327b
/hieuhaparenkorean 16#321b
/hieuhcirclekorean 16#326d
/hieuhkorean 16#314e
/hieuhparenkorean 16#320d
/hihiragana 16#3072
/hikatakana 16#30d2
/hikatakanahalfwidth 16#ff8b
/hiriq 16#05b4
/hiriq14 16#05b4
/hiriq21 16#05b4
/hiriq2d 16#05b4
/hiriqhebrew 16#05b4
/hiriqnarrowhebrew 16#05b4
/hiriqquarterhebrew 16#05b4
/hiriqwidehebrew 16#05b4
/hlinebelow 16#1e96
/hmonospace 16#ff48
/hoarmenian 16#0570
/hohipthai 16#0e2b
/hohiragana 16#307b
/hokatakana 16#30db
/hokatakanahalfwidth 16#ff8e
/holam 16#05b9
/holam19 16#05b9
/holam26 16#05b9
/holam32 16#05b9
/holamhebrew 16#05b9
/holamnarrowhebrew 16#05b9
/holamquarterhebrew 16#05b9
/holamwidehebrew 16#05b9
/honokhukthai 16#0e2e
/hookabovecomb 16#0309
/hookcmb 16#0309
/hookpalatalizedbelowcmb 16#0321
/hookretroflexbelowcmb 16#0322
/hoonsquare 16#3342
/horicoptic 16#03e9
/horizontalbar 16#2015
/horncmb 16#031b
/hotsprings 16#2668
/house 16#2302
/hparen 16#24a3
/hsuperior 16#02b0
/hturned 16#0265
/huhiragana 16#3075
/huiitosquare 16#3333
/hukatakana 16#30d5
/hukatakanahalfwidth 16#ff8c
/hungarumlaut 16#02dd
/hungarumlautcmb 16#030b
/hv 16#0195
/hyphen 16#002d
/hypheninferior 16#f6e5
/hyphenmonospace 16#ff0d
/hyphensmall 16#fe63
/hyphensuperior 16#f6e6
/hyphentwo 16#2010
/i 16#0069
/iacute 16#00ed
/iacyrillic 16#044f
/ibengali 16#0987
/ibopomofo 16#3127
/ibreve 16#012d
/icaron 16#01d0
/icircle 16#24d8
/icircumflex 16#00ee
/icyrillic 16#0456
/idblgrave 16#0209
/ideographearthcircle 16#328f
/ideographfirecircle 16#328b
/ideographicallianceparen 16#323f
/ideographiccallparen 16#323a
/ideographiccentrecircle 16#32a5
/ideographicclose 16#3006
/ideographiccomma 16#3001
/ideographiccommaleft 16#ff64
/ideographiccongratulationparen 16#3237
/ideographiccorrectcircle 16#32a3
/ideographicearthparen 16#322f
/ideographicenterpriseparen 16#323d
/ideographicexcellentcircle 16#329d
/ideographicfestivalparen 16#3240
/ideographicfinancialcircle 16#3296
/ideographicfinancialparen 16#3236
/ideographicfireparen 16#322b
/ideographichaveparen 16#3232
/ideographichighcircle 16#32a4
/ideographiciterationmark 16#3005
/ideographiclaborcircle 16#3298
/ideographiclaborparen 16#3238
/ideographicleftcircle 16#32a7
/ideographiclowcircle 16#32a6
/ideographicmedicinecircle 16#32a9
/ideographicmetalparen 16#322e
/ideographicmoonparen 16#322a
/ideographicnameparen 16#3234
/ideographicperiod 16#3002
/ideographicprintcircle 16#329e
/ideographicreachparen 16#3243
/ideographicrepresentparen 16#3239
/ideographicresourceparen 16#323e
/ideographicrightcircle 16#32a8
/ideographicsecretcircle 16#3299
/ideographicselfparen 16#3242
/ideographicsocietyparen 16#3233
/ideographicspace 16#3000
/ideographicspecialparen 16#3235
/ideographicstockparen 16#3231
/ideographicstudyparen 16#323b
/ideographicsunparen 16#3230
/ideographicsuperviseparen 16#323c
/ideographicwaterparen 16#322c
/ideographicwoodparen 16#322d
/ideographiczero 16#3007
/ideographmetalcircle 16#328e
/ideographmooncircle 16#328a
/ideographnamecircle 16#3294
/ideographsuncircle 16#3290
/ideographwatercircle 16#328c
/ideographwoodcircle 16#328d
/ideva 16#0907
/idieresis 16#00ef
/idieresisacute 16#1e2f
/idieresiscyrillic 16#04e5
/idotbelow 16#1ecb
/iebrevecyrillic 16#04d7
/iecyrillic 16#0435
/ieungacirclekorean 16#3275
/ieungaparenkorean 16#3215
/ieungcirclekorean 16#3267
/ieungkorean 16#3147
/ieungparenkorean 16#3207
/igrave 16#00ec
/igujarati 16#0a87
/igurmukhi 16#0a07
/ihiragana 16#3044
/ihookabove 16#1ec9
/iibengali 16#0988
/iicyrillic 16#0438
/iideva 16#0908
/iigujarati 16#0a88
/iigurmukhi 16#0a08
/iimatragurmukhi 16#0a40
/iinvertedbreve 16#020b
/iishortcyrillic 16#0439
/iivowelsignbengali 16#09c0
/iivowelsigndeva 16#0940
/iivowelsigngujarati 16#0ac0
/ij 16#0133
/ikatakana 16#30a4
/ikatakanahalfwidth 16#ff72
/ikorean 16#3163
/ilde 16#02dc
/iluyhebrew 16#05ac
/imacron 16#012b
/imacroncyrillic 16#04e3
/imageorapproximatelyequal 16#2253
/imatragurmukhi 16#0a3f
/imonospace 16#ff49
/increment 16#2206
/infinity 16#221e
/iniarmenian 16#056b
/integral 16#222b
/integralbottom 16#2321
/integralbt 16#2321
/integralex 16#f8f5
/integraltop 16#2320
/integraltp 16#2320
/intersection 16#2229
/intisquare 16#3305
/invbullet 16#25d8
/invcircle 16#25d9
/invsmileface 16#263b
/iocyrillic 16#0451
/iogonek 16#012f
/iota 16#03b9
/iotadieresis 16#03ca
/iotadieresistonos 16#0390
/iotalatin 16#0269
/iotatonos 16#03af
/iparen 16#24a4
/irigurmukhi 16#0a72
/ismallhiragana 16#3043
/ismallkatakana 16#30a3
/ismallkatakanahalfwidth 16#ff68
/issharbengali 16#09fa
/istroke 16#0268
/isuperior 16#f6ed
/iterationhiragana 16#309d
/iterationkatakana 16#30fd
/itilde 16#0129
/itildebelow 16#1e2d
/iubopomofo 16#3129
/iucyrillic 16#044e
/ivowelsignbengali 16#09bf
/ivowelsigndeva 16#093f
/ivowelsigngujarati 16#0abf
/izhitsacyrillic 16#0475
/izhitsadblgravecyrillic 16#0477
/j 16#006a
/jaarmenian 16#0571
/jabengali 16#099c
/jadeva 16#091c
/jagujarati 16#0a9c
/jagurmukhi 16#0a1c
/jbopomofo 16#3110
/jcaron 16#01f0
/jcircle 16#24d9
/jcircumflex 16#0135
/jcrossedtail 16#029d
/jdotlessstroke 16#025f
/jecyrillic 16#0458
/jeemarabic 16#062c
/jeemfinalarabic 16#fe9e
/jeeminitialarabic 16#fe9f
/jeemmedialarabic 16#fea0
/jeharabic 16#0698
/jehfinalarabic 16#fb8b
/jhabengali 16#099d
/jhadeva 16#091d
/jhagujarati 16#0a9d
/jhagurmukhi 16#0a1d
/jheharmenian 16#057b
/jis 16#3004
/jmonospace 16#ff4a
/jparen 16#24a5
/jsuperior 16#02b2
/k 16#006b
/kabashkircyrillic 16#04a1
/kabengali 16#0995
/kacute 16#1e31
/kacyrillic 16#043a
/kadescendercyrillic 16#049b
/kadeva 16#0915
/kaf 16#05db
/kafarabic 16#0643
/kafdagesh 16#fb3b
/kafdageshhebrew 16#fb3b
/kaffinalarabic 16#feda
/kafhebrew 16#05db
/kafinitialarabic 16#fedb
/kafmedialarabic 16#fedc
/kafrafehebrew 16#fb4d
/kagujarati 16#0a95
/kagurmukhi 16#0a15
/kahiragana 16#304b
/kahookcyrillic 16#04c4
/kakatakana 16#30ab
/kakatakanahalfwidth 16#ff76
/kappa 16#03ba
/kappasymbolgreek 16#03f0
/kapyeounmieumkorean 16#3171
/kapyeounphieuphkorean 16#3184
/kapyeounpieupkorean 16#3178
/kapyeounssangpieupkorean 16#3179
/karoriisquare 16#330d
/kashidaautoarabic 16#0640
/kashidaautonosidebearingarabic 16#0640
/kasmallkatakana 16#30f5
/kasquare 16#3384
/kasraarabic 16#0650
/kasratanarabic 16#064d
/kastrokecyrillic 16#049f
/katahiraprolongmarkhalfwidth 16#ff70
/kaverticalstrokecyrillic 16#049d
/kbopomofo 16#310e
/kcalsquare 16#3389
/kcaron 16#01e9
/kcedilla 16#0137
/kcircle 16#24da
/kcommaaccent 16#0137
/kdotbelow 16#1e33
/keharmenian 16#0584
/kehiragana 16#3051
/kekatakana 16#30b1
/kekatakanahalfwidth 16#ff79
/kenarmenian 16#056f
/kesmallkatakana 16#30f6
/kgreenlandic 16#0138
/khabengali 16#0996
/khacyrillic 16#0445
/khadeva 16#0916
/khagujarati 16#0a96
/khagurmukhi 16#0a16
/khaharabic 16#062e
/khahfinalarabic 16#fea6
/khahinitialarabic 16#fea7
/khahmedialarabic 16#fea8
/kheicoptic 16#03e7
/khhadeva 16#0959
/khhagurmukhi 16#0a59
/khieukhacirclekorean 16#3278
/khieukhaparenkorean 16#3218
/khieukhcirclekorean 16#326a
/khieukhkorean 16#314b
/khieukhparenkorean 16#320a
/khokhaithai 16#0e02
/khokhonthai 16#0e05
/khokhuatthai 16#0e03
/khokhwaithai 16#0e04
/khomutthai 16#0e5b
/khook 16#0199
/khorakhangthai 16#0e06
/khzsquare 16#3391
/kihiragana 16#304d
/kikatakana 16#30ad
/kikatakanahalfwidth 16#ff77
/kiroguramusquare 16#3315
/kiromeetorusquare 16#3316
/kirosquare 16#3314
/kiyeokacirclekorean 16#326e
/kiyeokaparenkorean 16#320e
/kiyeokcirclekorean 16#3260
/kiyeokkorean 16#3131
/kiyeokparenkorean 16#3200
/kiyeoksioskorean 16#3133
/kjecyrillic 16#045c
/klinebelow 16#1e35
/klsquare 16#3398
/kmcubedsquare 16#33a6
/kmonospace 16#ff4b
/kmsquaredsquare 16#33a2
/kohiragana 16#3053
/kohmsquare 16#33c0
/kokaithai 16#0e01
/kokatakana 16#30b3
/kokatakanahalfwidth 16#ff7a
/kooposquare 16#331e
/koppacyrillic 16#0481
/koreanstandardsymbol 16#327f
/koroniscmb 16#0343
/kparen 16#24a6
/kpasquare 16#33aa
/ksicyrillic 16#046f
/ktsquare 16#33cf
/kturned 16#029e
/kuhiragana 16#304f
/kukatakana 16#30af
/kukatakanahalfwidth 16#ff78
/kvsquare 16#33b8
/kwsquare 16#33be
/l 16#006c
/labengali 16#09b2
/lacute 16#013a
/ladeva 16#0932
/lagujarati 16#0ab2
/lagurmukhi 16#0a32
/lakkhangyaothai 16#0e45
/lamaleffinalarabic 16#fefc
/lamalefhamzaabovefinalarabic 16#fef8
/lamalefhamzaaboveisolatedarabic 16#fef7
/lamalefhamzabelowfinalarabic 16#fefa
/lamalefhamzabelowisolatedarabic 16#fef9
/lamalefisolatedarabic 16#fefb
/lamalefmaddaabovefinalarabic 16#fef6
/lamalefmaddaaboveisolatedarabic 16#fef5
/lamarabic 16#0644
/lambda 16#03bb
/lambdastroke 16#019b
/lamed 16#05dc
/lameddagesh 16#fb3c
/lameddageshhebrew 16#fb3c
/lamedhebrew 16#05dc
/lamfinalarabic 16#fede
/lamhahinitialarabic 16#fcca
/laminitialarabic 16#fedf
/lamjeeminitialarabic 16#fcc9
/lamkhahinitialarabic 16#fccb
/lamlamhehisolatedarabic 16#fdf2
/lammedialarabic 16#fee0
/lammeemhahinitialarabic 16#fd88
/lammeeminitialarabic 16#fccc
/largecircle 16#25ef
/lbar 16#019a
/lbelt 16#026c
/lbopomofo 16#310c
/lcaron 16#013e
/lcedilla 16#013c
/lcircle 16#24db
/lcircumflexbelow 16#1e3d
/lcommaaccent 16#013c
/ldot 16#0140
/ldotaccent 16#0140
/ldotbelow 16#1e37
/ldotbelowmacron 16#1e39
/leftangleabovecmb 16#031a
/lefttackbelowcmb 16#0318
/less 16#003c
/lessequal 16#2264
/lessequalorgreater 16#22da
/lessmonospace 16#ff1c
/lessorequivalent 16#2272
/lessorgreater 16#2276
/lessoverequal 16#2266
/lesssmall 16#fe64
/lezh 16#026e
/lfblock 16#258c
/lhookretroflex 16#026d
/lira 16#20a4
/liwnarmenian 16#056c
/lj 16#01c9
/ljecyrillic 16#0459
/ll 16#f6c0
/lladeva 16#0933
/llagujarati 16#0ab3
/llinebelow 16#1e3b
/llladeva 16#0934
/llvocalicbengali 16#09e1
/llvocalicdeva 16#0961
/llvocalicvowelsignbengali 16#09e3
/llvocalicvowelsigndeva 16#0963
/lmiddletilde 16#026b
/lmonospace 16#ff4c
/lmsquare 16#33d0
/lochulathai 16#0e2c
/logicaland 16#2227
/logicalnot 16#00ac
/logicalnotreversed 16#2310
/logicalor 16#2228
/lolingthai 16#0e25
/longs 16#017f
/lowlinecenterline 16#fe4e
/lowlinecmb 16#0332
/lowlinedashed 16#fe4d
/lozenge 16#25ca
/lparen 16#24a7
/lslash 16#0142
/lsquare 16#2113
/lsuperior 16#f6ee
/ltshade 16#2591
/luthai 16#0e26
/lvocalicbengali 16#098c
/lvocalicdeva 16#090c
/lvocalicvowelsignbengali 16#09e2
/lvocalicvowelsigndeva 16#0962
/lxsquare 16#33d3
/m 16#006d
/mabengali 16#09ae
/macron 16#00af
/macronbelowcmb 16#0331
/macroncmb 16#0304
/macronlowmod 16#02cd
/macronmonospace 16#ffe3
/macute 16#1e3f
/madeva 16#092e
/magujarati 16#0aae
/magurmukhi 16#0a2e
/mahapakhhebrew 16#05a4
/mahapakhlefthebrew 16#05a4
/mahiragana 16#307e
/maichattawalowleftthai 16#f895
/maichattawalowrightthai 16#f894
/maichattawathai 16#0e4b
/maichattawaupperleftthai 16#f893
/maieklowleftthai 16#f88c
/maieklowrightthai 16#f88b
/maiekthai 16#0e48
/maiekupperleftthai 16#f88a
/maihanakatleftthai 16#f884
/maihanakatthai 16#0e31
/maitaikhuleftthai 16#f889
/maitaikhuthai 16#0e47
/maitholowleftthai 16#f88f
/maitholowrightthai 16#f88e
/maithothai 16#0e49
/maithoupperleftthai 16#f88d
/maitrilowleftthai 16#f892
/maitrilowrightthai 16#f891
/maitrithai 16#0e4a
/maitriupperleftthai 16#f890
/maiyamokthai 16#0e46
/makatakana 16#30de
/makatakanahalfwidth 16#ff8f
/male 16#2642
/mansyonsquare 16#3347
/maqafhebrew 16#05be
/mars 16#2642
/masoracirclehebrew 16#05af
/masquare 16#3383
/mbopomofo 16#3107
/mbsquare 16#33d4
/mcircle 16#24dc
/mcubedsquare 16#33a5
/mdotaccent 16#1e41
/mdotbelow 16#1e43
/meemarabic 16#0645
/meemfinalarabic 16#fee2
/meeminitialarabic 16#fee3
/meemmedialarabic 16#fee4
/meemmeeminitialarabic 16#fcd1
/meemmeemisolatedarabic 16#fc48
/meetorusquare 16#334d
/mehiragana 16#3081
/meizierasquare 16#337e
/mekatakana 16#30e1
/mekatakanahalfwidth 16#ff92
/mem 16#05de
/memdagesh 16#fb3e
/memdageshhebrew 16#fb3e
/memhebrew 16#05de
/menarmenian 16#0574
/merkhahebrew 16#05a5
/merkhakefulahebrew 16#05a6
/merkhakefulalefthebrew 16#05a6
/merkhalefthebrew 16#05a5
/mhook 16#0271
/mhzsquare 16#3392
/middledotkatakanahalfwidth 16#ff65
/middot 16#00b7
/mieumacirclekorean 16#3272
/mieumaparenkorean 16#3212
/mieumcirclekorean 16#3264
/mieumkorean 16#3141
/mieumpansioskorean 16#3170
/mieumparenkorean 16#3204
/mieumpieupkorean 16#316e
/mieumsioskorean 16#316f
/mihiragana 16#307f
/mikatakana 16#30df
/mikatakanahalfwidth 16#ff90
/minus 16#2212
/minusbelowcmb 16#0320
/minuscircle 16#2296
/minusmod 16#02d7
/minusplus 16#2213
/minute 16#2032
/miribaarusquare 16#334a
/mirisquare 16#3349
/mlonglegturned 16#0270
/mlsquare 16#3396
/mmcubedsquare 16#33a3
/mmonospace 16#ff4d
/mmsquaredsquare 16#339f
/mohiragana 16#3082
/mohmsquare 16#33c1
/mokatakana 16#30e2
/mokatakanahalfwidth 16#ff93
/molsquare 16#33d6
/momathai 16#0e21
/moverssquare 16#33a7
/moverssquaredsquare 16#33a8
/mparen 16#24a8
/mpasquare 16#33ab
/mssquare 16#33b3
/msuperior 16#f6ef
/mturned 16#026f
/mu 16#00b5
/mu1 16#00b5
/muasquare 16#3382
/muchgreater 16#226b
/muchless 16#226a
/mufsquare 16#338c
/mugreek 16#03bc
/mugsquare 16#338d
/muhiragana 16#3080
/mukatakana 16#30e0
/mukatakanahalfwidth 16#ff91
/mulsquare 16#3395
/multiply 16#00d7
/mumsquare 16#339b
/munahhebrew 16#05a3
/munahlefthebrew 16#05a3
/musicalnote 16#266a
/musicalnotedbl 16#266b
/musicflatsign 16#266d
/musicsharpsign 16#266f
/mussquare 16#33b2
/muvsquare 16#33b6
/muwsquare 16#33bc
/mvmegasquare 16#33b9
/mvsquare 16#33b7
/mwmegasquare 16#33bf
/mwsquare 16#33bd
/n 16#006e
/nabengali 16#09a8
/nabla 16#2207
/nacute 16#0144
/nadeva 16#0928
/nagujarati 16#0aa8
/nagurmukhi 16#0a28
/nahiragana 16#306a
/nakatakana 16#30ca
/nakatakanahalfwidth 16#ff85
/napostrophe 16#0149
/nasquare 16#3381
/nbopomofo 16#310b
/nbspace 16#00a0
/ncaron 16#0148
/ncedilla 16#0146
/ncircle 16#24dd
/ncircumflexbelow 16#1e4b
/ncommaaccent 16#0146
/ndotaccent 16#1e45
/ndotbelow 16#1e47
/nehiragana 16#306d
/nekatakana 16#30cd
/nekatakanahalfwidth 16#ff88
/newsheqelsign 16#20aa
/nfsquare 16#338b
/ngabengali 16#0999
/ngadeva 16#0919
/ngagujarati 16#0a99
/ngagurmukhi 16#0a19
/ngonguthai 16#0e07
/nhiragana 16#3093
/nhookleft 16#0272
/nhookretroflex 16#0273
/nieunacirclekorean 16#326f
/nieunaparenkorean 16#320f
/nieuncieuckorean 16#3135
/nieuncirclekorean 16#3261
/nieunhieuhkorean 16#3136
/nieunkorean 16#3134
/nieunpansioskorean 16#3168
/nieunparenkorean 16#3201
/nieunsioskorean 16#3167
/nieuntikeutkorean 16#3166
/nihiragana 16#306b
/nikatakana 16#30cb
/nikatakanahalfwidth 16#ff86
/nikhahitleftthai 16#f899
/nikhahitthai 16#0e4d
/nine 16#0039
/ninearabic 16#0669
/ninebengali 16#09ef
/ninecircle 16#2468
/ninecircleinversesansserif 16#2792
/ninedeva 16#096f
/ninegujarati 16#0aef
/ninegurmukhi 16#0a6f
/ninehackarabic 16#0669
/ninehangzhou 16#3029
/nineideographicparen 16#3228
/nineinferior 16#2089
/ninemonospace 16#ff19
/nineoldstyle 16#f739
/nineparen 16#247c
/nineperiod 16#2490
/ninepersian 16#06f9
/nineroman 16#2178
/ninesuperior 16#2079
/nineteencircle 16#2472
/nineteenparen 16#2486
/nineteenperiod 16#249a
/ninethai 16#0e59
/nj 16#01cc
/njecyrillic 16#045a
/nkatakana 16#30f3
/nkatakanahalfwidth 16#ff9d
/nlegrightlong 16#019e
/nlinebelow 16#1e49
/nmonospace 16#ff4e
/nmsquare 16#339a
/nnabengali 16#09a3
/nnadeva 16#0923
/nnagujarati 16#0aa3
/nnagurmukhi 16#0a23
/nnnadeva 16#0929
/nohiragana 16#306e
/nokatakana 16#30ce
/nokatakanahalfwidth 16#ff89
/nonbreakingspace 16#00a0
/nonenthai 16#0e13
/nonuthai 16#0e19
/noonarabic 16#0646
/noonfinalarabic 16#fee6
/noonghunnaarabic 16#06ba
/noonghunnafinalarabic 16#fb9f
/nooninitialarabic 16#fee7
/noonjeeminitialarabic 16#fcd2
/noonjeemisolatedarabic 16#fc4b
/noonmedialarabic 16#fee8
/noonmeeminitialarabic 16#fcd5
/noonmeemisolatedarabic 16#fc4e
/noonnoonfinalarabic 16#fc8d
/notcontains 16#220c
/notelement 16#2209
/notelementof 16#2209
/notequal 16#2260
/notgreater 16#226f
/notgreaternorequal 16#2271
/notgreaternorless 16#2279
/notidentical 16#2262
/notless 16#226e
/notlessnorequal 16#2270
/notparallel 16#2226
/notprecedes 16#2280
/notsubset 16#2284
/notsucceeds 16#2281
/notsuperset 16#2285
/nowarmenian 16#0576
/nparen 16#24a9
/nssquare 16#33b1
/nsuperior 16#207f
/ntilde 16#00f1
/nu 16#03bd
/nuhiragana 16#306c
/nukatakana 16#30cc
/nukatakanahalfwidth 16#ff87
/nuktabengali 16#09bc
/nuktadeva 16#093c
/nuktagujarati 16#0abc
/nuktagurmukhi 16#0a3c
/numbersign 16#0023
/numbersignmonospace 16#ff03
/numbersignsmall 16#fe5f
/numeralsigngreek 16#0374
/numeralsignlowergreek 16#0375
/numero 16#2116
/nun 16#05e0
/nundagesh 16#fb40
/nundageshhebrew 16#fb40
/nunhebrew 16#05e0
/nvsquare 16#33b5
/nwsquare 16#33bb
/nyabengali 16#099e
/nyadeva 16#091e
/nyagujarati 16#0a9e
/nyagurmukhi 16#0a1e
/o 16#006f
/oacute 16#00f3
/oangthai 16#0e2d
/obarred 16#0275
/obarredcyrillic 16#04e9
/obarreddieresiscyrillic 16#04eb
/obengali 16#0993
/obopomofo 16#311b
/obreve 16#014f
/ocandradeva 16#0911
/ocandragujarati 16#0a91
/ocandravowelsigndeva 16#0949
/ocandravowelsigngujarati 16#0ac9
/ocaron 16#01d2
/ocircle 16#24de
/ocircumflex 16#00f4
/ocircumflexacute 16#1ed1
/ocircumflexdotbelow 16#1ed9
/ocircumflexgrave 16#1ed3
/ocircumflexhookabove 16#1ed5
/ocircumflextilde 16#1ed7
/ocyrillic 16#043e
/odblacute 16#0151
/odblgrave 16#020d
/odeva 16#0913
/odieresis 16#00f6
/odieresiscyrillic 16#04e7
/odotbelow 16#1ecd
/oe 16#0153
/oekorean 16#315a
/ogonek 16#02db
/ogonekcmb 16#0328
/ograve 16#00f2
/ogujarati 16#0a93
/oharmenian 16#0585
/ohiragana 16#304a
/ohookabove 16#1ecf
/ohorn 16#01a1
/ohornacute 16#1edb
/ohorndotbelow 16#1ee3
/ohorngrave 16#1edd
/ohornhookabove 16#1edf
/ohorntilde 16#1ee1
/ohungarumlaut 16#0151
/oi 16#01a3
/oinvertedbreve 16#020f
/okatakana 16#30aa
/okatakanahalfwidth 16#ff75
/okorean 16#3157
/olehebrew 16#05ab
/omacron 16#014d
/omacronacute 16#1e53
/omacrongrave 16#1e51
/omdeva 16#0950
/omega 16#03c9
/omega1 16#03d6
/omegacyrillic 16#0461
/omegalatinclosed 16#0277
/omegaroundcyrillic 16#047b
/omegatitlocyrillic 16#047d
/omegatonos 16#03ce
/omgujarati 16#0ad0
/omicron 16#03bf
/omicrontonos 16#03cc
/omonospace 16#ff4f
/one 16#0031
/onearabic 16#0661
/onebengali 16#09e7
/onecircle 16#2460
/onecircleinversesansserif 16#278a
/onedeva 16#0967
/onedotenleader 16#2024
/oneeighth 16#215b
/onefitted 16#f6dc
/onegujarati 16#0ae7
/onegurmukhi 16#0a67
/onehackarabic 16#0661
/onehalf 16#00bd
/onehangzhou 16#3021
/oneideographicparen 16#3220
/oneinferior 16#2081
/onemonospace 16#ff11
/onenumeratorbengali 16#09f4
/oneoldstyle 16#f731
/oneparen 16#2474
/oneperiod 16#2488
/onepersian 16#06f1
/onequarter 16#00bc
/oneroman 16#2170
/onesuperior 16#00b9
/onethai 16#0e51
/onethird 16#2153
/oogonek 16#01eb
/oogonekmacron 16#01ed
/oogurmukhi 16#0a13
/oomatragurmukhi 16#0a4b
/oopen 16#0254
/oparen 16#24aa
/openbullet 16#25e6
/option 16#2325
/ordfeminine 16#00aa
/ordmasculine 16#00ba
/orthogonal 16#221f
/oshortdeva 16#0912
/oshortvowelsigndeva 16#094a
/oslash 16#00f8
/oslashacute 16#01ff
/osmallhiragana 16#3049
/osmallkatakana 16#30a9
/osmallkatakanahalfwidth 16#ff6b
/ostrokeacute 16#01ff
/osuperior 16#f6f0
/otcyrillic 16#047f
/otilde 16#00f5
/otildeacute 16#1e4d
/otildedieresis 16#1e4f
/oubopomofo 16#3121
/overline 16#203e
/overlinecenterline 16#fe4a
/overlinecmb 16#0305
/overlinedashed 16#fe49
/overlinedblwavy 16#fe4c
/overlinewavy 16#fe4b
/overscore 16#00af
/ovowelsignbengali 16#09cb
/ovowelsigndeva 16#094b
/ovowelsigngujarati 16#0acb
/p 16#0070
/paampssquare 16#3380
/paasentosquare 16#332b
/pabengali 16#09aa
/pacute 16#1e55
/padeva 16#092a
/pagedown 16#21df
/pageup 16#21de
/pagujarati 16#0aaa
/pagurmukhi 16#0a2a
/pahiragana 16#3071
/paiyannoithai 16#0e2f
/pakatakana 16#30d1
/palatalizationcyrilliccmb 16#0484
/palochkacyrillic 16#04c0
/pansioskorean 16#317f
/paragraph 16#00b6
/parallel 16#2225
/parenleft 16#0028
/parenleftaltonearabic 16#fd3e
/parenleftbt 16#f8ed
/parenleftex 16#f8ec
/parenleftinferior 16#208d
/parenleftmonospace 16#ff08
/parenleftsmall 16#fe59
/parenleftsuperior 16#207d
/parenlefttp 16#f8eb
/parenleftvertical 16#fe35
/parenright 16#0029
/parenrightaltonearabic 16#fd3f
/parenrightbt 16#f8f8
/parenrightex 16#f8f7
/parenrightinferior 16#208e
/parenrightmonospace 16#ff09
/parenrightsmall 16#fe5a
/parenrightsuperior 16#207e
/parenrighttp 16#f8f6
/parenrightvertical 16#fe36
/partialdiff 16#2202
/paseqhebrew 16#05c0
/pashtahebrew 16#0599
/pasquare 16#33a9
/patah 16#05b7
/patah11 16#05b7
/patah1d 16#05b7
/patah2a 16#05b7
/patahhebrew 16#05b7
/patahnarrowhebrew 16#05b7
/patahquarterhebrew 16#05b7
/patahwidehebrew 16#05b7
/pazerhebrew 16#05a1
/pbopomofo 16#3106
/pcircle 16#24df
/pdotaccent 16#1e57
/pe 16#05e4
/pecyrillic 16#043f
/pedagesh 16#fb44
/pedageshhebrew 16#fb44
/peezisquare 16#333b
/pefinaldageshhebrew 16#fb43
/peharabic 16#067e
/peharmenian 16#057a
/pehebrew 16#05e4
/pehfinalarabic 16#fb57
/pehinitialarabic 16#fb58
/pehiragana 16#307a
/pehmedialarabic 16#fb59
/pekatakana 16#30da
/pemiddlehookcyrillic 16#04a7
/perafehebrew 16#fb4e
/percent 16#0025
/percentarabic 16#066a
/percentmonospace 16#ff05
/percentsmall 16#fe6a
/period 16#002e
/periodarmenian 16#0589
/periodcentered 16#00b7
/periodhalfwidth 16#ff61
/periodinferior 16#f6e7
/periodmonospace 16#ff0e
/periodsmall 16#fe52
/periodsuperior 16#f6e8
/perispomenigreekcmb 16#0342
/perpendicular 16#22a5
/perthousand 16#2030
/peseta 16#20a7
/pfsquare 16#338a
/phabengali 16#09ab
/phadeva 16#092b
/phagujarati 16#0aab
/phagurmukhi 16#0a2b
/phi 16#03c6
/phi1 16#03d5
/phieuphacirclekorean 16#327a
/phieuphaparenkorean 16#321a
/phieuphcirclekorean 16#326c
/phieuphkorean 16#314d
/phieuphparenkorean 16#320c
/philatin 16#0278
/phinthuthai 16#0e3a
/phisymbolgreek 16#03d5
/phook 16#01a5
/phophanthai 16#0e1e
/phophungthai 16#0e1c
/phosamphaothai 16#0e20
/pi 16#03c0
/pieupacirclekorean 16#3273
/pieupaparenkorean 16#3213
/pieupcieuckorean 16#3176
/pieupcirclekorean 16#3265
/pieupkiyeokkorean 16#3172
/pieupkorean 16#3142
/pieupparenkorean 16#3205
/pieupsioskiyeokkorean 16#3174
/pieupsioskorean 16#3144
/pieupsiostikeutkorean 16#3175
/pieupthieuthkorean 16#3177
/pieuptikeutkorean 16#3173
/pihiragana 16#3074
/pikatakana 16#30d4
/pisymbolgreek 16#03d6
/piwrarmenian 16#0583
/plus 16#002b
/plusbelowcmb 16#031f
/pluscircle 16#2295
/plusminus 16#00b1
/plusmod 16#02d6
/plusmonospace 16#ff0b
/plussmall 16#fe62
/plussuperior 16#207a
/pmonospace 16#ff50
/pmsquare 16#33d8
/pohiragana 16#307d
/pointingindexdownwhite 16#261f
/pointingindexleftwhite 16#261c
/pointingindexrightwhite 16#261e
/pointingindexupwhite 16#261d
/pokatakana 16#30dd
/poplathai 16#0e1b
/postalmark 16#3012
/postalmarkface 16#3020
/pparen 16#24ab
/precedes 16#227a
/prescription 16#211e
/primemod 16#02b9
/primereversed 16#2035
/product 16#220f
/projective 16#2305
/prolongedkana 16#30fc
/propellor 16#2318
/propersubset 16#2282
/propersuperset 16#2283
/proportion 16#2237
/proportional 16#221d
/psi 16#03c8
/psicyrillic 16#0471
/psilipneumatacyrilliccmb 16#0486
/pssquare 16#33b0
/puhiragana 16#3077
/pukatakana 16#30d7
/pvsquare 16#33b4
/pwsquare 16#33ba
/q 16#0071
/qadeva 16#0958
/qadmahebrew 16#05a8
/qafarabic 16#0642
/qaffinalarabic 16#fed6
/qafinitialarabic 16#fed7
/qafmedialarabic 16#fed8
/qamats 16#05b8
/qamats10 16#05b8
/qamats1a 16#05b8
/qamats1c 16#05b8
/qamats27 16#05b8
/qamats29 16#05b8
/qamats33 16#05b8
/qamatsde 16#05b8
/qamatshebrew 16#05b8
/qamatsnarrowhebrew 16#05b8
/qamatsqatanhebrew 16#05b8
/qamatsqatannarrowhebrew 16#05b8
/qamatsqatanquarterhebrew 16#05b8
/qamatsqatanwidehebrew 16#05b8
/qamatsquarterhebrew 16#05b8
/qamatswidehebrew 16#05b8
/qarneyparahebrew 16#059f
/qbopomofo 16#3111
/qcircle 16#24e0
/qhook 16#02a0
/qmonospace 16#ff51
/qof 16#05e7
/qofdagesh 16#fb47
/qofdageshhebrew 16#fb47
/qofhebrew 16#05e7
/qparen 16#24ac
/quarternote 16#2669
/qubuts 16#05bb
/qubuts18 16#05bb
/qubuts25 16#05bb
/qubuts31 16#05bb
/qubutshebrew 16#05bb
/qubutsnarrowhebrew 16#05bb
/qubutsquarterhebrew 16#05bb
/qubutswidehebrew 16#05bb
/question 16#003f
/questionarabic 16#061f
/questionarmenian 16#055e
/questiondown 16#00bf
/questiondownsmall 16#f7bf
/questiongreek 16#037e
/questionmonospace 16#ff1f
/questionsmall 16#f73f
/quotedbl 16#0022
/quotedblbase 16#201e
/quotedblleft 16#201c
/quotedblmonospace 16#ff02
/quotedblprime 16#301e
/quotedblprimereversed 16#301d
/quotedblright 16#201d
/quoteleft 16#2018
/quoteleftreversed 16#201b
/quotereversed 16#201b
/quoteright 16#2019
/quoterightn 16#0149
/quotesinglbase 16#201a
/quotesingle 16#0027
/quotesinglemonospace 16#ff07
/r 16#0072
/raarmenian 16#057c
/rabengali 16#09b0
/racute 16#0155
/radeva 16#0930
/radical 16#221a
/radicalex 16#f8e5
/radoverssquare 16#33ae
/radoverssquaredsquare 16#33af
/radsquare 16#33ad
/rafe 16#05bf
/rafehebrew 16#05bf
/ragujarati 16#0ab0
/ragurmukhi 16#0a30
/rahiragana 16#3089
/rakatakana 16#30e9
/rakatakanahalfwidth 16#ff97
/ralowerdiagonalbengali 16#09f1
/ramiddlediagonalbengali 16#09f0
/ramshorn 16#0264
/ratio 16#2236
/rbopomofo 16#3116
/rcaron 16#0159
/rcedilla 16#0157
/rcircle 16#24e1
/rcommaaccent 16#0157
/rdblgrave 16#0211
/rdotaccent 16#1e59
/rdotbelow 16#1e5b
/rdotbelowmacron 16#1e5d
/referencemark 16#203b
/reflexsubset 16#2286
/reflexsuperset 16#2287
/registered 16#00ae
/registersans 16#f8e8
/registerserif 16#f6da
/reharabic 16#0631
/reharmenian 16#0580
/rehfinalarabic 16#feae
/rehiragana 16#308c
/rekatakana 16#30ec
/rekatakanahalfwidth 16#ff9a
/resh 16#05e8
/reshdageshhebrew 16#fb48
/reshhebrew 16#05e8
/reversedtilde 16#223d
/reviahebrew 16#0597
/reviamugrashhebrew 16#0597
/revlogicalnot 16#2310
/rfishhook 16#027e
/rfishhookreversed 16#027f
/rhabengali 16#09dd
/rhadeva 16#095d
/rho 16#03c1
/rhook 16#027d
/rhookturned 16#027b
/rhookturnedsuperior 16#02b5
/rhosymbolgreek 16#03f1
/rhotichookmod 16#02de
/rieulacirclekorean 16#3271
/rieulaparenkorean 16#3211
/rieulcirclekorean 16#3263
/rieulhieuhkorean 16#3140
/rieulkiyeokkorean 16#313a
/rieulkiyeoksioskorean 16#3169
/rieulkorean 16#3139
/rieulmieumkorean 16#313b
/rieulpansioskorean 16#316c
/rieulparenkorean 16#3203
/rieulphieuphkorean 16#313f
/rieulpieupkorean 16#313c
/rieulpieupsioskorean 16#316b
/rieulsioskorean 16#313d
/rieulthieuthkorean 16#313e
/rieultikeutkorean 16#316a
/rieulyeorinhieuhkorean 16#316d
/rightangle 16#221f
/righttackbelowcmb 16#0319
/righttriangle 16#22bf
/rihiragana 16#308a
/rikatakana 16#30ea
/rikatakanahalfwidth 16#ff98
/ring 16#02da
/ringbelowcmb 16#0325
/ringcmb 16#030a
/ringhalfleft 16#02bf
/ringhalfleftarmenian 16#0559
/ringhalfleftbelowcmb 16#031c
/ringhalfleftcentered 16#02d3
/ringhalfright 16#02be
/ringhalfrightbelowcmb 16#0339
/ringhalfrightcentered 16#02d2
/rinvertedbreve 16#0213
/rittorusquare 16#3351
/rlinebelow 16#1e5f
/rlongleg 16#027c
/rlonglegturned 16#027a
/rmonospace 16#ff52
/rohiragana 16#308d
/rokatakana 16#30ed
/rokatakanahalfwidth 16#ff9b
/roruathai 16#0e23
/rparen 16#24ad
/rrabengali 16#09dc
/rradeva 16#0931
/rragurmukhi 16#0a5c
/rreharabic 16#0691
/rrehfinalarabic 16#fb8d
/rrvocalicbengali 16#09e0
/rrvocalicdeva 16#0960
/rrvocalicgujarati 16#0ae0
/rrvocalicvowelsignbengali 16#09c4
/rrvocalicvowelsigndeva 16#0944
/rrvocalicvowelsigngujarati 16#0ac4
/rsuperior 16#f6f1
/rtblock 16#2590
/rturned 16#0279
/rturnedsuperior 16#02b4
/ruhiragana 16#308b
/rukatakana 16#30eb
/rukatakanahalfwidth 16#ff99
/rupeemarkbengali 16#09f2
/rupeesignbengali 16#09f3
/rupiah 16#f6dd
/ruthai 16#0e24
/rvocalicbengali 16#098b
/rvocalicdeva 16#090b
/rvocalicgujarati 16#0a8b
/rvocalicvowelsignbengali 16#09c3
/rvocalicvowelsigndeva 16#0943
/rvocalicvowelsigngujarati 16#0ac3
/s 16#0073
/sabengali 16#09b8
/sacute 16#015b
/sacutedotaccent 16#1e65
/sadarabic 16#0635
/sadeva 16#0938
/sadfinalarabic 16#feba
/sadinitialarabic 16#febb
/sadmedialarabic 16#febc
/sagujarati 16#0ab8
/sagurmukhi 16#0a38
/sahiragana 16#3055
/sakatakana 16#30b5
/sakatakanahalfwidth 16#ff7b
/sallallahoualayhewasallamarabic 16#fdfa
/samekh 16#05e1
/samekhdagesh 16#fb41
/samekhdageshhebrew 16#fb41
/samekhhebrew 16#05e1
/saraaathai 16#0e32
/saraaethai 16#0e41
/saraaimaimalaithai 16#0e44
/saraaimaimuanthai 16#0e43
/saraamthai 16#0e33
/saraathai 16#0e30
/saraethai 16#0e40
/saraiileftthai 16#f886
/saraiithai 16#0e35
/saraileftthai 16#f885
/saraithai 16#0e34
/saraothai 16#0e42
/saraueeleftthai 16#f888
/saraueethai 16#0e37
/saraueleftthai 16#f887
/sarauethai 16#0e36
/sarauthai 16#0e38
/sarauuthai 16#0e39
/sbopomofo 16#3119
/scaron 16#0161
/scarondotaccent 16#1e67
/scedilla 16#015f
/schwa 16#0259
/schwacyrillic 16#04d9
/schwadieresiscyrillic 16#04db
/schwahook 16#025a
/scircle 16#24e2
/scircumflex 16#015d
/scommaaccent 16#0219
/sdotaccent 16#1e61
/sdotbelow 16#1e63
/sdotbelowdotaccent 16#1e69
/seagullbelowcmb 16#033c
/second 16#2033
/secondtonechinese 16#02ca
/section 16#00a7
/seenarabic 16#0633
/seenfinalarabic 16#feb2
/seeninitialarabic 16#feb3
/seenmedialarabic 16#feb4
/segol 16#05b6
/segol13 16#05b6
/segol1f 16#05b6
/segol2c 16#05b6
/segolhebrew 16#05b6
/segolnarrowhebrew 16#05b6
/segolquarterhebrew 16#05b6
/segoltahebrew 16#0592
/segolwidehebrew 16#05b6
/seharmenian 16#057d
/sehiragana 16#305b
/sekatakana 16#30bb
/sekatakanahalfwidth 16#ff7e
/semicolon 16#003b
/semicolonarabic 16#061b
/semicolonmonospace 16#ff1b
/semicolonsmall 16#fe54
/semivoicedmarkkana 16#309c
/semivoicedmarkkanahalfwidth 16#ff9f
/sentisquare 16#3322
/sentosquare 16#3323
/seven 16#0037
/sevenarabic 16#0667
/sevenbengali 16#09ed
/sevencircle 16#2466
/sevencircleinversesansserif 16#2790
/sevendeva 16#096d
/seveneighths 16#215e
/sevengujarati 16#0aed
/sevengurmukhi 16#0a6d
/sevenhackarabic 16#0667
/sevenhangzhou 16#3027
/sevenideographicparen 16#3226
/seveninferior 16#2087
/sevenmonospace 16#ff17
/sevenoldstyle 16#f737
/sevenparen 16#247a
/sevenperiod 16#248e
/sevenpersian 16#06f7
/sevenroman 16#2176
/sevensuperior 16#2077
/seventeencircle 16#2470
/seventeenparen 16#2484
/seventeenperiod 16#2498
/seventhai 16#0e57
/sfthyphen 16#00ad
/shaarmenian 16#0577
/shabengali 16#09b6
/shacyrillic 16#0448
/shaddaarabic 16#0651
/shaddadammaarabic 16#fc61
/shaddadammatanarabic 16#fc5e
/shaddafathaarabic 16#fc60
/shaddakasraarabic 16#fc62
/shaddakasratanarabic 16#fc5f
/shade 16#2592
/shadedark 16#2593
/shadelight 16#2591
/shademedium 16#2592
/shadeva 16#0936
/shagujarati 16#0ab6
/shagurmukhi 16#0a36
/shalshelethebrew 16#0593
/shbopomofo 16#3115
/shchacyrillic 16#0449
/sheenarabic 16#0634
/sheenfinalarabic 16#feb6
/sheeninitialarabic 16#feb7
/sheenmedialarabic 16#feb8
/sheicoptic 16#03e3
/sheqel 16#20aa
/sheqelhebrew 16#20aa
/sheva 16#05b0
/sheva115 16#05b0
/sheva15 16#05b0
/sheva22 16#05b0
/sheva2e 16#05b0
/shevahebrew 16#05b0
/shevanarrowhebrew 16#05b0
/shevaquarterhebrew 16#05b0
/shevawidehebrew 16#05b0
/shhacyrillic 16#04bb
/shimacoptic 16#03ed
/shin 16#05e9
/shindagesh 16#fb49
/shindageshhebrew 16#fb49
/shindageshshindot 16#fb2c
/shindageshshindothebrew 16#fb2c
/shindageshsindot 16#fb2d
/shindageshsindothebrew 16#fb2d
/shindothebrew 16#05c1
/shinhebrew 16#05e9
/shinshindot 16#fb2a
/shinshindothebrew 16#fb2a
/shinsindot 16#fb2b
/shinsindothebrew 16#fb2b
/shook 16#0282
/sigma 16#03c3
/sigma1 16#03c2
/sigmafinal 16#03c2
/sigmalunatesymbolgreek 16#03f2
/sihiragana 16#3057
/sikatakana 16#30b7
/sikatakanahalfwidth 16#ff7c
/siluqhebrew 16#05bd
/siluqlefthebrew 16#05bd
/similar 16#223c
/sindothebrew 16#05c2
/siosacirclekorean 16#3274
/siosaparenkorean 16#3214
/sioscieuckorean 16#317e
/sioscirclekorean 16#3266
/sioskiyeokkorean 16#317a
/sioskorean 16#3145
/siosnieunkorean 16#317b
/siosparenkorean 16#3206
/siospieupkorean 16#317d
/siostikeutkorean 16#317c
/six 16#0036
/sixarabic 16#0666
/sixbengali 16#09ec
/sixcircle 16#2465
/sixcircleinversesansserif 16#278f
/sixdeva 16#096c
/sixgujarati 16#0aec
/sixgurmukhi 16#0a6c
/sixhackarabic 16#0666
/sixhangzhou 16#3026
/sixideographicparen 16#3225
/sixinferior 16#2086
/sixmonospace 16#ff16
/sixoldstyle 16#f736
/sixparen 16#2479
/sixperiod 16#248d
/sixpersian 16#06f6
/sixroman 16#2175
/sixsuperior 16#2076
/sixteencircle 16#246f
/sixteencurrencydenominatorbengali 16#09f9
/sixteenparen 16#2483
/sixteenperiod 16#2497
/sixthai 16#0e56
/slash 16#002f
/slashmonospace 16#ff0f
/slong 16#017f
/slongdotaccent 16#1e9b
/smileface 16#263a
/smonospace 16#ff53
/sofpasuqhebrew 16#05c3
/softhyphen 16#00ad
/softsigncyrillic 16#044c
/sohiragana 16#305d
/sokatakana 16#30bd
/sokatakanahalfwidth 16#ff7f
/soliduslongoverlaycmb 16#0338
/solidusshortoverlaycmb 16#0337
/sorusithai 16#0e29
/sosalathai 16#0e28
/sosothai 16#0e0b
/sosuathai 16#0e2a
/space 16#0020
/spacehackarabic 16#0020
/spade 16#2660
/spadesuitblack 16#2660
/spadesuitwhite 16#2664
/sparen 16#24ae
/squarebelowcmb 16#033b
/squarecc 16#33c4
/squarecm 16#339d
/squarediagonalcrosshatchfill 16#25a9
/squarehorizontalfill 16#25a4
/squarekg 16#338f
/squarekm 16#339e
/squarekmcapital 16#33ce
/squareln 16#33d1
/squarelog 16#33d2
/squaremg 16#338e
/squaremil 16#33d5
/squaremm 16#339c
/squaremsquared 16#33a1
/squareorthogonalcrosshatchfill 16#25a6
/squareupperlefttolowerrightfill 16#25a7
/squareupperrighttolowerleftfill 16#25a8
/squareverticalfill 16#25a5
/squarewhitewithsmallblack 16#25a3
/srsquare 16#33db
/ssabengali 16#09b7
/ssadeva 16#0937
/ssagujarati 16#0ab7
/ssangcieuckorean 16#3149
/ssanghieuhkorean 16#3185
/ssangieungkorean 16#3180
/ssangkiyeokkorean 16#3132
/ssangnieunkorean 16#3165
/ssangpieupkorean 16#3143
/ssangsioskorean 16#3146
/ssangtikeutkorean 16#3138
/ssuperior 16#f6f2
/sterling 16#00a3
/sterlingmonospace 16#ffe1
/strokelongoverlaycmb 16#0336
/strokeshortoverlaycmb 16#0335
/subset 16#2282
/subsetnotequal 16#228a
/subsetorequal 16#2286
/succeeds 16#227b
/suchthat 16#220b
/suhiragana 16#3059
/sukatakana 16#30b9
/sukatakanahalfwidth 16#ff7d
/sukunarabic 16#0652
/summation 16#2211
/sun 16#263c
/superset 16#2283
/supersetnotequal 16#228b
/supersetorequal 16#2287
/svsquare 16#33dc
/syouwaerasquare 16#337c
/t 16#0074
/tabengali 16#09a4
/tackdown 16#22a4
/tackleft 16#22a3
/tadeva 16#0924
/tagujarati 16#0aa4
/tagurmukhi 16#0a24
/taharabic 16#0637
/tahfinalarabic 16#fec2
/tahinitialarabic 16#fec3
/tahiragana 16#305f
/tahmedialarabic 16#fec4
/taisyouerasquare 16#337d
/takatakana 16#30bf
/takatakanahalfwidth 16#ff80
/tatweelarabic 16#0640
/tau 16#03c4
/tav 16#05ea
/tavdages 16#fb4a
/tavdagesh 16#fb4a
/tavdageshhebrew 16#fb4a
/tavhebrew 16#05ea
/tbar 16#0167
/tbopomofo 16#310a
/tcaron 16#0165
/tccurl 16#02a8
/tcedilla 16#0163
/tcheharabic 16#0686
/tchehfinalarabic 16#fb7b
/tchehinitialarabic 16#fb7c
/tchehmedialarabic 16#fb7d
/tcircle 16#24e3
/tcircumflexbelow 16#1e71
/tcommaaccent 16#0163
/tdieresis 16#1e97
/tdotaccent 16#1e6b
/tdotbelow 16#1e6d
/tecyrillic 16#0442
/tedescendercyrillic 16#04ad
/teharabic 16#062a
/tehfinalarabic 16#fe96
/tehhahinitialarabic 16#fca2
/tehhahisolatedarabic 16#fc0c
/tehinitialarabic 16#fe97
/tehiragana 16#3066
/tehjeeminitialarabic 16#fca1
/tehjeemisolatedarabic 16#fc0b
/tehmarbutaarabic 16#0629
/tehmarbutafinalarabic 16#fe94
/tehmedialarabic 16#fe98
/tehmeeminitialarabic 16#fca4
/tehmeemisolatedarabic 16#fc0e
/tehnoonfinalarabic 16#fc73
/tekatakana 16#30c6
/tekatakanahalfwidth 16#ff83
/telephone 16#2121
/telephoneblack 16#260e
/telishagedolahebrew 16#05a0
/telishaqetanahebrew 16#05a9
/tencircle 16#2469
/tenideographicparen 16#3229
/tenparen 16#247d
/tenperiod 16#2491
/tenroman 16#2179
/tesh 16#02a7
/tet 16#05d8
/tetdagesh 16#fb38
/tetdageshhebrew 16#fb38
/tethebrew 16#05d8
/tetsecyrillic 16#04b5
/tevirhebrew 16#059b
/tevirlefthebrew 16#059b
/thabengali 16#09a5
/thadeva 16#0925
/thagujarati 16#0aa5
/thagurmukhi 16#0a25
/thalarabic 16#0630
/thalfinalarabic 16#feac
/thanthakhatlowleftthai 16#f898
/thanthakhatlowrightthai 16#f897
/thanthakhatthai 16#0e4c
/thanthakhatupperleftthai 16#f896
/theharabic 16#062b
/thehfinalarabic 16#fe9a
/thehinitialarabic 16#fe9b
/thehmedialarabic 16#fe9c
/thereexists 16#2203
/therefore 16#2234
/theta 16#03b8
/theta1 16#03d1
/thetasymbolgreek 16#03d1
/thieuthacirclekorean 16#3279
/thieuthaparenkorean 16#3219
/thieuthcirclekorean 16#326b
/thieuthkorean 16#314c
/thieuthparenkorean 16#320b
/thirteencircle 16#246c
/thirteenparen 16#2480
/thirteenperiod 16#2494
/thonangmonthothai 16#0e11
/thook 16#01ad
/thophuthaothai 16#0e12
/thorn 16#00fe
/thothahanthai 16#0e17
/thothanthai 16#0e10
/thothongthai 16#0e18
/thothungthai 16#0e16
/thousandcyrillic 16#0482
/thousandsseparatorarabic 16#066c
/thousandsseparatorpersian 16#066c
/three 16#0033
/threearabic 16#0663
/threebengali 16#09e9
/threecircle 16#2462
/threecircleinversesansserif 16#278c
/threedeva 16#0969
/threeeighths 16#215c
/threegujarati 16#0ae9
/threegurmukhi 16#0a69
/threehackarabic 16#0663
/threehangzhou 16#3023
/threeideographicparen 16#3222
/threeinferior 16#2083
/threemonospace 16#ff13
/threenumeratorbengali 16#09f6
/threeoldstyle 16#f733
/threeparen 16#2476
/threeperiod 16#248a
/threepersian 16#06f3
/threequarters 16#00be
/threequartersemdash 16#f6de
/threeroman 16#2172
/threesuperior 16#00b3
/threethai 16#0e53
/thzsquare 16#3394
/tihiragana 16#3061
/tikatakana 16#30c1
/tikatakanahalfwidth 16#ff81
/tikeutacirclekorean 16#3270
/tikeutaparenkorean 16#3210
/tikeutcirclekorean 16#3262
/tikeutkorean 16#3137
/tikeutparenkorean 16#3202
/tilde 16#02dc
/tildebelowcmb 16#0330
/tildecmb 16#0303
/tildecomb 16#0303
/tildedoublecmb 16#0360
/tildeoperator 16#223c
/tildeoverlaycmb 16#0334
/tildeverticalcmb 16#033e
/timescircle 16#2297
/tipehahebrew 16#0596
/tipehalefthebrew 16#0596
/tippigurmukhi 16#0a70
/titlocyrilliccmb 16#0483
/tiwnarmenian 16#057f
/tlinebelow 16#1e6f
/tmonospace 16#ff54
/toarmenian 16#0569
/tohiragana 16#3068
/tokatakana 16#30c8
/tokatakanahalfwidth 16#ff84
/tonebarextrahighmod 16#02e5
/tonebarextralowmod 16#02e9
/tonebarhighmod 16#02e6
/tonebarlowmod 16#02e8
/tonebarmidmod 16#02e7
/tonefive 16#01bd
/tonesix 16#0185
/tonetwo 16#01a8
/tonos 16#0384
/tonsquare 16#3327
/topatakthai 16#0e0f
/tortoiseshellbracketleft 16#3014
/tortoiseshellbracketleftsmall 16#fe5d
/tortoiseshellbracketleftvertical 16#fe39
/tortoiseshellbracketright 16#3015
/tortoiseshellbracketrightsmall 16#fe5e
/tortoiseshellbracketrightvertical 16#fe3a
/totaothai 16#0e15
/tpalatalhook 16#01ab
/tparen 16#24af
/trademark 16#2122
/trademarksans 16#f8ea
/trademarkserif 16#f6db
/tretroflexhook 16#0288
/triagdn 16#25bc
/triaglf 16#25c4
/triagrt 16#25ba
/triagup 16#25b2
/ts 16#02a6
/tsadi 16#05e6
/tsadidagesh 16#fb46
/tsadidageshhebrew 16#fb46
/tsadihebrew 16#05e6
/tsecyrillic 16#0446
/tsere 16#05b5
/tsere12 16#05b5
/tsere1e 16#05b5
/tsere2b 16#05b5
/tserehebrew 16#05b5
/tserenarrowhebrew 16#05b5
/tserequarterhebrew 16#05b5
/tserewidehebrew 16#05b5
/tshecyrillic 16#045b
/tsuperior 16#f6f3
/ttabengali 16#099f
/ttadeva 16#091f
/ttagujarati 16#0a9f
/ttagurmukhi 16#0a1f
/tteharabic 16#0679
/ttehfinalarabic 16#fb67
/ttehinitialarabic 16#fb68
/ttehmedialarabic 16#fb69
/tthabengali 16#09a0
/tthadeva 16#0920
/tthagujarati 16#0aa0
/tthagurmukhi 16#0a20
/tturned 16#0287
/tuhiragana 16#3064
/tukatakana 16#30c4
/tukatakanahalfwidth 16#ff82
/tusmallhiragana 16#3063
/tusmallkatakana 16#30c3
/tusmallkatakanahalfwidth 16#ff6f
/twelvecircle 16#246b
/twelveparen 16#247f
/twelveperiod 16#2493
/twelveroman 16#217b
/twentycircle 16#2473
/twentyhangzhou 16#5344
/twentyparen 16#2487
/twentyperiod 16#249b
/two 16#0032
/twoarabic 16#0662
/twobengali 16#09e8
/twocircle 16#2461
/twocircleinversesansserif 16#278b
/twodeva 16#0968
/twodotenleader 16#2025
/twodotleader 16#2025
/twodotleadervertical 16#fe30
/twogujarati 16#0ae8
/twogurmukhi 16#0a68
/twohackarabic 16#0662
/twohangzhou 16#3022
/twoideographicparen 16#3221
/twoinferior 16#2082
/twomonospace 16#ff12
/twonumeratorbengali 16#09f5
/twooldstyle 16#f732
/twoparen 16#2475
/twoperiod 16#2489
/twopersian 16#06f2
/tworoman 16#2171
/twostroke 16#01bb
/twosuperior 16#00b2
/twothai 16#0e52
/twothirds 16#2154
/u 16#0075
/uacute 16#00fa
/ubar 16#0289
/ubengali 16#0989
/ubopomofo 16#3128
/ubreve 16#016d
/ucaron 16#01d4
/ucircle 16#24e4
/ucircumflex 16#00fb
/ucircumflexbelow 16#1e77
/ucyrillic 16#0443
/udattadeva 16#0951
/udblacute 16#0171
/udblgrave 16#0215
/udeva 16#0909
/udieresis 16#00fc
/udieresisacute 16#01d8
/udieresisbelow 16#1e73
/udieresiscaron 16#01da
/udieresiscyrillic 16#04f1
/udieresisgrave 16#01dc
/udieresismacron 16#01d6
/udotbelow 16#1ee5
/ugrave 16#00f9
/ugujarati 16#0a89
/ugurmukhi 16#0a09
/uhiragana 16#3046
/uhookabove 16#1ee7
/uhorn 16#01b0
/uhornacute 16#1ee9
/uhorndotbelow 16#1ef1
/uhorngrave 16#1eeb
/uhornhookabove 16#1eed
/uhorntilde 16#1eef
/uhungarumlaut 16#0171
/uhungarumlautcyrillic 16#04f3
/uinvertedbreve 16#0217
/ukatakana 16#30a6
/ukatakanahalfwidth 16#ff73
/ukcyrillic 16#0479
/ukorean 16#315c
/umacron 16#016b
/umacroncyrillic 16#04ef
/umacrondieresis 16#1e7b
/umatragurmukhi 16#0a41
/umonospace 16#ff55
/underscore 16#005f
/underscoredbl 16#2017
/underscoremonospace 16#ff3f
/underscorevertical 16#fe33
/underscorewavy 16#fe4f
/union 16#222a
/universal 16#2200
/uogonek 16#0173
/uparen 16#24b0
/upblock 16#2580
/upperdothebrew 16#05c4
/upsilon 16#03c5
/upsilondieresis 16#03cb
/upsilondieresistonos 16#03b0
/upsilonlatin 16#028a
/upsilontonos 16#03cd
/uptackbelowcmb 16#031d
/uptackmod 16#02d4
/uragurmukhi 16#0a73
/uring 16#016f
/ushortcyrillic 16#045e
/usmallhiragana 16#3045
/usmallkatakana 16#30a5
/usmallkatakanahalfwidth 16#ff69
/ustraightcyrillic 16#04af
/ustraightstrokecyrillic 16#04b1
/utilde 16#0169
/utildeacute 16#1e79
/utildebelow 16#1e75
/uubengali 16#098a
/uudeva 16#090a
/uugujarati 16#0a8a
/uugurmukhi 16#0a0a
/uumatragurmukhi 16#0a42
/uuvowelsignbengali 16#09c2
/uuvowelsigndeva 16#0942
/uuvowelsigngujarati 16#0ac2
/uvowelsignbengali 16#09c1
/uvowelsigndeva 16#0941
/uvowelsigngujarati 16#0ac1
/v 16#0076
/vadeva 16#0935
/vagujarati 16#0ab5
/vagurmukhi 16#0a35
/vakatakana 16#30f7
/vav 16#05d5
/vavdagesh 16#fb35
/vavdagesh65 16#fb35
/vavdageshhebrew 16#fb35
/vavhebrew 16#05d5
/vavholam 16#fb4b
/vavholamhebrew 16#fb4b
/vavvavhebrew 16#05f0
/vavyodhebrew 16#05f1
/vcircle 16#24e5
/vdotbelow 16#1e7f
/vecyrillic 16#0432
/veharabic 16#06a4
/vehfinalarabic 16#fb6b
/vehinitialarabic 16#fb6c
/vehmedialarabic 16#fb6d
/vekatakana 16#30f9
/venus 16#2640
/verticalbar 16#007c
/verticallineabovecmb 16#030d
/verticallinebelowcmb 16#0329
/verticallinelowmod 16#02cc
/verticallinemod 16#02c8
/vewarmenian 16#057e
/vhook 16#028b
/vikatakana 16#30f8
/viramabengali 16#09cd
/viramadeva 16#094d
/viramagujarati 16#0acd
/visargabengali 16#0983
/visargadeva 16#0903
/visargagujarati 16#0a83
/vmonospace 16#ff56
/voarmenian 16#0578
/voicediterationhiragana 16#309e
/voicediterationkatakana 16#30fe
/voicedmarkkana 16#309b
/voicedmarkkanahalfwidth 16#ff9e
/vokatakana 16#30fa
/vparen 16#24b1
/vtilde 16#1e7d
/vturned 16#028c
/vuhiragana 16#3094
/vukatakana 16#30f4
/w 16#0077
/wacute 16#1e83
/waekorean 16#3159
/wahiragana 16#308f
/wakatakana 16#30ef
/wakatakanahalfwidth 16#ff9c
/wakorean 16#3158
/wasmallhiragana 16#308e
/wasmallkatakana 16#30ee
/wattosquare 16#3357
/wavedash 16#301c
/wavyunderscorevertical 16#fe34
/wawarabic 16#0648
/wawfinalarabic 16#feee
/wawhamzaabovearabic 16#0624
/wawhamzaabovefinalarabic 16#fe86
/wbsquare 16#33dd
/wcircle 16#24e6
/wcircumflex 16#0175
/wdieresis 16#1e85
/wdotaccent 16#1e87
/wdotbelow 16#1e89
/wehiragana 16#3091
/weierstrass 16#2118
/wekatakana 16#30f1
/wekorean 16#315e
/weokorean 16#315d
/wgrave 16#1e81
/whitebullet 16#25e6
/whitecircle 16#25cb
/whitecircleinverse 16#25d9
/whitecornerbracketleft 16#300e
/whitecornerbracketleftvertical 16#fe43
/whitecornerbracketright 16#300f
/whitecornerbracketrightvertical 16#fe44
/whitediamond 16#25c7
/whitediamondcontainingblacksmalldiamond 16#25c8
/whitedownpointingsmalltriangle 16#25bf
/whitedownpointingtriangle 16#25bd
/whiteleftpointingsmalltriangle 16#25c3
/whiteleftpointingtriangle 16#25c1
/whitelenticularbracketleft 16#3016
/whitelenticularbracketright 16#3017
/whiterightpointingsmalltriangle 16#25b9
/whiterightpointingtriangle 16#25b7
/whitesmallsquare 16#25ab
/whitesmilingface 16#263a
/whitesquare 16#25a1
/whitestar 16#2606
/whitetelephone 16#260f
/whitetortoiseshellbracketleft 16#3018
/whitetortoiseshellbracketright 16#3019
/whiteuppointingsmalltriangle 16#25b5
/whiteuppointingtriangle 16#25b3
/wihiragana 16#3090
/wikatakana 16#30f0
/wikorean 16#315f
/wmonospace 16#ff57
/wohiragana 16#3092
/wokatakana 16#30f2
/wokatakanahalfwidth 16#ff66
/won 16#20a9
/wonmonospace 16#ffe6
/wowaenthai 16#0e27
/wparen 16#24b2
/wring 16#1e98
/wsuperior 16#02b7
/wturned 16#028d
/wynn 16#01bf
/x 16#0078
/xabovecmb 16#033d
/xbopomofo 16#3112
/xcircle 16#24e7
/xdieresis 16#1e8d
/xdotaccent 16#1e8b
/xeharmenian 16#056d
/xi 16#03be
/xmonospace 16#ff58
/xparen 16#24b3
/xsuperior 16#02e3
/y 16#0079
/yaadosquare 16#334e
/yabengali 16#09af
/yacute 16#00fd
/yadeva 16#092f
/yaekorean 16#3152
/yagujarati 16#0aaf
/yagurmukhi 16#0a2f
/yahiragana 16#3084
/yakatakana 16#30e4
/yakatakanahalfwidth 16#ff94
/yakorean 16#3151
/yamakkanthai 16#0e4e
/yasmallhiragana 16#3083
/yasmallkatakana 16#30e3
/yasmallkatakanahalfwidth 16#ff6c
/yatcyrillic 16#0463
/ycircle 16#24e8
/ycircumflex 16#0177
/ydieresis 16#00ff
/ydotaccent 16#1e8f
/ydotbelow 16#1ef5
/yeharabic 16#064a
/yehbarreearabic 16#06d2
/yehbarreefinalarabic 16#fbaf
/yehfinalarabic 16#fef2
/yehhamzaabovearabic 16#0626
/yehhamzaabovefinalarabic 16#fe8a
/yehhamzaaboveinitialarabic 16#fe8b
/yehhamzaabovemedialarabic 16#fe8c
/yehinitialarabic 16#fef3
/yehmedialarabic 16#fef4
/yehmeeminitialarabic 16#fcdd
/yehmeemisolatedarabic 16#fc58
/yehnoonfinalarabic 16#fc94
/yehthreedotsbelowarabic 16#06d1
/yekorean 16#3156
/yen 16#00a5
/yenmonospace 16#ffe5
/yeokorean 16#3155
/yeorinhieuhkorean 16#3186
/yerahbenyomohebrew 16#05aa
/yerahbenyomolefthebrew 16#05aa
/yericyrillic 16#044b
/yerudieresiscyrillic 16#04f9
/yesieungkorean 16#3181
/yesieungpansioskorean 16#3183
/yesieungsioskorean 16#3182
/yetivhebrew 16#059a
/ygrave 16#1ef3
/yhook 16#01b4
/yhookabove 16#1ef7
/yiarmenian 16#0575
/yicyrillic 16#0457
/yikorean 16#3162
/yinyang 16#262f
/yiwnarmenian 16#0582
/ymonospace 16#ff59
/yod 16#05d9
/yoddagesh 16#fb39
/yoddageshhebrew 16#fb39
/yodhebrew 16#05d9
/yodyodhebrew 16#05f2
/yodyodpatahhebrew 16#fb1f
/yohiragana 16#3088
/yoikorean 16#3189
/yokatakana 16#30e8
/yokatakanahalfwidth 16#ff96
/yokorean 16#315b
/yosmallhiragana 16#3087
/yosmallkatakana 16#30e7
/yosmallkatakanahalfwidth 16#ff6e
/yotgreek 16#03f3
/yoyaekorean 16#3188
/yoyakorean 16#3187
/yoyakthai 16#0e22
/yoyingthai 16#0e0d
/yparen 16#24b4
/ypogegrammeni 16#037a
/ypogegrammenigreekcmb 16#0345
/yr 16#01a6
/yring 16#1e99
/ysuperior 16#02b8
/ytilde 16#1ef9
/yturned 16#028e
/yuhiragana 16#3086
/yuikorean 16#318c
/yukatakana 16#30e6
/yukatakanahalfwidth 16#ff95
/yukorean 16#3160
/yusbigcyrillic 16#046b
/yusbigiotifiedcyrillic 16#046d
/yuslittlecyrillic 16#0467
/yuslittleiotifiedcyrillic 16#0469
/yusmallhiragana 16#3085
/yusmallkatakana 16#30e5
/yusmallkatakanahalfwidth 16#ff6d
/yuyekorean 16#318b
/yuyeokorean 16#318a
/yyabengali 16#09df
/yyadeva 16#095f
/z 16#007a
/zaarmenian 16#0566
/zacute 16#017a
/zadeva 16#095b
/zagurmukhi 16#0a5b
/zaharabic 16#0638
/zahfinalarabic 16#fec6
/zahinitialarabic 16#fec7
/zahiragana 16#3056
/zahmedialarabic 16#fec8
/zainarabic 16#0632
/zainfinalarabic 16#feb0
/zakatakana 16#30b6
/zaqefgadolhebrew 16#0595
/zaqefqatanhebrew 16#0594
/zarqahebrew 16#0598
/zayin 16#05d6
/zayindagesh 16#fb36
/zayindageshhebrew 16#fb36
/zayinhebrew 16#05d6
/zbopomofo 16#3117
/zcaron 16#017e
/zcircle 16#24e9
/zcircumflex 16#1e91
/zcurl 16#0291
/zdot 16#017c
/zdotaccent 16#017c
/zdotbelow 16#1e93
/zecyrillic 16#0437
/zedescendercyrillic 16#0499
/zedieresiscyrillic 16#04df
/zehiragana 16#305c
/zekatakana 16#30bc
/zero 16#0030
/zeroarabic 16#0660
/zerobengali 16#09e6
/zerodeva 16#0966
/zerogujarati 16#0ae6
/zerogurmukhi 16#0a66
/zerohackarabic 16#0660
/zeroinferior 16#2080
/zeromonospace 16#ff10
/zerooldstyle 16#f730
/zeropersian 16#06f0
/zerosuperior 16#2070
/zerothai 16#0e50
/zerowidthjoiner 16#feff
/zerowidthnonjoiner 16#200c
/zerowidthspace 16#200b
/zeta 16#03b6
/zhbopomofo 16#3113
/zhearmenian 16#056a
/zhebrevecyrillic 16#04c2
/zhecyrillic 16#0436
/zhedescendercyrillic 16#0497
/zhedieresiscyrillic 16#04dd
/zihiragana 16#3058
/zikatakana 16#30b8
/zinorhebrew 16#05ae
/zlinebelow 16#1e95
/zmonospace 16#ff5a
/zohiragana 16#305e
/zokatakana 16#30be
/zparen 16#24b5
/zretroflexhook 16#0290
/zstroke 16#01b6
/zuhiragana 16#305a
/zukatakana 16#30ba
.dicttomark readonly def
/currentglobal where
{pop currentglobal{setglobal}true setglobal}
{{}}
ifelse
/MacRomanEncoding .findencoding
/MacGlyphEncoding
/.notdef/.null/CR
4 index 32 95 getinterval aload pop
99 index 128 45 getinterval aload pop
/notequal/AE
/Oslash/infinity/plusminus/lessequal/greaterequal
/yen/mu1/partialdiff/summation/product
/pi/integral/ordfeminine/ordmasculine/Ohm
/ae/oslash/questiondown/exclamdown/logicalnot
/radical/florin/approxequal/increment/guillemotleft
/guillemotright/ellipsis/nbspace
174 index 203 12 getinterval aload pop
/lozenge
187 index 216 24 getinterval aload pop
/applelogo
212 index 241 7 getinterval aload pop
/overscore
220 index 249 7 getinterval aload pop
/Lslash/lslash/Scaron/scaron
/Zcaron/zcaron/brokenbar/Eth/eth
/Yacute/yacute/Thorn/thorn/minus
/multiply/onesuperior/twosuperior/threesuperior/onehalf
/onequarter/threequarters/franc/Gbreve/gbreve
/Idotaccent/Scedilla/scedilla/Cacute/cacute
/Ccaron/ccaron/dmacron
260 -1 roll pop
258 packedarray
7 1 index .registerencoding
.defineencoding
exec

%%BeginResource: font (PDF Font obj_19)
19 0 obj
<</R17
17 0 R/R15
15 0 R/R11
11 0 R/R9
9 0 R/R7
7 0 R/R13
13 0 R>>
endobj
%%EndResource
%%BeginResource: file (PDF CharProc obj_6)
6 0 obj
<</Filter[/ASCII85Decode
/LZWDecode]/Length 32>>stream
J.)Pl,9Xc90Gb-%0K<Se'b(]kc(M!@~>
endstream
endobj
%%EndResource
%%BeginResource: font (PDF Font obj_17)
17 0 obj
<</BaseFont/WDELFF+CMR8/FontDescriptor 18 0 R/Type/Font
/FirstChar 48/LastChar 52/Widths[
531 531 531 531 531]
/Subtype/Type1>>
endobj
%%EndResource
%%BeginResource: font (PDF Font obj_15)
15 0 obj
<</BaseFont/YNRCJC+CMSY8/FontDescriptor 16 0 R/Type/Font
/FirstChar 0/LastChar 0/Widths[
826]
/Encoding 26 0 R/Subtype/Type1>>
endobj
%%EndResource
%%BeginResource: encoding (PDF Encoding obj_26)
26 0 obj
<</Type/Encoding/Differences[
0/minus]>>
endobj
%%EndResource
%%BeginResource: font (PDF Font obj_11)
11 0 obj
<</BaseFont/JBACBB+CMMI12/FontDescriptor 12 0 R/Type/Font
/FirstChar 58/LastChar 58/Widths[ 271]
/Encoding 27 0 R/Subtype/Type1>>
endobj
%%EndResource
%%BeginResource: encoding (PDF Encoding obj_27)
27 0 obj
<</Type/Encoding/Differences[
58/period]>>
endobj
%%EndResource
%%BeginResource: font (PDF Font obj_9)
9 0 obj
<</BaseFont/EMHXUT+CMR12/FontDescriptor 10 0 R/Type/Font
/FirstChar 48/LastChar 53/Widths[
489 489 0 0 0 489]
/Subtype/Type1>>
endobj
%%EndResource
%%BeginResource: font (PDF Font obj_7)
7 0 obj
<</BaseFont/PPNELS+CMSY10/FontDescriptor 8 0 R/Type/Font
/FirstChar 0/LastChar 0/Widths[
777]
/Encoding 28 0 R/Subtype/Type1>>
endobj
%%EndResource
%%BeginResource: encoding (PDF Encoding obj_28)
28 0 obj
<</Type/Encoding/Differences[
0/minus]>>
endobj
%%EndResource
%%BeginResource: font (PDF Font obj_13)
13 0 obj
<</BaseFont/ZWREBS+CenturySchL-Roma/FontDescriptor 14 0 R/Type/Font
/FirstChar 45/LastChar 122/Widths[ 333 278 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 667 0 833 407 0 0 0 0 0 778
667 0 0 630 667 0 0 0 0 0 0 333 0 333 0 0
0 556 0 444 574 500 333 0 611 315 0 0 315 889 611 500
574 556 444 463 389 611 0 0 0 537 481]
/Subtype/Type1>>
endobj
%%EndResource
%%BeginResource: file (PDF FontDescriptor obj_18)
18 0 obj
<</Type/FontDescriptor/FontName/WDELFF+CMR8/FontBBox[0 -21 500 675]/Flags 65568
/Ascent 675
/CapHeight 675
/Descent -21
/ItalicAngle 0
/StemV 75
/MissingWidth 500
/CharSet(/four/one/three/two/zero)/FontFile 20 0 R>>
endobj
%%EndResource
%%BeginResource: file (PDF FontFile obj_20)
20 0 obj
<</Filter[/ASCII85Decode
/LZWDecode]
/Length1 615
/Length2 2910
/Length3 533/Length 3287>>stream
J-eUh@sPTJ<'6ZZUCh1X>VI0(#\;AFi"Rm_L^]$%):1WX17?B6i)%,o"sf[s`pj&[2&qYp%]9U1
L.<O;)pXS`."G,]2k1C+,>"EQ*\Id.A\gof@Q>Ef`I\,P^gK/6&5B$*+cO9U&/._b6U?sk@u_C#
Jc_@Q`b@3!%jD?Onr@fO%Y`p6^%>Q<2Oqb+o9#Pk9W=T-2F.@7b&a^+N2AlDSifc`:L\<@FYq0N
1J(-i"%f`gR'"]5#1J.Ql!1H^oB.?AHU4AeRgkgCm/ACmgLs9Xm%MMC@5:,jdB1'M$?Y,1"o5FD
1I<`=RuD\C)4mca)[Hj",E[ZM$5c^Ro&JM;8"VmL%&\^qUSKM$::'(k#.3SXKF(cA"XZg6B^1<3
d^YT-cm!'5#)^3&Ju>hh$C8@KGj%6*NH?//#,oa&1cWj`4U["<PGFJ(UQbQc36jmU\\DtpT!8c_
,N:;0#^Ba9]eU"E+9V^q\e%=`8DN=HY&Xpo#X`su4b]T!_A7klX3qi>!P?c!b>8>*)7n5$%"od"
<153D.2i\LVlrd_.E<ZXehW-C8BAeG9t84Z\B$E`NkS72'gK?k)!Eb4WT_M#N2%4(,6hU*DBfB0
R#E5D!YAreL>iJX*!QGZD+k08OG"MX6)\NA#_EUq,6gIl>tfu=Li4i#J]rQeL2sM.=,-gtMBN7I
W/(T_6*P#@#\"@&(l#mEC`<Rf+D`#%Tu^a`L4UOU+c)hRMc0nU*B#$q+u!qLeZ+F5+GM&)CG6$f
c"/I4Ji0/u#bY,4?!P4bRs#&\\7^-oJ\Yo(L/rPY:K+]EdN%!1Li$:&_?bd%93AuL>u\4.@Ns\g
QkaFB2Rm9?L4Oke)V[*E6Y_?9Lh2?s!N$VTeR=8i)-!#[@;a^@VBQuc@Amia#[run+]d<IEZ+sE
^i+DNJf'>GLr'U$CkgOV\foNH1,2LXTtNu?L,sjD*,FOVL9"Z:e:5&IFJss#k^k,_)r-m<@&h^#
&7otg@EsBHgQu<'O&NNYdoU0>AW=7kG?**bi?A^mKl/`WBl]sDVG8'922\OR@ptD9N-1L^Wt<j)
G]"AKFnLh7Lc/;1_tZCN?_RbQm;*[FiY0_geiBW-T52:qH5U"tm6DYIQ0l\.L*!4Ob\Pl1MbW10
i/!>+i[,DP!Eo(s?-CdbTHMh:Y!/lK2`8D:=&;2!m3to>`VRWG?oA4hERTRf4O[Jt=pH2""Y!LY
%2on'</rhk/]QeM?4/ClN;ZYN##O-H0Jlt8Q$O/<kdO^Y7W*)lVl\HMWPPn2=3?ApTQ#dc)B^sC
n0f,)E,sQnbVEr!BhX.lXLFII$X>9W=M,C@%A(?l#TtQk/!+SoP(5?35m;#/2+"@q9DDTuTjodB
e<XJTc!Bi:*%s`GPTgb%DrjE''bD&ggA!I'OH!P]TS/[C!(C8^2AJXCG-)Ke3!dk[W&=7Lg6##9
A8@TJ6o?a0(%=*^5fn"(-`g=6M[`e5Bo/r=-4O2mSW&_'jK6s?XHtElM!KnQaE"#cQG_:#Z2);W
-=II:Z=!lS<D1-:gu<o:?O4p/)QJmPggCh[JTFQC`FZj&=ISlNmO`&RF3u8('3b\sFeUqtC=?5,
BP2)`)5),hQ@^$JH%=.O\HPIYMS.5Y@)aZP7`<^(S*4eX2,#^sL58.<WJg;3<@Sm<,aK9,;iD>2
\@.X6eT3E;9@8Ep?u%%?$U7ao\iD]-EsU>8RUIj(VlUdnZXk?l8*n)4XH8<a-C`Y\O)](q(3:%]
g>Z(KTr-<3ZI>8jok$i3r("a)6_]I*;pG\b/p>gU<U-oTN(b-a<Aapudn3ZA!L();Kg](6V-NID
?.S[i!n@'CR`]c`ZUgV:faB3F;IW'IFdC+rqn*3M_Ip+b@m;":DHrB2ou6Wi/03JaC'rP2[qYW=
Rt[5D;2J?+n7&CsSO[6(.Nq^pPhMOoY#qZGS[!dI"P\PGRW8I$-0<GG'[]`i.oB"o<F\%g3hU4>
L#">l#c4#5AQRC[;`1u&i0im,6n2o84I4dKB"Za,b?]<CG7LG/W'Y3^eRYe9P.HoX%(oH":U\e<
6rfu=,7e4eXX8e(fJ;;elZ#ZM[_B'hijERgmLccQW7tu3-S"DL9Z5UlO4Q*`<m+?;Xu?X?*BV@m
XrUD.E/Xji$oqPu*A9R6,4f:Y6=stlYc;^u6t4$p@i&">/IN@M<204h/%'H'KsJ$=K\*JHnU@[,
hSGOP79Rj[BuWRo_dl]^Xm<Zg2RSLE(Y`.rp+9/n34XL;qW<n+`XT#75@Kg\jd$7E>:[Zrs-\aN
=D7Z3Wg2)K<r0L-WlcqJBY=B].h5`2V.2*8*geS_(j,0D<SS3@X.)He?d-@&/`fU&d^%DndS3Oj
[E>D<A3X[c\Xfd$@,:32Q!5q:_DD[R(Y9rt#W(aq\AgG7fi.ZVG>aL&.YP[u'oSOPnW0ZW0$[r?
Is\5"HGuhadG/%JED!?1490G[+rjujNPTcs2mFOeOl0gAP!CutMQL;siDV?)`]G^!a4pKN[?M6'
auHc:Q:-VDF3V40`3SBoN7Ed1M4ZZ5]"?Vedp4MA>1'=?2.P5>!Dsm.[P3Q@o]ml*Y45X^-'Ei3
F0SWK91h_\Z#Ge^d:)W9at3=p&RsIlEGJ]S7eW;`>=,Ajl]):C"LWB?P3Rdd7>*>W:IJ>(r`k@Y
U!Lc'.,2.jHm'*a.[OSq*_T:F9M/Tte@<HG#-<PX6$P^Teq)S_e'd[t/[2'?aOW^F?14oi;5MMg
2H%4o.jg<T4onHE*ZoD9]u<W4\@*g5(TKo)CR#:66tV=FDVct#2.!fe(+T$MnWCd_7XVXR*7ndK
79MNX/@QFEp/<DTNnN(9nQ-AP<KJ[PZSpaLBNs8K^s?;g(P9(nK;XO+:31[T39+"::f<1O)`&d&
W)VcHC!m<YZjRqj'YRF\c74%<:"':oIA`<H*Ne)L@'DHX]jq%E>8;:pW7u'pFRM#C/gd=@WKot'
<esH#<?rbO#JtIM5'R5pDT,X+VS6"VKODtu?V2eRl?oDgXDW\$="?J'VM>2-R-/+FMh\10k0RcG
(7Jp@@VcnAj^MKW[V^^^`oZbp#Cp\@I!oRHXlZ5!,tqsEA9m<><N"Vo7C^3'eHZ=!b_2Wn74`EA
7VB[u<_!XH$H2,jCjUlI>6qqIBB!,dS98AR_.DbQBUjE]HsC>qeY8Y.,rAY;HrC8f[0!H?nF7#C
oac$;&$Z!Cck-fY"V>Y[&5`N@Yn7R&#8$D?&[<>dnJMr/,nU_6&ofK6nLG7B2%NP?'6-,="V(uo
NXe><%H>YC5h5s&!W~>
endstream
endobj
%%EndResource
%%BeginResource: file (PDF FontDescriptor obj_16)
16 0 obj
<</Type/FontDescriptor/FontName/YNRCJC+CMSY8/FontBBox[0 0 737 273]/Flags 4
/Ascent 273
/CapHeight 273
/Descent 0
/ItalicAngle 0
/StemV 110
/MissingWidth 500
/CharSet(/minus)/FontFile 21 0 R>>
endobj
%%EndResource
%%BeginResource: file (PDF FontFile obj_21)
21 0 obj
<</Filter[/ASCII85Decode
/LZWDecode]
/Length1 552
/Length2 1377
/Length3 533/Length 1961>>stream
J-eUh@sPTJ<'6ZZUCh1X>VI0(#\;AOA8hkmN'mk;8W;jU0c<[IPAhpW"G7=]`aa7DCE&;Sb_K,M
JjgrK'920Gl'+F]+e-a^PEDZdBTJJ`"u>,45VX7=7cM5aaC$\AL^5?V/JQ352[B_e';;)AD6cZ*
-G]^VhIAC1:5=r8.!\?E*!\h#H/AHO0UkgHj*A_k5,Qj?k*mcLUh)R<:<$3TJl*U;?t[kHW8LrV
1)Wd6@Q"A;CcpiqPPPTmi,q(^Ce"@0aPEN:Bb%#XAu^8EMFFum1F]pcE\a"UOBk7mF!lR12o5TE
E\5SaMo_dU*n!SlWf9Kb!t!'0@6B-r'`STSpDT3.:BCVIi5THq$]WWK$(+!0Ne?O\Q4?/XAt$DA
GhS;jURV88!DZ"Hjt;_\8Ed-bU5Jc)@=fO;,>VQ5&&]Uk?nR*DPEn-fYd:!T#XT*Zq2\rtB(^kO
aD.':+i7P)L>g>['gdr!/qY;Q;qVro!t%SOTdfTb(CG-.hDL7d\C*,eZC>khNit6r3[9IPki2\B
"N5p$brU5-^8!*r"UMr3MAqAfaCZY&Tn%e6LgdfF*!ZLpE#VRr^gnSmJeWAO#_EUq,6gIkG<H-r
Li+(7U*+Lg#bdVt)[7IaKH(4@."ibh_B9O9#/QsG+c&H5@N,S]Y\Y25J[BeEL-`=_+pJ)cMAZ],
3/Sm*Jd?BA#5,ADW<ND0@Mr(;\8!4C1luGh#_FpF6AV:5`D'J9`F3Bb+h20$#_Bd(9nlZ0NBbb>
NKtR96)FBK>s\gL:tta&ED99Z=CNK/QDbO(fQGPO+GPGtAfB9bW,#Un@?)fT?=CW`GDJ(`@Nl"U
/h.\BZd<;&?D5/h)MWhtL)Ehi'ePm[+eTMh80Tm<+c)C;N$-Mji,)q7U)`eM,;\7m)pl+_D4tX;
+GQrOQM`uf>W7q7Iq9fMarB!d\6u@5&VtHI=^j7hJVJ`a9:9Er+CqG&eM`L/gA:k[?3`JYm82E^
mC"2CpFqCA=ui6c&6???F+NG\QAJgcR5f41hp]P_<U3X2:JGV*7T!:BTsSs94ASu6,@"H]?U\)V
/Y,$/\otS&=s8W.)dF*mDcqf6*T'SG@Le_k#W\Q8)HcWfN!0F_0Oc2(@CiY_WnJ0d,)3r_CIR!V
c<l`hZd(-t;`l(#=U$^j2>bn4'odbM+Ad[;ftu?]D[B4Q2.EC$P/gJDZlk#l[]LHWK2E(hUbi9p
&4.;B#41T9Y]`:XPraOp^sWFceo9Xj'9?\#5U&Gc+NtmrEdNZEWNMNL$XV#l;sQH[KI5Qq&__=V
8i_e][GJqI,LL03$,*+r>.5I()-La'\19EZNSAcQCM;NHWjTA.<]CFh0==A'fGs]R,+`A)SWk]B
0!&B22e`V1>qdRD%%LeD4A6d_a,%g`)hPJ1m+%RRerHuO1:qmKILVQrhRu6,%VBP-o!ej<n=-GI
<aalK]EnA)hO9U'@)_I877Q>UR]qr,iYM]>@g6)SY#?qfUWV\;UgEYO;rGo(Ws2t-<ni75$:H%f
W.)?E[(_MPJ[_PBYd.=Ca&-K*+XpK#e!)'.<riK`-Zjb0e%6Z!9s%ZQ(]"_CUWm+[jhNJq36`2l
SnVqr`[p8LeD2pl.gk6.9[t8oUl[BrM@Fb^kPW$SZJq@2STpES%]AA\\jo@5W$2Cq[?P`?<GMn.
"%Fu9?C3NYblQ/!AWQteUWHY2`BCOSMOtX.)H^\/=MB(/gm8+R:bK<l44UA"650B2N5-;\a83lC
/;Ihr=]21f:n?*&b?"2%@&Xl9T9Rbh<%@qc.i0:.Ul(+K"[K.K_CiIb@Zt9Db,[%jFN,AZ[X2a,
+>@qad;%#d;Q^Jm\[WWs!M_#5/;buCeR6"alfD&qbk2]t*FnGiOg8"_b#qpt@r/Q@ZW:tffo%k'
m0/rbeqVUV>9.DE26!qUU=EH%/Scq\Z*H:)fiq9\RR:N*%RJH#Q@S$7^ek+~>
endstream
endobj
%%EndResource
%%BeginResource: file (PDF FontDescriptor obj_12)
12 0 obj
<</Type/FontDescriptor/FontName/JBACBB+CMMI12/FontBBox[0 0 184 97]/Flags 65540
/Ascent 97
/CapHeight 97
/Descent 0
/ItalicAngle 0
/StemV 27
/MissingWidth 500
/CharSet(/period)/FontFile 22 0 R>>
endobj
%%EndResource
%%BeginResource: file (PDF FontFile obj_22)
22 0 obj
<</Filter[/ASCII85Decode
/LZWDecode]
/Length1 558
/Length2 1397
/Length3 533/Length 1983>>stream
J-eUh@sPTJ<'6ZZUCh1X>VI0(#\;@t,[rM4$q;EC+f*,"&/^A'F%NkU07lKH-K?hn5W+QlU]s2c
_F#Q2aiVQoUj1$)'G/OP"3JX4B/E-eJqFq[;BQg:7jE"]J7L>N%R^F5BpO]f0Um^udg=CJAN&4O
`Y2a1VJe2X9W(8!JsJNpSIPaqGeEKp(DolE0lakeB-1'PVfPS"5Z0A-lc3KaO?k=W'<kF1S5q6p
VjRsjBfR+8Bf7#R<S@T^g2K*D/(QM*Lu`I#kk(cO@C'$"TZ&+m/^BI#DTa#YV@t3k;]OUc+K%s/
J7"l+oJD0j.CdF+P*tUQ;6YSfE]Ft4+JFKVa"TZrjLQSOJBE*kRQA=GFRqmV":]nF5(j5Uj96le
Y\G.=aARuN^b(?VjZ/?AlMn5oR`IN<c`"8h+lS#2p;E(%7M#b*kWoP9UN<%93_1rX+V!n=p(iBr
fNK-sY@qA^##?Xc*l*nK/F>eQ1(].&d=@lDUo6<eT=qL[V[a0r=NW.R,9n3Y[mM"toJkm*3fh##
5SZ"ILbR'&-fZ`F15oU;N#@GF\;VD^@PEZV#XOi4)i,ZQE#8f\[.YID64dfR#,.uK+p^JbN#;oN
N;+7p+hW%D#;HdI)2;S(@n?n+aGM,HF23S8#XP\.)@0d`MAV)b(i1,q@N]J,#,0+K)hrqe?m1?"
OGcM_U)a(RLE\Ej>LEkG?m)39`.fIk1ou!I#h>IU,(WN94(SX3NM%DKiL"-n#_Bd(:BjgdNBki*
Q'r]E@AWclh'*,W;9-0(EDFmqBOW1?QFIZ9=LHdl+GPGtAfB:-\8,=T@?)fT?=CW`G6g$E@Nl"U
4t7CO2'?UZLB8<-)@42"K6u'-W,`dW6,7DPfE)nH8I30B)d\9M21d!tJhf2J#,/^@Nom&iEM82?
)R40MYnjOD:BDR8P_bYKDe*J.!+A2"6'[rXLH-c<?s3UQ"[H8bD'P*=oiA3,=k7E^FpKo.g)/OF
%?c\1(g(SsdYc+R)[J`iN/_iOATNjZb.bihns>;b?<rk9LQ9l1qP-Ode?q=@<->E[+R7@G#4bVM
Q((T\r#UeAFhBtK+U6o6cX5>0mZZVeER!0t<7Wa3=CS!N";ll@SO':^+dct@fUR@]A(3GRmNMoo
27OV#Q)8E8hGit!(tPD*dslpL'e)N#SfWXAe(T%l!81!I"i.&XbOeR\YTg1R=No9@^4=#TiBUdY
^QnZO"s>A_X9Ba'<<>O,WVdqjL+Ki8P,2H<?+?j=MQak%HtuJS?o1njgRP;Z.SC4PWuu0)9$<N2
5h0?HAtfl'UD*t`8`M1`3XsLUr_q"r6n[PHgsg*:;^a2u`._q7>.=o@b=UBP20'16UM`RUbri]G
9%+[S5Br(Q9"eh5V-0kM=UPY;/eoq]eEBA1lqprq2>j<-,4B44^`/PhK&"Mc_eI@$+\%4oOOVFX
#(Y>M_H.'R=IbjYD&K2Q0GLcm6c3CA^`nD5B-tI<=Xl\aPH)$U(`dBn;1RJrUR$YMeE]J8X)_B8
f-\66+?*Q.[2G+((t"Q^-%!d'42/^h_\h[EPAASZbLh9uR%!50&oK`c2bpa3,b/>gFn>cjM[Gbk
[S`#2<j>XsYZ44J#d5,F"(d4ofb-)9nKC@p5\?_B&t+5$m6A:L_@7]BS69XP\23=[b[>4BE36Z6
KLaD^Q/^S3Ck>9[U9M+-3TO3*JQTB?:9kd)n5cX<oL]9ZjeS']V"-[EYrB7ukmG.*0O7>j#&Kl6
YR4u>&UC@"rl,PmpK`YWK;f/A5#i$Z>A<5D8]PH>?"2G__%L4^22o']l\0ME&V6ku2R(g9_beR.
>L7U5ZIRDKU'+cU.Q$k)*.5"mJJhgrQ>4D!'(9E"<Ck53<6s3tZ[4P)9!%2hWt/W@ZW:th=kc)P
m002j(1trt>>8i!/YociY1?cl<GQH*Z*RKFfiqZ^D(W0+ZrZ2B>MD5X/bQr+@>m)aYiHf,H"daS
X9B.H~>
endstream
endobj
%%EndResource
%%BeginResource: file (PDF FontDescriptor obj_10)
10 0 obj
<</Type/FontDescriptor/FontName/EMHXUT+CMR12/FontBBox[0 -21 448 665]/Flags 65568
/Ascent 665
/CapHeight 665
/Descent -21
/ItalicAngle 0
/StemV 67
/MissingWidth 500
/CharSet(/five/one/zero)/FontFile 23 0 R>>
endobj
%%EndResource
%%BeginResource: file (PDF FontFile obj_23)
23 0 obj
<</Filter[/ASCII85Decode
/LZWDecode]
/Length1 584
/Length2 2370
/Length3 533/Length 2795>>stream
J-eUh@sPTJ<'6ZZUCh1X>VI0(#\;AF`+02lN'mk;8W;jU0c<[IPAhpW"G7=]`aa7DCE&;Sb_K,M
JjgrK'920Gl'+F]+e-a^PEDZdBTJJ`"u>,45VX7=7cM5aaC$\AL^5?V/JQ352[B_e';;)AD6cZ*
-G]^VhIAC1:5=r8.!\?E*!\h#H/AHO0UkgHj*A_k5,Qj?k*mcLUh)R<:<$3TJl*U;?t[kHW5r7>
1)Wd6@Q"A;CcpiqPPPTmi,q(^Ce"@0aPEN:Bb%#XAu^8EMFFum1F]pcE\a"UOBk7mF!lR12o5TE
E\5SaMo_dU*n!SlWf9Kb!t!'0@6B-r'`STSpDT3.:BCVIi5THq$]WWK$(+!0Ne?O\Q4?/XAt"I*
_l,^KWGDS;-@l/1XG,jfI0[RPE+\AD_b2?V[K'6fjZ/6oqU.DT)!I^.@b>(DL'Z8[)9*8M5Ssm&
"@hL4c>68>+Mn\C2nieS=rE'G!*U6EW6fQ)5s`"q(dLsR9'etP1(].&OnbS'Ukh&ET072hV\P3O
=NW.R,9n-_[j)aTo/NM>30-7`0GQTCLbq.N-c7J"15oU;N#@GF\;VD^@PEZV#XOi4)i-8"?lTC#
=E#,`6(ilLL8#68+U/!%A0Y%f?t:+/nmI7n`ZcgC)2>te66$4S."ibk![&1##/QsG+c&H5@N,S]
Y\Y25JZs)3LEVas)@1nEL*D@=/MJB)FDugOLr$ca:T?^2Jr<V!OGY%-P*h%M=@'`1,(WN)=_rj/
"hl+6iL"-n#_Bd(<eaWdNC_J5%CdD2:mc)t?Qoc.=\<pHEE6!0i*mndG;'bCg6PQG+GPGtAfB?e
4I]jc3@JHiLB47L+Od$?L`'N%-t-di@AXAO#[sZF,7%_C1*KX9+EAA$6,7DX=lL9T:l)st3G&KH
Xe6ibJhf,P#,/`k+bi$#N#ZSA+GQrQEh$XHD"KuJ$0M@9kSr7P-t')RJe2L2L1/A@+kcSaLP\nF
27ZOp[.SLHnFl7[7:1WU+b&db:ha_j)+HM'#W3O)(h)B`XGlcfjcLn>[0UXee$XmQ)Mg9=NP5&!
I7'M/_1`Vt#3$<Hc.%#.kF$'O/RB<"(O[VMLm<ClA-O)EFiJ/uSo[D0IXm65k[Gk8[/jEq4'%*p
KjPu/2+<Xaep;Ik8`^rLdHk=B[da[VQ6pLt'sm1DlFhEBVI$+AP>>sGH"[:fC9g.:ap-0I#:a;f
c4kdsE$3-&2mTXri8VX^Wa-IK2I=O`KEc^[c,l^qNl)..P%K_j+[4O<ahaJ3E/ZND^8IWKQ!1>"
9s%nXB'e%#O:##`iEQIR=q4/W"^J-sM7-Ia_qC4%=:B2;0F5+uh\3hHb?u5=<$oR`TJ99d&Wo2K
Lr#?%%LB(7<J38^UR)V)?0rM+X(Nsm<B?h1b&p(T`W6QRRfQLHjc?f'C=\VCNsLYlP;G0i%+gS#
;/8m2_+(l88@'X@9-mN:ATHS^X&W-`0l8buHk'AM!(mD`hR'Yc&YB^b#YNdW6^IXLA"(tKX#Xso
E+lN:)cM/W7UE0-I/7/ZCN9F*B=&kehjas1>RFc2,fOH=gH)',9``^4<Aq0`/B;E4Qm0>R%_WaS
q3m;-X@?2:\UhO^E\'@_X`uh66'suIOoa])(=^1R,N8tZ-lBSX'daZ*IKoj%_Dd6s#D*W#R,He?
1`6A1(L+4]M[@3Necs84Wfhf\RGTUh%gXQ2Na@[4;)r7q9Ak.AFmeM#KNX>V'_"P[NkNn7LYGUj
.qi.eFkS72k8`MCUHM8knK=.b':6p<<!mIj24$kZek8>?N%nkB,-DNNF;(+#c%E;^qS2+.`<K^"
2oqi5#U.q$G=o-W44X>XBG4-LbQ0.FAfcn6_Ne(p+_W.oP,Xb?2cnGDA#Q<>Z4^WC<+++B1M;$H
'f370MG^KBA_<s3>]YNj4rVu0KYCF_,d(rhUD5176J7/OG*1K\"'*@V'e@+HZk;(9Psi>(ZI!C0
D6pmoKVqeo!Dq#@,0Pi6fTdA2TIlS%2-+P7?1`&<E90a/2Hn2VqZTuW/0LqraTU2R<[/,<+W_rd
VdB6$D0Bo43\.G9f$/nJMuDpoB74/g'184H$#:tMD_)t\Jm9ej#e5#=e)63LF:/Sc6M=g<A/2h6
F6'AR,atOa1F-`e%Pl2XOTa</[:&DKd&n\4(mSSu;@5n8"(`1_f408aX8[m^2.5oTJl@6leY]cD
Bdm"riEWP97Q!ekWE8[Y;(Yf37R]f5*sIO,lLBWAQAYj2-jj2NG;HV5TXPXN5(+ue[4'S#6X1"?
W)!#D]Vto-T2TuKlX`gNG5ei7SdJ@F=$_I=*;\2Q*1=V]Zn!J!6eIs_;!XNLWO7V:k^YC\/IeWB
7HgOP-@]L_iJoB7"OZmOU4"T#Yq"jIUk-aNYtmfHa$jP-l4Hk#n0j4A[pIMF3h1$R=rffX:N)n`
bE)_CGrR+1Vb48=>>2[IZ;%<ZWHf7]\iG8f67fF,@_(1:@;N/or7%&7d:VZb>h\m^%CY,'E0G=9
5)ZSjR3(2/80k96`Yc"H,W03"Ko<1VT]!;sY>XrY?:G*W`7lMG;.W<s7lL_EZ?sH49F5DX'm?jJ
*Z)*0Z"bjao;Z#c)-j9FIhcT&5+7YBDpUXch^'2eP!`n\jCO=P2tpr*XKS*em9j\M*3/bM`Igu^
9Wkj3=\qd(;NW88/9u3k,^PeiWsWSeflk!d!k8HtW2oXKh:qg^EUI,Y\p$?kh0[1fmp4tcpV-U`
qp0][*Y6,2hZ_td7t0t,-cU@;(ZTmuE:Notao_e?TFWGm%HX6C#-\e,5Q~>
endstream
endobj
%%EndResource
%%BeginResource: file (PDF FontDescriptor obj_8)
8 0 obj
<</Type/FontDescriptor/FontName/PPNELS+CMSY10/FontBBox[0 0 694 270]/Flags 4
/Ascent 270
/CapHeight 270
/Descent 0
/ItalicAngle 0
/StemV 104
/MissingWidth 500
/CharSet(/minus)/FontFile 24 0 R>>
endobj
%%EndResource
%%BeginResource: file (PDF FontFile obj_24)
24 0 obj
<</Filter[/ASCII85Decode
/LZWDecode]
/Length1 556
/Length2 1427
/Length3 533/Length 2011>>stream
J-eUh@sPTJ<'6ZZUCh1X>VI0(#\;AOA7@4r$q;EC+f*,"&/^A'F%NkU07lKH-K?hn5W+QlU]s2c
_F#Q2aiVQoUj1$)'G/OP"3JX4B/E-eJqFq[;BQg:7jE"]J7L>N%R^F5BpO]f0Um^udg=CJAN&4O
`Y2a1VJe2X9W(8!JsJNpSIPaqGeEKp(DolE0lakeB-1'PVfPS"5Z0A-lc3KaO?k=W'<kF1S5q6p
VjRsjBfR+8Bf7#R<S@T^g2K*D/(QM*Lu`I#kk(cO@C'$"TZ&+m%F1'XDTa#YV@t3k;]OUc+K%s/
J7"l+oJD0j.CdF+P*tUQ;6YSfE]Ft4+JFKVa"TZrjLQSOJBE*kRQA=GFRqmV":]nF5(j5Uj96le
Ze?4TW@7$l^b(?VjZ/?AlMn5oR`IN<c`"8h+lS#2p;E(%7M#b*kWoP9UN<%93_1rX+V!n=p(iBT
crqEDcY>9R]V2iQ)ShJG/F>eQ1(].&d=@lDUo6<eT=qL[V[a0r=NW.R,9n3Y[mM"toJkm*3fh##
5SZ"ILbR'&-fZ`F15oU;N#@GF\;VD^@PEZV#XOi4)i,ZQE#8f\[.YID64dfR#,.uK+p^JbN#;oN
N;+7p+h2&$Lk3c<,)0NnC`(Sd^iCWT66,J=!C@?6)?td1KHeJ=(i1,q@N]J,#,0+K)hrqe?m1?"
OGcM_U)a(RLE\Ej>Z(or?m(1IPqaG<U!5&*L&rKW>#=3,'_522:iTWA!XNZ]gHm$%):QEeBHp>1
"_VGfQ(3+lh-pYB;HsglEDFmqBOW1?[^[&Y=LHdl+GPGtAfB:-\8,?(32gD7#6C[Z+OS#]L`'%a
W*s)`Tr%)q#[sZF,7%_C'HpC8TQ1qO6,7DPfE)nH8I30B)d\9M21d!tJhf2J#,/^?+bi"MN#ZM?
+GQt%[ff.$C@f5q)H^1^bT#4QW*l[QJe2L+#%>eJ+kRQ\LOi8971im_8C^.G>664*?L!u8BGfuu
&832BQ,%2TiUlP4MWNQgn0/(*8;C_j3acrT,5=>_N<YV1:IBk`=G*@!<CY)<iL.K#+REK9j[O:m
%7-\D_Bt3cAGWH_hPrOuMe?\SS\\tF=oG7BdG8-Z5Lu0D)bXW8>p(;"JZTg(dMK=!WnqL)kST&!
mY`(6'KmbVLGcP*X]-&V'5>I32h2'72>6ms=45B(XY:Zu7/j&*M^MD^NKYeJB!Kl?2?p0mT/(!q
kLmba:LP*AWs)8NRsRSAl5b4/OGL)C6H!?:U%Gp_%bUn6(fdasjof7-T\J3J=Gc)VW5S$3<_@XL
+PF=`Vb5dqEf#J;C`<L(;\9o<V$8OE<Y^n*d?pr7#_9mO'nW:p<g-A]9A+juQ=RqdU;([:/cqh+
*p;#SVMG``P:Qd<gmQ(D<(o#TZ=OsBQ]i*f@0QW47V'LSP/g[_atP5$G7bn%`):KK(qoQdr)[)<
;,@:^]U0%bb.HmDXAf?Z'j.[Vim)3)$"?'^.-=Q\3I^8!$*:RK%@_T$ET%XX.JR_T'H79okjb[*
<FZ]5cnG[h3D`!uB'g2Qc<:YlB"Qu?[p3H<#W!r5&ZM"m!MZ0!b_=KEVcMBE,)o)Ag`Zcdd%M/s
"'B;m>X"N7c5)lgBMBAFXpCuN+%([P9(i%j0PD&-,3ETtBm;5\9TTtLA6/.VRPmZJ&HTLHEUdmc
6[.Jb)nM/I%5C@0<b/=uRcdc;I;C.[dYN^jIRnEL+Y2(GTbcs<D8^.Uc:1Sk;rWq89l`3L"kL5Q
^b]S=`L=W`#6uR'd>*[P?7tDAV;&SY>3a49WE&#ag8hSk8a0]oE+%V%9"\@:/T7X(K](Gj'*cWg
K;uqko4=):#;6(V//>VX>f)dsTZL$62&RR*#oRT#)2][n@,f]6;[.*L8M115/sTF`AM;;^0-t5$
f+O0IcFnTpBljbZ@9Bp<Y1?e2?#/h]Z*kFFfiqZtD=+I4[heDg>AJA"D?[ka<rV&_>Bb'>29E:.
,3<(a>B;E>d3A[N2B8s^*<US$%RI0"&.e~>
endstream
endobj
%%EndResource
%%BeginResource: file (PDF FontDescriptor obj_14)
14 0 obj
<</Type/FontDescriptor/FontName/ZWREBS+CenturySchL-Roma/FontBBox[0 -206 868 737]/Flags 34
/Ascent 737
/CapHeight 737
/Descent -206
/ItalicAngle 0
/StemV 125
/MissingWidth 278
/XHeight 481
/CharSet(/F/H/I/O/P/S/T/a/bracketleft/bracketright/c/d/e/f/h/hyphen/i/l/m/n/o/p/period/q/r/s/t/u/y/z)/FontFile 25 0 R>>
endobj
%%EndResource
%%BeginResource: file (PDF FontFile obj_25)
25 0 obj
<</Filter[/ASCII85Decode
/LZWDecode]
/Length1 1427
/Length2 18364
/Length3 533/Length 16519>>stream
J-eUh@sPTJ<'6ZZUCh1X>VI0(#\I0neDtm(R*>cMBh7)t0S5$(&HS!A@lal(7T2=Cg^4k6+N0I`
R,/r(a^jt++k5I#Q:n(X1O6e,E\s3/&s5TqNC]m<97hbp8?Q23MT'&IFWQ`>&.D&e3Dnj';l\C6
,-_.[b&aAJKE>q'PjDs>;,+;_TVb=m1JA+po;%o!+;A!/eV_mtMdE@7Ch&qdSuIXUh/3FDQ."K4
]UUWo@;paoA](&J(iqF-fnU`7ap!r"300@MPDZ(94Aa1@0Ui1K"0%+0-P-qF`oEJQYTTDTKH,%Q
;jng`_.;2#.F1UP3J\(f".UdZC#FdUViIao\8E&f+\*bkUuu]KLd&ZX56;6KN.CumS#+">fK+tN
8C7=4a>;m;%I`Mt2SVnK`[D;VR-6PhC.$bf%IT=N+pcJH>m1Wc9=!\Dd+glB4@psX0oi@S;Un2g
_?r=4.<E?e4`S&NQ)@D+fJ&@?"@22]$:FgnNiR]c1Vcgk_Zl-^Luaj1,EU!u^@?TN_o6NGddG4p
S!NB!,Cn]1%k2V"!R,PJBcB95g@-m%bOcF_VD+KE4GhFS%]6FcZHS8e"*iZ\$rh2sjNl$O?m?/V
@+dlMCdKJ+U?s]n7oC%bOq8k[!8U8O.&6qsN$BMS3%sn*A3*YJ3+#IAPZ8Q\<A,?kQjBI.ZBImh
!+["&cOf0q%j4\VYh;=BE]p4TF:p]!:LMN\"lXFU_GBW^l8fHYKL,hiWVC.sL#YK4eZM8ncZU\P
!,6&!n!q](hSZ2ZT8*'.@rl$ZBL!Mk<reA9@!GddE!\LY'H=?/Gb9n$+iXp=@u9u#M1sr\64aA&
V8+QkiQ=\-N(sAm22n<*?8Ele%O)nRR>AbKk,O$LSRFh*Df@gb-1\>FiuUr4L);fLHf8._?Gl#!
rh5(#nV4?RL)F"OVhQ"<e$92p",3rD(sFG;C)7'>Wa@1r?CU@$id\IKK8uN?lr%H[XTg_:_mj'A
cN^V.3]LG,l/@q7ZYb8Z\34:9Kk*,CQ5X6RM6T[8D@9m)*Z-/gT2jA5+TPn&KH/NSZZF[,KHUfu
i:[rW=u]\'L)=g%W.Y2mE#@CoQT<bth"hG4+]bL'-qD!t'#WFNn>865)5+,hN/^nE>(KPIT"ZJl
6e"%'T.2EETZq7YofZe5`WZXaR#2i=g#.f$6%D9+@14*.&9,[@^c$\8i#)Y?BFpK663r,J(^+5W
&XKacGH38=".)gr6'sG4c4hE(J8u5g&4:q5&-W1ZC^gE<6O5sl(kZ4N%=t`>#_:PI"&O"HJ[dNB
JA<=]:h1/G84<f&r#gWRN"+aA&88kp+G1I^'>^V9#;AsmK*4aS)"9rp9/4H)E,c8[BL)j\c-$5Z
7`,7k0F6#4!5eMq%Um.0Nt>2FKFibA,4'Q!lkTd.+CYple5QHFjrm*BA.V&"0Etq9*C#X$%72"a
GTb3LZC'8U?uRh+JB<jD(<Xr(Qo'gGi$!_LBG#h514_^u$qgS@%003a@f[JhKJ82kAY;>?Yim#o
3.):pnKWPAekX.K@k8qe^BfB"W5Y^Hl2eaIA8s(^8jJ4MJ\4F;0*E+Va):FA:e$>)rI)fp=T1Un
[tJ0(,"]m&%N?nd##]%X"DDcURY2fH^siN`[?_7g(dXM(fuX=TO$fGE`J@q<84WG*#[RopQ4WO*
bR'sQJZK0@+V'Z'$69G(TJM;#Os>TEK*O^gIg5:+Pf(%]'nNGR#%8EgaUi"d_AgOjYZ)IX=j%k<
0Jni`cBj/kDc<=-0EG'F(rOts9;)LMQ8:];b61Bd@dHX)Yc&b`b'rh&4KO_;Q5`ekT,4-Trdn^;
"\,A79]*r:Lk,gN_WH(P63o9-OYtW>a9N1;bS?>I)?,7Z$Vqn@%LA2#LI)<9!hpBnL-ZE"`<ZJJ
.83'Q&\4Z%8LZITSGnD^'$`dhb:6t;%trJt,$38c<oISaVK4r765]AX@b"/M0e,$_J:\6*n2>jE
*#l/<ohfLoJ:NqOrl6uni$Nl'Y-dVO60Qu1AA%o/YR[SQb)f_s"\o7F"s6Y*R;o5)b)*>LL-b<;
/u#^m"qc_>_t[dKkcE"4&>0uq^iM74's=A&#+`AFD$<4j*N/K9'B#5M$6'EAYH_U]!3,9Z-DKr7
c5"ht\7HpnA3C4&4akSB/Ai<8YJ$8D-d@r?/7M%>SPWc49hM5b,<_iUd^gL;(p-Sb`:UUJh?P\&
Mho36?BtTB$ppnB)VToP#1G?'a\!9VitsbA'#p8*QqrAZ*[>q&-47D1LF_/E*K?:0L-R3J%k8"F
M:-uW6q8OEJ^"@TZ'Io%)5dD6723Bp=qePoOV(hL4H]^\9>eoQ4_Lk1PINg]>ppj(<j]$';,S=j
Qn9J[lq!_4\l)p\#pL[l70m\D"2H<jF'mi]J6*VT0NirABHlnV+Tr\%BT1VW<,8Iop>ejQKo"Y,
!Fl]CC"LH!-07h&L")D7g?88@?n_q$dInK20QRfer=jh7.n`g^WD7%(#H9Yg!l7!n%<'gAJ4p^p
f@WS/<b?o6_$a^ZH!O.=U\iK&)M_*bNH+9CiI^QVCs*]X%V^:*"sF;E8*q`]i-7`Mnq[H78]qEO
oTM\)k:"r//H89]:u(/m(YK(n%&SDgc&eN>=;tBu0h/L9$Wn<3[?h>H4YEM&hI])6B4,5f9Athi
%e-'J/KmhsWKb/(_qQP+,VoV(H#?12IQ,11jMIcP3Z:FlUODB<AX]#7&]!WsLu7h__D'7Y""6OD
o2akH3@6UK8]&R0V&cM>;@q7tR=n-O2fYsS:rITY'(I%5Kfq1d?FPk%.-pY>gD=fsGY^&#4iWak
SpH$*$)K>&/qacW;JV_,;HMZQQLH8)K,@$AVTp6Ipl;0*BrNI&[T$`J9H#l!T*Sj_JqQhg?cP?+
-R%gR^p79ccOJP=+_bGYClY7V/dTY.S.1.$G88$0(Q9JT"Ibh?I!Y#VXB[AT7$%K1?GI9'N$=IB
_M)]+M/=`'aKgj6'W5Q9Iu'V[8/s0oFJ!>.r2H'[l9\e@I`9;rjK3N[aH"qE"K\S%\EmCaa>/?=
=H)H7Sg`6I/nF!UAo^EPT;[!?kmjniDuiRChPiu&8Ta#a*kn@<L'V&>aL[_ZN;9I&Q745O.=TS.
C4r_5P:.L4M`@dFlM&PFTe@Cr#dSJAGb-6eOQq(HlbZe\I$.0(\Z21ND/TGiP1M@#dR\,,W@#b:
ica^$dY[1NlrI[GQ@S7DSuC/C#b8kM^@0.3K'IBUki.:FKSIMIQ-+9MB[28`aHu1DiXC@=WF2r(
`.>%&\OV1S.NC!2=NTcWZ-'*)W#Ci_A<5s6V+W#V8TbR33/5KoV^qK7kh(KC0Rmu'L'uXs80F;!
_KP3XLMI%fW8d$Af!>XfMoZ$b/Td88Wj0]qMTCUO/.R1Y/=3MYKLut!#`0:1r+rQAQ*-L3/ju$S
0UPCkLFAV[%%a4G,,pIr]k@+rVt>bc(h\bkQ-C_BNg?PUgt;r5k,J^F$7^_MCk`0kJaYjf/./>R
)S@L1[>9Y?89UIO5_]S+JW:f/kTGe^EnniYkc5]3Z.bFXmZ&]7KLmSg/R7NQ!4@X4]nuHNNKC@o
/u/h`enKZ,BUlu]Id`=qGVT3:C4:jb(o2t0C+>g@l4BbSA=f_(h!M1dk`h+mpprnqGj\1gMFaNk
<eAGNR&\<k/"5Njk]*It]k*M?V6(i\fT^)'-a,eLi.D?7%gjcnIrZrMLMk0`!2PWoM$qtDOSFSa
ZB+<2Qfs7>l#*%a.&lM.Tr,umB[-lt(CBBDJOj2/#]fd=_RGU"ipVt\m:M.?%Uc6BA]S,Q/L$B+
/>SAnT?ApFkWEFt!k@GdE3Hd,W4ZN=!f9PM]o`lbl$S!E^6`QJVC6JY/S;\UAs-skG3TeKaASXD
$F`UPOsg*_8N<4'HC,'gXD3?NOIWY:M%Hbs_'g.N.;jitVKgH#KVln\Yd1@3$KUJsLe@g0BF'>e
n:`H-J8mDtBD.=%Nlu"92oV/?0*^K3P(Ai/E_5JWlNH?`S9PG8[V0'Vi^TV5,/NK-f*Cr!a+D8;
VVl/nkm[><:L'%J39;SW^2SV<CrFn=eG`,SV(S.>.Xnhk>_K$cM/&oGmX4X9bk<Op74ssB.N$s>
LuA]4MoYIJ$0(F!B!<o@9?YbXOEcH"NcIZqq+9(oEru0:8DTARQB>`&BL'\]j#Tk7MeE8+ku?o0
QAJ-$V8iS!1H%XS8MDYAV(2PP8:[up7cObRO7)5#Bb4dq;WCW00/F$ABCLu+8Ati[CaIri9k]?B
Ltq6;,uH(rC_FPOHt6hOT'BXu$]^aUfYqOBL8mq,Ec?n4A<k:S?10\F$P%b;BT$RWGj,X_ePs(N
&Afc=e;@`Km-Q:om^UOHSu<-Ub9hoP1kpkHX_D[1K-p^-En`"NGfXpua],:CrA6j\A'18,$jqP;
c<4imOpHSLaJR-tb^deVM%,]*85Q-45eh1hMQ"iG.TDV7*j;L6Uo>X^WH=.LpCp3^"j*WEN4,_,
+N*T$_=Vi&b54/65-p=Lh?dklZ85h,TU;\e]kAn%WBf+7/;EGKJ2/[uN&:/:hQTOKS+CB]-pj/=
I37IeNbF)qLlAP&b/,P,n&Zou.I`'?cA.<[b)'#HB,\RFM,M,uIg.W,8co#b[\jcuMmcN6%&dg%
.$#bpmBt`hLlUOc>aWVEL8kfIE-3Zh-FlS%Lo,EJOujA\2K?()O;)Ybl+V^=:k6XXou\\kWiCSB
Nf7p,@?a<@-q#=pp:0I`JlB2bm!t/^6ZFcJSrQ:+kT&\2N/.asP_N(pDgZ6>4Xd4eIuDsRNHG8Y
n7i8SW>0YtWG_O/b92!7Q7J22.o_"s!s`LEZ]iEEkY?c3,(g?M=ciQ5G/d_-KYH[$NG<""-leGP
T$iLJis9ceWh/iY%)D1fIu>YBCOpX9StF)$<K$!CaBkgD"E:TJj3BQ:#n5IB9/%cQV+GqP#7?8;
*09<"M@?IM8skfV+IVFSJ>f.dBHVlH/<+B]UaghRCm'ZR^fj^MN]05:ar(eIW10[%0PGlboYQh`
$PsBbLi9V;3+fLU<eX'`CrmfVa@d'nFTkR4^MKj(BrGMTY8k^[S*2,K8.:2G53T/:Q0asD.M<$.
a(":$h21@`LiA#`)QAO2K.@(aBn"qG3/[=?q5uE*cd\\Imi1NVYRSP(kQ5eUX'KDGJe!*Wks22L
7bqa`iThhg0CF>V?%OI/Q3g[,NL)Im#;<@m^'B\:9m3[6MNuVd6'Y'UBEjgdoV^rrT!NBEM/K!.
+Fm!bY:?QIYFC-CFaU>MLF=`nl)9p<)MX-@Mb"b9WrTT5UKu!UP3>#o7Ql]$K]oEEfW+*O99b"0
=G`n0$I(Jq99@68!.Qb:!fe8#-haGd@l2?*grUn,/b&"]^5YeZX%C0Y#e($)7ZpQ,Eg9>7/sri!
;NGRV7kKhe[%>lE*gT?'_<PkHbc(?Ji40,U#-b7bMB&\<I"IHiiTbZCkknkJ`/sJ3K<'HUBE4/#
#*J.\U4Pjk#PDFpCp5YFQ&3Z&D?tuKa&QdqS!&lM9V6.*MV,@^KW/Y+Vi7)nZ@P^/ONei?aF^-`
/>?puA8n&hajj[1SY6;\dUpYRD2OVEOb/iVn&S+Aflnjc!oS[KK'7JfCKS(1;[BL5O<B/Tm/Xi@
BTasiQq*1sC-%Z*0'Z"rQUXl'k>7[LI/dlkM=G&hl<IJ\mc!V"WDAnI/1/\VJD-,,n&][80@LB\
(6PWtMOP1!jkcA&k1HWbTT5BbC)DLP-C-(MYpmR,kY"'9U6ZBK7B_*7P,=S)G9tq2R[*%0^i&55
MTogDL?TnI;+cm`J8D`j1<jopm2UuLG).OhO%TV6cm6,@,B]iYM@KogaE35U2ZRNl+fP,?WP'0_
S=/t^ebW+,8bT-87m?X^r@EEdePrLYk(/bWJM^^d8Oe=N7+2O@k"2J'dKuuALkg%b^o0L&b,7pn
d4d3fGk063M"HQ:F1Vr1K9D?fDH`?cWe0WaFidhBbO:B]SsDrOYXuR&.1V.%\A9hGR>a&K/,q5>
-!j9Dh[?J:g[_j&K$oHWQ;+B//4Q<aP*,GZQK\C?8-4N;DKlI9GR-^0ZtcI_>`5JPU!o0bCY*li
B&K/3mFV2u-DHba[_6C#8lSr")pI+&M^g1hNJ<Ee[]RWMOK)?[^5*lL9ltp>S<Ot6"pb@K.6rsZ
Jo]WHOQd=Cb".Rf+JItWOR<FXk]lNO&qnZXQ]$gqaNlGq.(4uT/8:K9gKoX@)9\rYkYIZZaDZ`F
T_p@(YYtUZ(8,In(l)'!C+)3&.$ngI[Ugm6;>'(U.=ct?N7Ma9"N?[n!lfh4^k04dYP$%mWaiC'
o[Lp4ad`@7W1]KEWj?@n9o[r\QdKl2%'dtaJF5Eu8+q]h="d.TK#mSt%coDKp>Kcel%j70l7mn3
@TlnAL+srr*,S3oTtrLSasdlQH)@Q5r5@%r"7DP3ed.ZMk`cMYap3Hb$"Yb-H\la7;!Lr3BMAai
C62Kh34YT(WP5"[Un;s?1eM)/HBO@p>2RHE^M:).2bJV!.Y%EF/5+ifLih(6k*LrValrGC&9r2u
/mu1%K+,2\G7*ZW,o)O6QjGg^Yk*H<*fh$UP"R1G1*oM_5h5f)Y'8$ABgh<iY^^P4pQtBoG^Qe7
n6(S'8Sj;Mb!q969!a>Q5.%P/-t;YbTSLVJdYIsWZPU0qOFV3IGT/c6CBU%0;]nU^V<.E#''?pl
n&DCBGg7q?f"B/kONAq5cA==a(ndqSjNDCrK(#.lWe0"tZLu=iNpA[?$QRbjpldLmGj_*ABmtm8
e^E]Lis7_#/(Tqu*fX?'Y3V7]7U6p',dW4fgp<]thh[#$@"eo5j-f4WCQ*!Wp<!RHf,Nr2!^qPE
glKirM<p0D"-LD*E\S\rL?(Y!jFTB:&Vsq[.2ZYb+Uj)-0sJ`:6Q1mh6m<K[Aj[IGUsagEcu1HR
Jr$0M38AO2*0CGh@>(^k0cH/Z!s0mdE=A4rUuPo4csm6P&Ope=0[PJ2+q+`e+dg3&5pDDj2<nl1
'K6ni#U=o1em^NS7L6pF+N/4W(l[GV#Y^1p2B%NDK3Rj[@PG1HW'irpg>dJt%.3O=Ks5Q&"^OYE
.G`Qu7N.7?d8C7eX>?/A#%K&eFE)i^ai8uGSK_Vr*8-'D@>P\T/[paN!35a]Z\mM!D)qG<U:NZ1
OeT`DbtarR)cUG0;DfS,cP[1j\8FS>5:3TG_,6o5Dg>t<c_[,cPp:Y5erXh1MUb[?,cJ.[Z4<"O
65YHl5=.-8*3`/s$llcD)_)^067OmcL+/4;(q6U9DAa]cJ;FHI:bu.:#%B!<+Mc@F?lXnl)K-'=
LoNKSL8uP>)(pdPN40)7TP11>CNKn,X`)*hQD<ESE#Knc5]2U\l9l%"LCmL0'WXlgN<dMI13+MK
89<?*#`1>;)^HT.1)YhLF/6k_EWVtlag(E:X@GoFo$"7',ZFpk:#!H&0Hmr8YUQY'#1'P?_s3"/
+hR6$;,V^//2Q7JEks?L>h[thXS?b$a3*[tpT<[8E/gtR.]T(pNDr_!.#<\=(^Nb'LsJ6UUTT6j
8190CL.Srp"U5V1DSdbMg2,/l%"^iM-uDY_'rJ(T9^T2f@#7XdX;!@OLpE8lX?CNL^D)JPJqfsl
$GpVA`%LrF)8?3S,:g&7U)=A>d=N>W\]HgMmAGab<!<IVoUa^3/Pq?/[kpX.=u-M9C9=/=P_E$j
P&a&]X74U1N[JSK]T'Eeb`n=N#\#WAjLE\ta+iq)bSd:^,qDkqd\SuCX13eD^`i-!;dKa&;cR-J
lV]Th/8QN6ICKd8jUfVfe?59Amj6m81X?&7b+O[0W@9Lfld?t"l)Ft'8YR[t;J%>aUtE_(qQ0Nq
e2fT!_(l_Yn6">i@.(.Jb-R(B3.nsI;"%ZGXKiK2hMWQB@mH0s&H6p5]5MKf!j-/rF4WSKHkcm^
]lY%-+XiMm!caqQQQL5u[c^EV+ff023UA;gM8dT#G+?\D/^U+dBX0uM^b&Ks(bH+n7@kn9&;,):
Zr2:j/1a]*a"#:h?F)Q\5#Jjn&=VCSZ4hOnkIkYh^k!I1<1m&ZUH;ulRjS=e%1D,&,3\g$R.<c[
J5M5@ke1:6A%"crnT.:I70o+*-BF>-XWreD,HQJHY8,Ii7:g]`VR'm4:bp3G%huREdMS%mK"#4/
nHc2%"@n?;CF'N?fcfA3:ru&n#\:$0Q3-=[dZbChA=`64eEiJ6#X^$E0T2#[DI/9j:b=$==s#VD
U7]V;-OuZYUub@&8Rq`dBV:>!6rZ^J!=:hZ!>Q?$#Xo&&GU>rr"g8#Gmu1(4/Hd(7Q9l57N-U()
BaD&@d_J]7?oE$R<@J#k84<tZDIj7GXV(\1&Wiu.7;R6*_XJ9iRo*cSKZ*8Apn1$4>%hU11u>M!
'#)pO;.kSOZcho%>*jlp.Y/<OK*c!lM>Bq6bDB^X`)]D=3?47fmRA?TN^KBM?W@I.\WYKbDdZGX
1h_-m*.mZ]N;D4]aPj\Je8B#\d9\U8#m(_p,-d?*+%6TOMj9ITG>tV*/;b%#&Cium'7hZ1k]k)m
o@Qo>l)@$=<5fOQ$GrX%MF7"BJ?Q@OR_Vg:P=7145%=T_>XO6(jXGm[#0pLN$sFpt9gq.nUtO!1
B./Ef?'\(P'24!f4/</8&2ZS%OqEX'"a.3h'[B%&@A?20NE@tlR89PlQ#;;?^r=*0fumgX0BDNp
QfQlH(7To5.b)6sEu%CX,)VL.h$K^+hWp#FgP"tHbgb^N6kU3,K&I.tW>Ja1@^-t",S?(r1?_3U
_'L7:oW&(E'G/I!)FNVrr"K>`D\Pg@6n(+_XC_?-?G\rPo!-c/1/L9)qaXBA8B\f+jAa7kH<D#2
ba&Ah,71=T,6ZNS1\Q&l%XDk87MO[P&luu/bBZVY.$(6YS9;qfjB77(XcT8j;ACo,,:qQt&CWDG
#gH)#V!.3/dKW1j8a%Yb3]t>M%RSOZOZA.9Tp%uG;TYb;D?SnNYIjrb$'Uc0kR`;u.mh$M6bR!S
WP?cRU4/i"q'>4OpoZ"Z:_g\18YeB'Z^Vr6!K(9IKpF/(6>pt*;D)8:p+%=2C0)T9>dEM3dNZ#,
GR219X(8T@W^Oiu(0^Tt#,IY^e59n<q%k0mq\c*e^?^UHL:3nB^H:+3N74d=7gC0%_'\h!APj<s
bOrn2,-I$M;&<aG/OYrg?=M8#5:`YEUaeh,=qBmd3(7g0)XQ0H;T4`bje0PR;BKLL5n658a\LQq
\m^^m-7nVQ[MRk=Pfh]n0+i3lU6M6G8=:HAV;.T0K+*E8ZU[n=PiPO#P]"Z#JhnZ#^]:+E:l*eE
-`mDV($$!shQ[eW8MmcKifmWhiYBLi766Y+I`*0cn0q:%2j6QhHHaMT.0P@eQD3#-;NihhBu#:_
67,Y>=o(IskeU(rVLVkg0I(-8+!1&.LWiW]Uo\sTOB>i<e;7.$,h4=[E\'qD@3J^n(%*YA?YBoM
/3npIW"Y@WDg0;g.Ak5W9uN&pYqeWgl+F?f]aDtY"_bRB3$M!.,`,>)$!dd@],ZT292hMk-:RnN
.motOQU>C1M)^?d_[)>6\V7e34G]/!S5Q*?5!5#X9Hs0@2qd8VHpgBU9)+lbP*)V+8K/q=-R,Z2
M'Y^Y;%FI5l9Yn^4!lJo8s<4R75h-W@N!T`)O#L99SW0eY[ka-jgNm*_'O%*4q^\u1.DZY(MuS`
XdZO2?4CVG0X$DS'D6$/d+P^>"VQTnEZDR2]7.b=,rLlDR!27kVM?Q2k8aa;Nn)N9O2VmAQYX6C
cA".BYUV8Dh5FeEo)18<LoV[e.jGHS'2F?2)8r?rYKEldocP]k&B8r^f%DC!#0IaGP"Jd"P9)2B
'TST;km8L#Xa,Aq(p08p640ur,iM,';$n$m'qkCKMYP&d&LNAI$55\A$VJ5SF83>pU7k^(S8m)1
OS"YBTGttmO6En^=Gi(lV2k>uRo$mIWlbs9V'&U/&b-i(+Ng!A22P^m(P5bS]D%:%O:P`\$e!''
]GZNUP78Y@&CRqq4"H2nR'qR.M$]Q4BkeC10pEPhM?opbd"F'fTnmDrQ/J.%F'fkGa,&-(,KQPb
=]l_`N/o,dO2/41;[a"!O!RW/,m#M5;()gPk)63K&b37H0nY:dM_97W)jp+VoB%:]SH9@qM1_<)
d$'9sFY7+B'6o5%F%*Sf+put\Lg&%8]H3c)rLXZPLp:e'J<66d#`Mps)p#.K3CO5T7?:UM3f,[V
C98'[(clC+2h8l'46_S]ZG,kMMu\\C@(-_uS3JFs'DW>u&KS.ZOMe$-OJ@JbK(4_3es5eT)i11,
:qmSRbTjorWT^htHY9abT"^l5N>b->RkP<4&inZI#\$8SM5ZRsh2K_mQ7.NG&:tKjLm[dcWI(M^
keKK?LmYPG%5@8`>?2EQS.^,SOV"(I3/nBP&IJ!Z7tC$8CRDb2MAHj`UuN.E;+Qr9_iBs,M."nj
Ra@Ju8<Ug%Oi"005_p$R!Z87[P.8OF=Fh/WglK%^Lrt)^Z)J+A&hq4#&j/.1kadX"R&$shV#_Nq
\?(lRNt+J*&?I$>A@&,rne4;c'/79LN-:-[S=%KTN?TL'J>!=nD+QIR$0e4[OLGOpY+9RQ%XW8W
5bJK=M@"fh'T7?2)7b_Lb)5gc%R@FZ&Rq)WY72o,%%Fm>nlLrMKGEFnOALb#GbM3XLp.e,V%C5&
#d]lom1@Xl'6oJ2qQrMD_[$iPY"6A:d/#cuIh3`oNf^?F]'P6P(^V^u%aqHg(uu):X1_(eX73e]
YlKUFkX(s7$)!QRM,&rDp6;N,`/oibd8Ul8RL'j5$#C?7;H]2Mp`<!CQ\2lfgAM;^=;,B&M=D9G
>EF]7YDDGLXV(\-N1RHHV@cCqNTc!@iU[@lj9m\r$s8RM;eh4m_*1,;Ne"m)K`d<#8.)<&MOAZ%
qW`t5rkN3>%n"Bp+SW!G]c(;\Pj=coO_,'DdO]DT$j(2MaU]%(jGa1VVjQ/b@77kMN3d300UZ:)
&Fp/'%ug(2&2<d\/5Ze=UC@8@YX$;hEH)IBX"=U;Mq],/+JLu3RR?#RMTR-&8>2hP)875e$_X4?
"<&%c:(#H8#s>ec&I=Q:7R7lbQ+8FS!9=N-KfsteO!tJEZ=sX#8^>D4PVF],Hki^@W/8W&6f>Jp
;$r>H<sUdZ(pL=T+W*s/0p6g<7O\BOH8@':ZjQkm*39eZ&g\N2n-Njq&D8"Z^kiUo`XLB?8-"=!
2,TORF.OlMV#i!&;=P*BpBn0/(-uO<ffC'3bnGWf(P+N1U+AIUJrme_Y7s$ei<'PAXZ^@M!Ld,`
:nj!&^mE^+M=P:Ie+&8402'BZ(YFfX&^-%,"JFL*-n))88N72Fd>plTO9h'g+GC7[TUuNs'M2UT
j;3qDT9+p<*PgHiR&--8.DCoG)"SWE=K>A87NO@]Qg!TgH=#!dknX!S/JRshC'r%E0t^&WRtPt5
6>-t9$5'ijOa>'3C37Rc'9D@=7&$d9@9O!Lbb:u*:Je[NatSitK/NMl&jV1P6J&)T.1r"qR"2RV
E0:U61QiBp$=J[b3/Wp1Nt\2($2LO9)$S*45`H0a_Rd8cn@9o[N1c"c7S4JZfSh'^]U+09N+JR%
&FDNKI%TAMRh1;cd$'AAP#0V:M9C>Rd1?r_XpT^[RK/V0P#%"#K-O4/1%:9a8Y;,Adj#H72k_SM
fn75iN$SRP,m/7I4N"(IS"JZ:&:?7Y=[NY.O,:uhZga$:GbtlLX9_aJ$Ti_Ig/&PP\;[D9OhEJC
ETg!jB*p^A0jO9?;+."$!t+gUNTh"dCmN!2-Auj9M/Ag<ps9E'T8DPgVO6&nR)Fq0*#I7\&pl-d
fd@2r)rKaH-]sBQOLr*ahjADA2n9']$+YrHA/=:L*m@)VX*q>5I]23(P@7(F+Iin_LeKs$P5->[
_0?8P&IE2I(P&Y0dc*-_X.ID52Dc-X0sqJP\ejWU#i[NG;RF2[U+B55)T\Bu+GQ:-'f'hJTX)rP
;hEO<@ZA!E2`TXPj6I1pLQQR4M%TtPYdLCF8AVDS$`-''aU*uXMhjZT.r!TH+Qu0l2At_k3V^.B
JI2f>hQCgU2?a.)d5?`9\W1`U-?XiuaRtD[,1J=j&;[AiA-uA_4UhE!M7kMJ(qL;PF;<fScQJnl
q$g5hrC6:G#U3(UGhE]2F,I3o#W!*\3HSZ^M[Ap+Lh_L"R&39%O]PEp'tZL6>-u-8l]ie66270$
JD60[c]W81R7.r)\^qB#4-6.?d-2:3aeP!/Ye"N!#V9nY8l-s/cjV6?5Ofj,GlW_R(PtJ#Q+RH`
Cig2uKeW(X[36%pkmE7b+UR]@VK1%BRI\Y)#SAJ9RJV@I6+jDVQDFT&e?JKN<SKXjI[<UJP?@.%
ULYLPI>h)`^"'R95rOef^PNUt,f%M/m$o1q%u;q:'WD5E_)OC?]0/9uLd6oTjY:C.O&L"rN;8A]
.$FosKbd5l*(<9LR-r">]IjeON;4^)o)jf$SZK(ZN$*Zs=XOU`]2inf6"Wuu)+0U6Bgg1hkqJSl
31[WP5`N]7%Ci2i&l/o*+:-'M2>2Q\K"<-EreNhSNOFQcB]L!Z"cBjj^-M$iO_?%<L^KN-/]7@>
@4N;@#F?!hgFAhbShqs#qhX0u$&Nqo&`i%N1W3236^#/-,:&^;X^8R;*n[I/l4(<"9&Y#cLfoEL
D+4j<Zj:.OU64H[#`=YQ?R/AlWpJL')&Nb?/#cBHAN5a/d#ASc5`#p'NtY\9\E/\"ZHLIuM$kRe
Z>S:Xl_V.j?(+A_M7/;E\)+/8&csD@d$:!J<AihPN*58!^r>Wu-g#\eNmm_[TRrp!SgPYY)2OpG
M45/@]H]0XOX%`)S!`%4YZfc$&>%kh/U6.IT8g@<OMHVgKO5'QRh>b0+\LmaoA_1eNfD]5^hBf7
`nZN?i?.;i%05,IYfrb;-^*tQ-?-\W;$0@&[gU!))9A8jfSg2_Ko#kLfV7h,_hX;hI#cm>,iauM
B\m9%S5LJphh^^bOk0lKh@.K>V#_p(Ge].*oFVS-l<(\RR7!(gLC4<VCJDm7r>%lN<>0'5$hMq4
#emCNUQ5KE_/$t3;'6Hs[#Nd@'f8W/XM=#@O!H^$$jehofW=@1["rik5LG03L4:LHbG`G\9d+h=
B^gsZ?&Sc\M('s:_=7g</#a1L%&t/$PteCNQ4A/YO'Wia;$mb)Z0$ucLtk=c)DNf2KL(]l^ac[H
?3V+LBHI^s7!OQG!2>B?;q]:1ADN:)E01sk-&<`lM])%#)&nm7YDZ=.8nQj*:o1jd(K<[J.+5hB
0&j,.=!;tiRJ=R_0]n@RC$`p,^N<Na<E;?mbpuPf$4+1(oMU]h?4;"_Q5I:fLk;MSC5UK;&H6GQ
=MB[o%jE*@2fP@EhF!1Yq[bQ)Rl][G9lY)]^gm8%P9FZi;N2$E&!XbEMfXjnA#ZoXkRQ:"<,fUH
k5ZI+eWO=Df&3#EE49g@TTKgOlU]qFd)h6fkR<ifNk!Sr_4D3A&bDsjCiKTS+K16IY-=/CN4C[*
_)QPC>&t8X,F.?5=1X<[B+(Al&J2=/iUFgVM)nJ!26#TD5m&-Q>+ZBL(S\SgkBRUeabc[ENQn-e
ON':^5TC)@1/,+qEG@^\l0ZLSdR(AOfRf>a[M(X0Q=2"p'DiN?Cm+;)&D9c!0j7N7=r6"@$<eSu
iC,!PnihJbR"2&Y[KRY.9V:g+7^j,Id'(+?M.>s'-&C"Z)C79\1eIp@/V2#9^o!!?F<Pp6O>1JY
1\Jb,akP41PYgcaB`&,9^h?"WO\!E"+V80B(_K4?@EAe266_O_@fddsKK(*j`l(DUcuTs?NX19)
:u#Y:+cM.#OiZ0j"<<Cj";-/4A2K%a#f@9'b\/aL%*3K&&CtYO*"Ck;1*GLe2MKZc,B:6Q+UT.=
7YG4VggW,\$qA_iM%!uOJrW,aE[?[!5p29oUacAsD^^CgVdrYiQ6QQiN^b9+Ylnh[,7H1,Oat5g
@NpfOKH_8cE&AVp.n!8@.V^X\&Va3+4N@(\Qjed<1*IKl0cWX%ptY#C$O"[QC?.t)Ji/9$cJ]VF
[PVk/Q<=EE4##i.2n>$+,<H+>JjLVX84,s^jG0RqCT@SQknn4pM$uiu3NiN>i6,-`0o-l]C-rhs
T^"QB*$E>lDN$Xf;p_kG.BBBj#:aJ=+JXL\DP`'p;`Z+Wb;3f8/BK]2UBkQhk0?!RZYlM:WV[UP
W(hMIb<#$J,-WE=Ll<L5E%#VULaY)<+[a)'iZc8Kk[5>6JZ+P/,'%JWR4Y,,W2digEe:,@!LbL?
0'R^9,!W(=L`-PL<&P^@JZR)2L+(\^e"mXMW$7oa_`G)ZZSNC0TV94JZ3JLAAt"H@$5ScKnfVn\
L;D)_)?qW''[)7dMH'@%C(PAF0Yt>2Tha"`0U>ZI/:R,a.pJ1CU%FP7)(tO7,a9UL,W,o5!LdiI
LoE/,K!NH:+ZRN@,2#JBaV/F$5kB5>Z_nGo'T30p>3bl5:K(P)L5G!DJtilu>s50GCS\p?dTW(Z
=*=\'JK[T?S?mc>.nJSOBgd![4)U4"2mWd31q9Z>*Ng9fPeI<,Wo>P)LEUGeGe)]tV5bHBCr42C
dUFIT;P=L++_\(],H.[mls#62V\K?%N$QJ#r1^:XlU$T-_DP*:,O6"8L+bi]Ycb$##]@5P'/EF/
@M"_rA[?:n#b*l7ULAKT1mN%L5DXc5PUc$gT(jHa1,kb<2!R!;,;ee:djdqid%s7APUUs8+c@Tc
X_fPNfVWD;Xr/MnU*/3m-qYR<TXj+@PU1=bMXIT%-:*kGE:fZd4`!#"2I#ng2[UkPm:BNjBU6<&
+r-:')(I:p%%@ODd]oEW.Pnf0pQ!1L^aVjEgtJ\_MN\X`$9BRY1=NQ0o,qeji2eDE6]/?Skd#I@
ThMJ?8S$I?Y5YfVr4&GnXB93Sp?i)pVa=$376.["<4L;nBM3m.dV/<k4QPj7:>,%Xi=NC3Q'R[I
H9#3kd(:pi\m.eQ6TbQ56bH50&<)b':*_gE,I>2SQM<3nB_9(c@aJqN!Kf5&D&Fc(l>fL2K-@+*
XV2C2cO7?Q?=Y>_'a!l"*D)>EJD?&0W),c$!So@5orYKs$KRkb$W.&N\!Alm5`>aA.P)_?PJS#W
+)*Vb/JQkV7aPVuGr/t[mA,AD/7bK"2)IkbKL''RCWS(<.W7a%'p]PTf`CPpaQ8X!dT2j\M,G^5
ON\?S7\LQ9$8r'!eem%5=jHhG.L@Z%X-+6Y?ZC$.W!Mo2`qYNriDDpp)*8aX,+MRmAk7UYb:*KV
O31$760)IsOn:K+$%Y>gV2VXHVqbShHRrbuN5VJ*OL7[=\i#7FoK?i)jP+ro1W2R<UQR*hPlbMk
jbU/U,9kYF$)NIa0[Ps!P2D-gloYCffI"K;6NNVE;$Af!]Asr/hqC4jjfFrC_LQ5(d?p<^ZiqaB
DG\QFcNn0Va:Nq35`7@W6,X=nP;BG.&m6t]B:tn8,A?2\MJSbn&/iT#i`cs4)l1JI+WQ^d8rC:4
4`0Qq(t:16MZH-Ma)L+,E+h[3J\t"KDG)#Bp=n4cgkEPn`4mLR>9/j%8<2g[,bl-8@5.g2Bb6RE
;^RZ#JY5P%FR'YC-:8.CE*%b0.M2bDN(Q3Q0^9g`Rg$NQR*q(E`3!=/o9)Fs)(nHLDBoqM00G<N
W@6::dh`_NJ<J=XEj,\r*RZun.Tr?rk>:?RH"9ZCdG5uPB]@QoIT]@l(,Ij:Qlj?Yh\]4,W9H#m
)\Y>_b_]j]A=[%!d#=D3EI'#YP`hdUI\[WVNi7+^[O&ef@TE;0=_;30P(JEhRb:P@VSu#pqLYB_
qiu]N&IXs-&4hZJ@oK4_Q5BZE[F!=eBSE86V\a6_MEBTG"h^$\HcEEc\YhS[Gc_akOKDh$kUU<4
]>T:rK8u'AXj*FI&9Q-M8^7Kb`&uCGZN>3tJ`nJ;kd?f[*(sMp2dNE%pH*FuhVGgn9W24A(Iq.#
P&0;?1gM=F,Vp\_;,f1T#!<O9Stq;PQV\!UO48@a<YgP!"pWG[!2gm$9eK<pM;']"eK@i]&OTA_
*6t$pfNcUNY$k5TV&#7[Ar+mF+@e,s*<R!MLs`:^(Z;LTP"\CPWa]AWh,#+>=GGHo/ga.4ZE;"k
%?#KH0h?/kOi7l?fRX.<aQV>#,[taa,/u3N+GWH4F%M6$;_t3hg7[R^Bo&TkE5:Ga0atft#['N(
V0,?@-obp3\R@"u'i5II\mQV"gHD?[O;"BGH8>=b.8?@((%RO6/=?f-cd7iS4c3-p/U8[HaQoUr
5d/EU"UMXOI[O+l&eZtrUFHJi*!IC/MRFBJV:`DTX>H%`0sO$_0aU8_cJ]'sa\lpYs.AFMY0Qk?
,Y2UaO^rKV*.+Y2C:4T`f[s(s.C2kT]d:DTOF^JQgaQ-@/o1_W<6?@p,ALK-W!o1n'7$.p`;ku@
/!!FSM%I!HjpiI(`NU1OQg2U`V33YF8f7Zr6/0V@:@dd]9S5_tb=+98L_2\jUiH\Wa\WoY`_OmC
,0Pd*/d!>d/GnUYn(n#ZGTR+Iqqm%qhB0[\D[YQPB8uE[0?8>[,qStLPOdQdb5$NEiB6"gnc!m^
GRtQ+_dI$a+il\KnD!3F=:-/n~>
endstream
endobj
%%EndResource
%%BeginResource: file (PDF object obj_1)
1 0 obj
<<>>endobj
%%EndResource
%%EndProlog
%%Page: 1 1
%%BeginPageSetup
/pagesave save def
4 0 obj
<</Type/Page/MediaBox [0 0 513 297]
/Parent 3 0 R
/Resources<</ProcSet[/PDF]
/Font 19 0 R
>>
/Contents 5 0 R
>>
endobj
%%EndPageSetup
5 0 obj
<</Length 30039>>stream
q 0.0573963 0 0 0.0573963 0 0 cm
1 G
1 g
0 0 8937.42 5174.44 re
f
893.352 620.832 7865.31 4139.64 re
f
q
893.352 620.832 7864.61 4139.64 re W n
17.4227 w
2 J
1 j
0 0 1 rg
0 0 1 RG
1289.51 1724.29 m
1296.41 1784.69 l
1303.32 1433.72 l
1310.23 1807.39 l
1317.14 1654.47 l
1324.04 1590.49 l
1330.95 1553.62 l
1337.86 1035.02 l
1344.77 1780.98 l
1351.67 1880.55 l
1358.58 1905.5 l
1365.49 1694.98 l
1372.39 1381.07 l
1379.3 1713.93 l
1386.21 1899.49 l
1393.12 1501.92 l
1400.02 1599.92 l
1406.93 1611.58 l
1413.84 1635.86 l
1420.75 1931.65 l
1427.65 1586.98 l
1434.56 2054.06 l
1441.46 1601.51 l
1448.37 1324.25 l
1455.28 1147.48 l
1462.19 1649.96 l
1469.09 1755.26 l
1476 1157.08 l
1482.91 1608.61 l
1489.82 1418.71 l
1496.72 1704.19 l
1503.63 1476.88 l
1510.54 1480.1 l
1517.45 1493.46 l
1524.35 1644.63 l
1531.26 1333.63 l
1538.17 1771.93 l
1545.07 1424.26 l
1551.98 1984.46 l
1558.89 1692.33 l
1565.8 1487.34 l
1572.7 2014.79 l
1579.61 2066.43 l
1586.52 1722.52 l
1593.43 1628.8 l
1600.33 1609.41 l
1607.24 1957.75 l
1614.14 1556.73 l
1621.05 1794.6 l
1627.96 1355.4 l
1634.87 1625.49 l
1641.77 2060.3 l
1648.68 1725.64 l
1662.5 1641.24 l
1669.4 1636.32 l
1676.31 1526.92 l
1683.22 1900.45 l
1697.03 1730.99 l
1703.94 1492.17 l
1710.85 1911.11 l
1717.75 1577.39 l
1724.66 1564.74 l
1731.57 1607.92 l
1738.48 1747.21 l
1745.39 1666.6 l
1752.29 1908.37 l
1759.19 1588.95 l
1766.11 1897.57 l
1773 1992.35 l
1779.92 1037.87 l
1786.82 1713.47 l
1793.74 1454.06 l
1800.64 1695.73 l
1807.55 1868.91 l
1814.45 1496.64 l
1821.37 1533.21 l
1828.27 1663.61 l
1835.17 1930.46 l
1842.09 1777.53 l
1848.98 1832.29 l
1855.9 1601.59 l
1862.8 1814.03 l
1869.72 1838.11 l
1876.62 1311.44 l
1883.54 1273.19 l
1890.43 1737.56 l
1897.34 1575.56 l
1904.25 1526.32 l
1911.15 1846.52 l
1918.07 1911.11 l
1924.96 1355.91 l
1931.88 1683.88 l
1938.78 1349.82 l
1945.7 1420.54 l
1952.6 1632.06 l
1959.52 1968.86 l
1966.41 1540.01 l
1973.32 1790.72 l
1980.23 1301.54 l
1987.13 1779.52 l
1994.05 1592.14 l
2000.95 1970.45 l
2007.86 1711.57 l
2014.76 1869.5 l
2021.68 1651.85 l
2028.58 1828.07 l
2035.48 1549.75 l
2042.39 1122.35 l
2049.3 1916.37 l
2056.21 1594.23 l
2063.11 1650.48 l
2070.03 1932.1 l
2076.93 1479.53 l
2083.84 1896.47 l
2090.74 1907.36 l
2097.64 1908.04 l
2104.56 1913.62 l
2111.46 1633.39 l
2118.38 1605.77 l
2125.28 1536.91 l
2132.19 1751.43 l
2139.09 1715.27 l
2146.01 1829.74 l
2152.91 989.129 l
2166.72 1999.96 l
2173.63 1955.45 l
2180.54 1419.7 l
2187.44 1607.84 l
2194.36 1887.03 l
2201.26 1958.11 l
2208.17 1196.63 l
2215.07 1737.18 l
2221.99 1504.31 l
2228.89 1696.35 l
2235.79 1701.81 l
2242.7 1262.79 l
2249.61 1858.04 l
2256.52 1840.02 l
2263.42 1605.83 l
2270.34 1669.38 l
2277.24 1415.05 l
2284.15 1738.3 l
2291.05 1920.99 l
2297.97 1710.27 l
2304.87 1944.26 l
2311.77 1843.47 l
2318.68 1901.44 l
2325.59 1618.77 l
2332.5 1898.46 l
2339.4 1785.51 l
2346.32 2040.73 l
2353.22 1852.39 l
2367.04 1304.85 l
2373.93 1620.25 l
2380.85 1673.69 l
2387.75 1908.21 l
2394.66 1854.45 l
2401.57 1701.5 l
2408.48 1488.78 l
2415.38 1638.2 l
2422.3 1512.53 l
2429.2 1586.5 l
2436.11 1914.14 l
2443.01 1473.3 l
2449.91 1719.45 l
2456.83 1465.95 l
2463.73 1582.23 l
2470.64 1781.08 l
2477.55 1566.91 l
2491.36 1628.23 l
2498.28 1791.57 l
2505.18 1663.98 l
2512.08 1645.16 l
2519 1889.24 l
2525.89 1831.42 l
2532.81 1577.63 l
2539.71 1833.35 l
2546.63 1625.86 l
2553.53 1954.16 l
2567.34 1770.71 l
2574.24 1988.68 l
2581.16 1838.42 l
2588.06 1607.33 l
2594.97 1984.13 l
2601.88 1434.39 l
2608.79 1760.09 l
2615.69 1925.92 l
2622.61 1993.12 l
2629.51 1696.97 l
2636.42 1906.91 l
2643.32 1965.22 l
2650.22 1620.36 l
2657.14 1851.11 l
2664.04 1739.29 l
2670.96 1148.05 l
2677.86 1762.46 l
2684.77 1886.47 l
2691.67 1801.02 l
2698.59 1426.44 l
2705.49 2050.21 l
2712.39 1793.92 l
2719.3 1648.01 l
2726.2 1846.89 l
2733.12 1956.21 l
2740.02 1894.82 l
2746.93 1660.69 l
2753.84 1702.66 l
2760.75 1465.63 l
2767.65 1495.11 l
2774.57 2019.39 l
2781.47 1196.76 l
2788.37 1909.05 l
2795.29 1817.09 l
2802.18 1984.72 l
2809.1 1340.73 l
2816 1841.02 l
2822.92 2023.68 l
2829.82 1751.41 l
2836.73 1266.66 l
2843.63 1391.54 l
2850.53 1931.58 l
2857.45 1284.72 l
2864.35 1940.83 l
2871.27 1816.82 l
2878.16 1323.62 l
2885.08 1965.73 l
2891.98 1448.27 l
2905.8 2022.41 l
2912.71 1695.73 l
2919.61 1652.22 l
2926.51 1931.14 l
2933.43 1701.65 l
2940.33 1770.56 l
2954.14 1342.29 l
2961.06 1314.98 l
2967.96 1789.45 l
2974.88 1212.42 l
2981.78 1716.46 l
2988.68 1586.05 l
2995.59 1144.09 l
3002.49 1382.32 l
3009.41 1808.45 l
3016.31 1605.74 l
3023.23 1865.41 l
3030.13 1424.33 l
3037.04 1939.82 l
3043.94 1996.1 l
3050.86 1444.52 l
3057.76 1768.54 l
3064.66 1652.34 l
3071.57 1574.75 l
3078.47 1577.73 l
3085.39 1960.52 l
3092.29 1513.67 l
3099.21 2053.07 l
3106.11 1331.93 l
3113.02 2051.45 l
3119.92 1963.15 l
3126.82 1665.59 l
3133.74 1583.56 l
3140.64 1737.88 l
3147.55 2000.33 l
3154.45 1757.3 l
3161.37 1441.39 l
3168.27 1827.62 l
3175.19 1773.31 l
3182.09 1853.13 l
3188.98 2028.52 l
3195.9 1833.11 l
3202.8 1972.63 l
3209.72 1800.61 l
3216.62 1919.23 l
3223.54 1784.36 l
3230.43 1747.51 l
3244.25 2012.35 l
3251.17 2035.93 l
3258.07 1854.24 l
3264.96 1422.54 l
3271.88 1866.09 l
3278.78 1886.28 l
3285.7 1800.28 l
3292.6 1584.02 l
3299.52 1225.01 l
3306.41 1871.59 l
3313.33 1751.71 l
3320.23 1943.88 l
3327.13 1808.73 l
3334.05 2025.91 l
3340.95 2042.72 l
3354.76 1798.75 l
3361.68 1934.11 l
3368.58 1879.9 l
3375.5 1692.52 l
3382.39 1917.41 l
3389.31 1629.72 l
3396.21 1866.77 l
3403.11 1455.62 l
3410.03 1741.53 l
3416.93 1639.4 l
3423.84 1666.88 l
3437.66 2062.36 l
3444.56 1760.52 l
3451.48 2006.72 l
3465.27 1764.22 l
3472.19 1179.61 l
3486.01 1948.15 l
3492.91 1580.56 l
3499.82 1735.89 l
3506.72 1623.53 l
3513.64 1715.17 l
3520.54 2046.61 l
3527.46 2139.8 l
3534.36 1666.97 l
3541.25 1792.02 l
3548.17 2044.65 l
3555.07 1532.46 l
3561.99 1850.34 l
3568.89 1917.8 l
3575.8 2038.84 l
3582.7 2043.03 l
3589.62 2345.58 l
3603.42 2162.26 l
3610.34 2345.51 l
3617.23 2383.13 l
3624.15 2393.37 l
3631.05 2455.12 l
3637.97 2140.7 l
3644.87 2085.13 l
3651.79 2300.4 l
3665.6 2139.48 l
3672.5 1754.38 l
3679.4 1989.37 l
3686.32 2291.83 l
3693.21 2488.06 l
3700.13 2528.41 l
3707.03 2441.39 l
3713.95 2456.77 l
3720.85 2447.15 l
3734.66 2743.77 l
3741.56 2707.73 l
3755.38 2142.67 l
3762.3 2502.3 l
3769.2 2514.93 l
3776.11 2560.3 l
3783.01 2377.11 l
3789.93 2357.91 l
3796.83 2619.43 l
3803.73 2785.76 l
3810.64 2890.96 l
3824.46 2680.32 l
3831.36 2813.17 l
3838.28 2836.88 l
3845.18 2919.66 l
3852.09 2877.81 l
3858.99 2626.47 l
3865.91 2456.56 l
3872.81 2600.73 l
3879.71 2626.59 l
3886.63 2684.75 l
3893.52 2379.57 l
3900.44 2394.73 l
3907.34 2795.28 l
3914.26 2951.09 l
3921.16 2994.87 l
3928.07 2870.05 l
3934.97 2704.05 l
3941.87 2877.7 l
3948.79 2952.03 l
3955.69 2825.37 l
3962.61 2825.04 l
3969.5 2924.12 l
3976.42 2897.43 l
3983.32 2695.53 l
3990.24 2020.96 l
3997.14 2870.63 l
4004.05 2932.39 l
4010.95 2846.52 l
4017.85 2577 l
4031.67 2910.65 l
4038.59 2872.07 l
4052.4 2725.79 l
4059.3 2790.71 l
4066.22 2929.97 l
4073.12 2891.78 l
4080.02 2804.29 l
4093.83 2446.46 l
4100.75 1978.85 l
4107.65 2661.7 l
4114.57 2686.11 l
4121.46 2619.24 l
4128.38 2401.42 l
4135.28 2108.73 l
4142.2 2395.74 l
4149.1 2282.68 l
4156 2427.62 l
4162.91 2194.59 l
4169.82 2161.42 l
4176.73 2402.13 l
4183.63 2534.49 l
4190.55 2409.94 l
4197.45 2112.81 l
4204.36 2129.12 l
4211.26 1909.63 l
4218.16 2065.58 l
4225.08 2144.61 l
4231.98 2279.44 l
4238.89 2251.65 l
4245.8 1864.22 l
4252.71 2025.91 l
4259.61 1996.11 l
4266.53 2045.49 l
4273.43 2033.47 l
4280.33 2127.03 l
4287.24 2094.97 l
4307.96 1754.84 l
4314.88 1975.97 l
4321.78 1975.85 l
4328.69 1715.95 l
4335.59 1802.91 l
4349.41 2021.9 l
4356.31 1909.96 l
4363.22 2016.74 l
4370.13 1976.96 l
4377.04 2139.36 l
4390.86 1719.51 l
4397.76 1886.68 l
4404.67 1937.31 l
4411.57 1677.51 l
4418.47 2082.67 l
4425.39 1493.86 l
4432.29 2092.65 l
4439.2 1920.55 l
4446.11 1906.34 l
4453.02 1878.58 l
4459.92 1562.79 l
4466.84 1578.58 l
4473.74 2339.71 l
4480.65 2056.57 l
4487.55 2152.39 l
4494.45 2069.36 l
4501.37 2241.23 l
4508.27 1770.45 l
4515.18 2022.02 l
4522.09 2012.16 l
4529 2030.7 l
4535.9 1676.21 l
4542.82 2037.42 l
4549.72 1908.09 l
4556.62 1981.88 l
4563.53 1897.66 l
4570.43 1971.11 l
4577.35 1721.98 l
4584.25 2057.29 l
4591.16 1900.95 l
4604.98 2152.05 l
4611.88 1786.33 l
4618.8 1775.16 l
4625.7 2128.72 l
4632.6 1695.48 l
4639.52 2050.96 l
4646.41 2011.72 l
4653.33 2075.51 l
4660.23 1899.64 l
4667.14 2016.01 l
4674.05 2213.84 l
4680.96 2162.43 l
4687.86 2132.95 l
4694.76 2154.1 l
4708.58 1865.01 l
4715.5 2019.91 l
4722.39 2058.19 l
4729.31 1977.44 l
4736.21 2105.07 l
4743.13 2127.05 l
4750.03 1853.27 l
4770.74 2245.57 l
4777.66 2088.84 l
4784.56 2184.38 l
4791.48 2178.5 l
4798.38 1933.41 l
4805.29 1974.46 l
4812.19 2545.61 l
4819.11 2554.34 l
4826.01 4511.24 l
4832.91 2554.34 l
4839.82 2545.61 l
4846.72 1974.46 l
4853.64 1933.41 l
4860.54 2178.5 l
4867.45 2184.38 l
4874.36 2088.84 l
4881.27 2245.57 l
4888.17 2070.91 l
4901.99 1853.27 l
4908.89 2127.05 l
4915.8 2105.07 l
4922.7 1977.44 l
4929.62 2058.19 l
4936.52 2019.91 l
4943.44 1865.01 l
4957.25 2154.1 l
4964.15 2132.95 l
4971.05 2162.43 l
4977.97 2213.84 l
4984.87 2016.01 l
4991.79 1899.64 l
4998.68 2075.51 l
5005.6 2011.72 l
5012.5 2050.96 l
5019.42 1695.48 l
5026.32 2128.72 l
5033.21 1775.16 l
5040.13 1786.33 l
5047.03 2152.05 l
5060.85 1900.95 l
5067.77 2057.29 l
5074.66 1721.98 l
5081.58 1971.11 l
5088.48 1897.66 l
5095.4 1981.88 l
5102.3 1908.09 l
5109.2 2037.42 l
5116.11 1676.21 l
5123.01 2030.7 l
5129.93 2012.16 l
5136.83 2022.02 l
5143.75 1770.45 l
5150.64 2241.23 l
5157.56 2069.36 l
5164.46 2152.39 l
5171.36 2056.57 l
5178.28 2339.71 l
5185.18 1578.58 l
5192.09 1562.79 l
5198.99 1878.58 l
5205.91 1906.34 l
5212.81 1920.55 l
5219.73 2092.65 l
5226.63 1493.86 l
5233.54 2082.67 l
5240.44 1677.51 l
5247.34 1937.31 l
5254.26 1886.68 l
5261.16 1719.51 l
5268.07 1899.16 l
5274.97 2139.36 l
5281.89 1976.96 l
5288.79 2016.74 l
5295.71 1909.96 l
5302.61 2021.9 l
5323.32 1715.95 l
5330.24 1975.85 l
5337.14 1975.97 l
5344.05 1754.84 l
5364.77 2094.97 l
5371.69 2127.03 l
5378.59 2033.47 l
5385.48 2045.49 l
5392.4 1996.11 l
5399.3 2025.91 l
5406.22 1864.22 l
5413.12 2251.65 l
5420.04 2279.44 l
5426.93 2144.61 l
5433.85 2065.58 l
5440.75 1909.63 l
5447.65 2129.12 l
5454.57 2112.81 l
5461.46 2409.94 l
5468.38 2534.49 l
5475.28 2402.13 l
5482.2 2161.42 l
5489.1 2194.59 l
5496.02 2427.62 l
5502.91 2282.68 l
5509.81 2395.74 l
5516.73 2108.73 l
5530.55 2619.24 l
5537.45 2686.11 l
5544.36 2661.7 l
5551.26 1978.85 l
5558.18 2446.46 l
5578.89 2891.78 l
5585.79 2929.97 l
5592.71 2790.71 l
5599.61 2725.79 l
5613.43 2872.07 l
5620.34 2910.65 l
5634.16 2577 l
5641.06 2846.52 l
5647.96 2932.39 l
5654.88 2870.63 l
5661.77 2020.96 l
5668.69 2695.53 l
5675.59 2897.43 l
5682.51 2924.12 l
5689.41 2825.04 l
5696.32 2825.37 l
5703.22 2952.03 l
5710.14 2877.7 l
5717.04 2704.05 l
5730.86 2994.87 l
5737.75 2951.09 l
5744.67 2795.28 l
5751.57 2394.73 l
5758.49 2379.57 l
5765.39 2684.75 l
5772.3 2626.59 l
5779.2 2600.73 l
5786.1 2456.56 l
5793.02 2626.47 l
5799.92 2877.81 l
5806.84 2919.66 l
5813.73 2836.88 l
5820.65 2813.17 l
5827.55 2680.32 l
5841.37 2890.96 l
5848.29 2785.76 l
5855.18 2619.43 l
5862.08 2357.91 l
5869 2377.11 l
5875.9 2560.3 l
5882.82 2514.93 l
5889.71 2502.3 l
5896.63 2142.67 l
5910.45 2707.73 l
5917.35 2743.77 l
5931.16 2447.15 l
5938.06 2456.77 l
5944.98 2441.39 l
5951.88 2528.41 l
5958.8 2488.06 l
5965.7 2291.83 l
5979.51 1754.38 l
5986.41 2139.48 l
6000.23 2300.4 l
6007.14 2085.13 l
6014.04 2140.7 l
6020.96 2455.12 l
6027.86 2393.37 l
6034.78 2383.13 l
6041.68 2345.51 l
6048.59 2162.26 l
6062.39 2345.58 l
6069.31 2043.03 l
6076.21 2038.84 l
6083.13 1917.8 l
6090.02 1850.34 l
6096.94 1532.46 l
6103.84 2044.65 l
6110.76 1792.02 l
6117.66 1666.97 l
6124.56 2139.8 l
6131.47 2046.61 l
6138.37 1715.17 l
6145.29 1623.53 l
6152.19 1735.89 l
6159.11 1580.56 l
6166 1948.15 l
6179.82 1179.61 l
6186.74 1764.22 l
6200.54 2006.72 l
6207.45 1760.52 l
6214.35 2062.36 l
6228.17 1666.88 l
6235.09 1639.4 l
6241.98 1741.53 l
6248.9 1455.62 l
6255.8 1866.77 l
6262.7 1629.72 l
6269.62 1917.41 l
6276.52 1692.52 l
6283.43 1879.9 l
6290.33 1934.11 l
6297.25 1798.75 l
6311.07 2042.72 l
6317.96 2025.91 l
6324.88 1808.73 l
6331.78 1943.88 l
6338.68 1751.71 l
6345.6 1871.59 l
6352.5 1225.01 l
6359.41 1584.02 l
6366.32 1800.28 l
6373.23 1886.28 l
6380.13 1866.09 l
6387.05 1422.54 l
6393.95 1854.24 l
6400.85 2035.93 l
6407.76 2012.35 l
6414.66 1897.05 l
6421.58 1747.51 l
6428.48 1784.36 l
6435.39 1919.23 l
6442.29 1800.61 l
6449.21 1972.63 l
6456.11 1833.11 l
6463.03 2028.52 l
6469.93 1853.13 l
6476.83 1773.31 l
6483.74 1827.62 l
6490.64 1441.39 l
6504.46 2000.33 l
6511.38 1737.88 l
6518.27 1583.56 l
6525.19 1665.59 l
6532.09 1963.15 l
6538.99 2051.45 l
6545.91 1331.93 l
6552.81 2053.07 l
6559.72 1513.67 l
6566.63 1960.52 l
6573.54 1577.73 l
6580.44 1574.75 l
6587.36 1652.34 l
6594.25 1768.54 l
6601.16 1444.52 l
6608.07 1996.1 l
6614.97 1939.82 l
6621.89 1424.33 l
6628.79 1865.41 l
6635.7 1605.74 l
6642.61 1808.45 l
6649.52 1382.32 l
6656.42 1144.09 l
6663.34 1586.05 l
6670.24 1716.46 l
6677.14 1212.42 l
6684.05 1789.45 l
6690.95 1314.98 l
6697.87 1342.29 l
6711.68 1770.56 l
6718.59 1701.65 l
6725.5 1931.14 l
6732.4 1652.22 l
6739.3 1695.73 l
6746.22 2022.41 l
6760.03 1448.27 l
6766.93 1965.73 l
6773.85 1323.62 l
6780.75 1816.82 l
6787.66 1940.83 l
6794.57 1284.72 l
6801.48 1931.58 l
6808.38 1391.54 l
6815.28 1266.66 l
6822.2 1751.41 l
6829.1 2023.68 l
6836.01 1841.02 l
6842.91 1340.73 l
6849.83 1984.72 l
6856.73 1817.09 l
6863.64 1909.05 l
6870.55 1196.76 l
6877.45 2019.39 l
6884.36 1495.11 l
6891.26 1465.63 l
6898.18 1702.66 l
6905.08 1660.69 l
6911.99 1894.82 l
6918.89 1956.21 l
6925.81 1846.89 l
6932.71 1648.01 l
6939.63 1793.92 l
6946.53 2050.21 l
6953.43 1426.44 l
6960.34 1801.02 l
6967.24 1886.47 l
6974.16 1762.46 l
6981.06 1148.05 l
6987.98 1739.29 l
6994.88 1851.11 l
7001.79 1620.36 l
7008.69 1965.22 l
7015.59 1906.91 l
7022.51 1696.97 l
7029.41 1993.12 l
7036.32 1925.92 l
7043.22 1760.09 l
7050.14 1434.39 l
7057.04 1984.13 l
7063.95 1607.33 l
7070.86 1838.42 l
7077.77 1988.68 l
7084.67 1770.71 l
7098.49 1954.16 l
7105.39 1625.86 l
7112.3 1833.35 l
7119.2 1577.63 l
7126.12 1831.42 l
7133.02 1889.24 l
7139.93 1645.16 l
7146.84 1663.98 l
7153.73 1791.57 l
7160.65 1628.23 l
7167.55 1602.19 l
7174.47 1566.91 l
7181.37 1781.08 l
7188.29 1582.23 l
7195.18 1465.95 l
7202.1 1719.45 l
7209 1473.3 l
7215.9 1914.14 l
7222.82 1586.5 l
7229.71 1512.53 l
7236.63 1638.2 l
7243.53 1488.78 l
7250.45 1701.5 l
7257.35 1854.45 l
7264.27 1908.21 l
7271.16 1673.69 l
7278.08 1620.25 l
7284.98 1304.85 l
7305.7 2040.73 l
7312.61 1785.51 l
7319.51 1898.46 l
7326.43 1618.77 l
7333.33 1901.44 l
7340.25 1843.47 l
7347.14 1944.26 l
7354.04 1710.27 l
7360.96 1920.99 l
7367.86 1738.3 l
7374.78 1415.05 l
7381.68 1669.38 l
7388.59 1605.83 l
7395.49 1840.02 l
7402.41 1858.04 l
7409.31 1262.79 l
7416.23 1701.81 l
7423.13 1696.35 l
7430.02 1504.31 l
7436.94 1737.18 l
7443.84 1196.63 l
7450.76 1958.11 l
7457.66 1887.03 l
7464.57 1607.84 l
7471.47 1419.7 l
7478.39 1955.45 l
7485.29 1999.96 l
7499.11 989.129 l
7506 1829.74 l
7512.92 1715.27 l
7519.82 1751.43 l
7526.74 1536.91 l
7533.64 1605.77 l
7540.55 1633.39 l
7547.45 1913.62 l
7554.37 1908.04 l
7561.27 1907.36 l
7568.17 1896.47 l
7575.09 1479.53 l
7581.98 1932.1 l
7588.9 1650.48 l
7595.8 1594.23 l
7602.72 1916.37 l
7609.62 1122.35 l
7616.54 1549.75 l
7623.43 1828.07 l
7630.33 1651.85 l
7637.25 1869.5 l
7644.15 1711.57 l
7651.07 1970.45 l
7657.96 1592.14 l
7664.88 1779.52 l
7671.78 1301.54 l
7678.7 1790.72 l
7685.6 1540.01 l
7692.5 1968.86 l
7699.41 1632.06 l
7706.31 1420.54 l
7713.23 1349.82 l
7720.13 1683.88 l
7727.05 1355.91 l
7733.95 1911.11 l
7740.86 1846.52 l
7747.76 1526.32 l
7754.68 1575.56 l
7761.58 1737.56 l
7768.48 1273.19 l
7775.39 1311.44 l
7782.29 1838.11 l
7789.21 1814.03 l
7796.11 1601.59 l
7803.03 1832.29 l
7809.93 1777.53 l
7816.84 1930.46 l
7823.74 1663.61 l
7830.64 1533.21 l
7837.56 1496.64 l
7844.46 1868.91 l
7851.38 1695.73 l
7858.27 1454.06 l
7865.19 1713.47 l
7872.09 1037.87 l
7879.01 1992.35 l
7885.91 1897.57 l
7892.82 1588.95 l
7899.72 1908.37 l
7906.62 1666.6 l
7913.54 1747.21 l
7920.44 1607.92 l
7927.36 1564.74 l
7934.25 1577.39 l
7941.17 1911.11 l
7948.07 1492.17 l
7954.99 1730.99 l
7961.89 1805.05 l
7968.79 1900.45 l
7975.7 1526.92 l
7982.6 1636.32 l
7989.52 1641.24 l
7996.42 1677.61 l
8003.34 1725.64 l
8010.23 2060.3 l
8017.15 1625.49 l
8024.05 1355.4 l
8030.97 1794.6 l
8037.87 1556.73 l
8044.77 1957.75 l
8051.68 1609.41 l
8058.58 1628.8 l
8065.5 1722.52 l
8072.4 2066.43 l
8079.32 2014.79 l
8086.21 1487.34 l
8093.13 1692.33 l
8100.03 1984.46 l
8106.93 1424.26 l
8113.85 1771.93 l
8120.75 1333.63 l
8127.66 1644.63 l
8134.56 1493.46 l
8141.48 1480.1 l
8148.38 1476.88 l
8155.3 1704.19 l
8162.2 1418.71 l
8169.11 1608.61 l
8176.01 1157.08 l
8182.91 1755.26 l
8189.83 1649.96 l
8196.73 1147.48 l
8203.64 1324.25 l
8210.54 1601.51 l
8217.46 2054.06 l
8224.36 1586.98 l
8231.28 1931.65 l
8238.18 1635.86 l
8245.07 1611.58 l
8251.99 1599.92 l
8258.89 1501.92 l
8265.81 1899.49 l
8272.71 1713.93 l
8279.63 1381.07 l
8286.52 1694.98 l
8293.44 1905.5 l
8300.34 1880.55 l
8307.24 1780.98 l
8314.16 1035.02 l
8321.05 1553.62 l
8327.97 1590.49 l
8334.87 1654.47 l
8341.79 1807.39 l
8348.69 1433.72 l
8355.61 1784.69 l
8355.61 1784.69 l
S
Q
17.4227 w
2 J
0 g
0 G
893.352 620.832 m
893.352 4760.47 l
S
8758.66 620.832 m
8758.66 4760.47 l
S
893.352 620.832 m
8758.66 620.832 l
S
893.352 4760.47 m
8758.66 4760.47 l
S
q
893.352 620.832 7864.61 4139.64 re W n
[ 17.4227 52.2682 ] 0 d
8.71136 w
0 J
1 j
1455.16 620.832 m
1455.16 4760.47 l
S
Q
1455.16 620.832 m
1455.16 690.523 l
f
8.71136 w
0 J
1 j
1455.16 620.832 m
1455.16 690.523 l
S
1455.16 4760.47 m
1455.16 4690.78 l
f
1455.16 4760.47 m
1455.16 4690.78 l
S
q
893.352 620.832 7864.61 4139.64 re W n
[ 17.4227 52.2682 ] 0 d
2578.77 620.832 m
2578.77 4760.47 l
S
Q
2578.77 620.832 m
2578.77 690.523 l
f
2578.77 620.832 m
2578.77 690.523 l
S
2578.77 4760.47 m
2578.77 4690.78 l
f
2578.77 4760.47 m
2578.77 4690.78 l
S
q
893.352 620.832 7864.61 4139.64 re W n
[ 17.4227 52.2682 ] 0 d
3702.4 620.832 m
3702.4 4760.47 l
S
Q
3702.4 620.832 m
3702.4 690.523 l
f
3702.4 620.832 m
3702.4 690.523 l
S
3702.4 4760.47 m
3702.4 4690.78 l
f
3702.4 4760.47 m
3702.4 4690.78 l
S
q
893.352 620.832 7864.61 4139.64 re W n
[ 17.4227 52.2682 ] 0 d
4826.01 620.832 m
4826.01 4760.47 l
S
Q
4826.01 620.832 m
4826.01 690.523 l
f
4826.01 620.832 m
4826.01 690.523 l
S
4826.01 4760.47 m
4826.01 4690.78 l
f
4826.01 4760.47 m
4826.01 4690.78 l
S
q
893.352 620.832 7864.61 4139.64 re W n
[ 17.4227 52.2682 ] 0 d
5949.61 620.832 m
5949.61 4760.47 l
S
Q
5949.61 620.832 m
5949.61 690.523 l
f
5949.61 620.832 m
5949.61 690.523 l
S
5949.61 4760.47 m
5949.61 4690.78 l
f
5949.61 4760.47 m
5949.61 4690.78 l
S
q
893.352 620.832 7864.61 4139.64 re W n
[ 17.4227 52.2682 ] 0 d
7073.24 620.832 m
7073.24 4760.47 l
S
Q
7073.24 620.832 m
7073.24 690.523 l
f
7073.24 620.832 m
7073.24 690.523 l
S
7073.24 4760.47 m
7073.24 4690.78 l
f
7073.24 4760.47 m
7073.24 4690.78 l
S
q
893.352 620.832 7864.61 4139.64 re W n
[ 17.4227 52.2682 ] 0 d
8196.85 620.832 m
8196.85 4760.47 l
S
Q
8196.85 620.832 m
8196.85 690.523 l
f
8196.85 620.832 m
8196.85 690.523 l
S
8196.85 4760.47 m
8196.85 4690.78 l
f
8196.85 4760.47 m
8196.85 4690.78 l
S
q
893.352 620.832 7864.61 4139.64 re W n
[ 17.4227 52.2682 ] 0 d
893.352 1199.53 m
8758.66 1199.53 l
S
Q
893.352 1199.53 m
963.039 1199.53 l
f
893.352 1199.53 m
963.039 1199.53 l
S
8758.66 1199.53 m
8688.97 1199.53 l
f
8758.66 1199.53 m
8688.97 1199.53 l
S
q
893.352 620.832 7864.61 4139.64 re W n
[ 17.4227 52.2682 ] 0 d
893.352 2027.46 m
8758.66 2027.46 l
S
Q
893.352 2027.46 m
963.039 2027.46 l
f
893.352 2027.46 m
963.039 2027.46 l
S
8758.66 2027.46 m
8688.97 2027.46 l
f
8758.66 2027.46 m
8688.97 2027.46 l
S
q
893.352 620.832 7864.61 4139.64 re W n
[ 17.4227 52.2682 ] 0 d
893.352 2855.39 m
8758.66 2855.39 l
S
Q
893.352 2855.39 m
963.039 2855.39 l
f
893.352 2855.39 m
963.039 2855.39 l
S
8758.66 2855.39 m
8688.97 2855.39 l
f
8758.66 2855.39 m
8688.97 2855.39 l
S
q
893.352 620.832 7864.61 4139.64 re W n
[ 17.4227 52.2682 ] 0 d
893.352 3683.31 m
8758.66 3683.31 l
S
Q
893.352 3683.31 m
963.039 3683.31 l
f
893.352 3683.31 m
963.039 3683.31 l
S
8758.66 3683.31 m
8688.97 3683.31 l
f
8758.66 3683.31 m
8688.97 3683.31 l
S
q
893.352 620.832 7864.61 4139.64 re W n
[ 17.4227 52.2682 ] 0 d
893.352 4511.24 m
8758.66 4511.24 l
S
Q
893.352 4511.24 m
963.039 4511.24 l
f
893.352 4511.24 m
963.039 4511.24 l
S
8758.66 4511.24 m
8688.97 4511.24 l
f
8758.66 4511.24 m
8688.97 4511.24 l
S
893.352 620.832 m
928.195 620.832 l
f
893.352 620.832 m
928.195 620.832 l
S
8758.66 620.832 m
8723.82 620.832 l
f
8758.66 620.832 m
8723.82 620.832 l
S
893.352 766.625 m
928.195 766.625 l
f
893.352 766.625 m
928.195 766.625 l
S
8758.66 766.625 m
8723.82 766.625 l
f
8758.66 766.625 m
8723.82 766.625 l
S
893.352 870.063 m
928.195 870.063 l
f
893.352 870.063 m
928.195 870.063 l
S
8758.66 870.063 m
8723.82 870.063 l
f
8758.66 870.063 m
8723.82 870.063 l
S
893.352 950.301 m
928.195 950.301 l
f
893.352 950.301 m
928.195 950.301 l
S
8758.66 950.301 m
8723.82 950.301 l
f
8758.66 950.301 m
8723.82 950.301 l
S
893.352 1015.86 m
928.195 1015.86 l
f
893.352 1015.86 m
928.195 1015.86 l
S
8758.66 1015.86 m
8723.82 1015.86 l
f
8758.66 1015.86 m
8723.82 1015.86 l
S
893.352 1071.28 m
928.195 1071.28 l
f
893.352 1071.28 m
928.195 1071.28 l
S
8758.66 1071.28 m
8723.82 1071.28 l
f
8758.66 1071.28 m
8723.82 1071.28 l
S
893.352 1119.3 m
928.195 1119.3 l
f
893.352 1119.3 m
928.195 1119.3 l
S
8758.66 1119.3 m
8723.82 1119.3 l
f
8758.66 1119.3 m
8723.82 1119.3 l
S
893.352 1161.65 m
928.195 1161.65 l
f
893.352 1161.65 m
928.195 1161.65 l
S
8758.66 1161.65 m
8723.82 1161.65 l
f
8758.66 1161.65 m
8723.82 1161.65 l
S
893.352 1448.76 m
928.195 1448.76 l
f
893.352 1448.76 m
928.195 1448.76 l
S
8758.66 1448.76 m
8723.82 1448.76 l
f
8758.66 1448.76 m
8723.82 1448.76 l
S
893.352 1594.55 m
928.195 1594.55 l
f
893.352 1594.55 m
928.195 1594.55 l
S
8758.66 1594.55 m
8723.82 1594.55 l
f
8758.66 1594.55 m
8723.82 1594.55 l
S
893.352 1697.99 m
928.195 1697.99 l
f
893.352 1697.99 m
928.195 1697.99 l
S
8758.66 1697.99 m
8723.82 1697.99 l
f
8758.66 1697.99 m
8723.82 1697.99 l
S
893.352 1778.23 m
928.195 1778.23 l
f
893.352 1778.23 m
928.195 1778.23 l
S
8758.66 1778.23 m
8723.82 1778.23 l
f
8758.66 1778.23 m
8723.82 1778.23 l
S
893.352 1843.79 m
928.195 1843.79 l
f
893.352 1843.79 m
928.195 1843.79 l
S
8758.66 1843.79 m
8723.82 1843.79 l
f
8758.66 1843.79 m
8723.82 1843.79 l
S
893.352 1899.21 m
928.195 1899.21 l
f
893.352 1899.21 m
928.195 1899.21 l
S
8758.66 1899.21 m
8723.82 1899.21 l
f
8758.66 1899.21 m
8723.82 1899.21 l
S
893.352 1947.23 m
928.195 1947.23 l
f
893.352 1947.23 m
928.195 1947.23 l
S
8758.66 1947.23 m
8723.82 1947.23 l
f
8758.66 1947.23 m
8723.82 1947.23 l
S
893.352 1989.58 m
928.195 1989.58 l
f
893.352 1989.58 m
928.195 1989.58 l
S
8758.66 1989.58 m
8723.82 1989.58 l
f
8758.66 1989.58 m
8723.82 1989.58 l
S
893.352 2276.69 m
928.195 2276.69 l
f
893.352 2276.69 m
928.195 2276.69 l
S
8758.66 2276.69 m
8723.82 2276.69 l
f
8758.66 2276.69 m
8723.82 2276.69 l
S
893.352 2422.48 m
928.195 2422.48 l
f
893.352 2422.48 m
928.195 2422.48 l
S
8758.66 2422.48 m
8723.82 2422.48 l
f
8758.66 2422.48 m
8723.82 2422.48 l
S
893.352 2525.92 m
928.195 2525.92 l
f
893.352 2525.92 m
928.195 2525.92 l
S
8758.66 2525.92 m
8723.82 2525.92 l
f
8758.66 2525.92 m
8723.82 2525.92 l
S
893.352 2606.15 m
928.195 2606.15 l
f
893.352 2606.15 m
928.195 2606.15 l
S
8758.66 2606.15 m
8723.82 2606.15 l
f
8758.66 2606.15 m
8723.82 2606.15 l
S
893.352 2671.71 m
928.195 2671.71 l
f
893.352 2671.71 m
928.195 2671.71 l
S
8758.66 2671.71 m
8723.82 2671.71 l
f
8758.66 2671.71 m
8723.82 2671.71 l
S
893.352 2727.14 m
928.195 2727.14 l
f
893.352 2727.14 m
928.195 2727.14 l
S
8758.66 2727.14 m
8723.82 2727.14 l
f
8758.66 2727.14 m
8723.82 2727.14 l
S
893.352 2775.15 m
928.195 2775.15 l
f
893.352 2775.15 m
928.195 2775.15 l
S
8758.66 2775.15 m
8723.82 2775.15 l
f
8758.66 2775.15 m
8723.82 2775.15 l
S
893.352 2817.51 m
928.195 2817.51 l
f
893.352 2817.51 m
928.195 2817.51 l
S
8758.66 2817.51 m
8723.82 2817.51 l
f
8758.66 2817.51 m
8723.82 2817.51 l
S
893.352 3104.62 m
928.195 3104.62 l
f
893.352 3104.62 m
928.195 3104.62 l
S
8758.66 3104.62 m
8723.82 3104.62 l
f
8758.66 3104.62 m
8723.82 3104.62 l
S
893.352 3250.41 m
928.195 3250.41 l
f
893.352 3250.41 m
928.195 3250.41 l
S
8758.66 3250.41 m
8723.82 3250.41 l
f
8758.66 3250.41 m
8723.82 3250.41 l
S
893.352 3353.85 m
928.195 3353.85 l
f
893.352 3353.85 m
928.195 3353.85 l
S
8758.66 3353.85 m
8723.82 3353.85 l
f
8758.66 3353.85 m
8723.82 3353.85 l
S
893.352 3434.08 m
928.195 3434.08 l
f
893.352 3434.08 m
928.195 3434.08 l
S
8758.66 3434.08 m
8723.82 3434.08 l
f
8758.66 3434.08 m
8723.82 3434.08 l
S
893.352 3499.64 m
928.195 3499.64 l
f
893.352 3499.64 m
928.195 3499.64 l
S
8758.66 3499.64 m
8723.82 3499.64 l
f
8758.66 3499.64 m
8723.82 3499.64 l
S
893.352 3555.06 m
928.195 3555.06 l
f
893.352 3555.06 m
928.195 3555.06 l
S
8758.66 3555.06 m
8723.82 3555.06 l
f
8758.66 3555.06 m
8723.82 3555.06 l
S
893.352 3603.08 m
928.195 3603.08 l
f
893.352 3603.08 m
928.195 3603.08 l
S
8758.66 3603.08 m
8723.82 3603.08 l
f
8758.66 3603.08 m
8723.82 3603.08 l
S
893.352 3645.43 m
928.195 3645.43 l
f
893.352 3645.43 m
928.195 3645.43 l
S
8758.66 3645.43 m
8723.82 3645.43 l
f
8758.66 3645.43 m
8723.82 3645.43 l
S
893.352 3932.54 m
928.195 3932.54 l
f
893.352 3932.54 m
928.195 3932.54 l
S
8758.66 3932.54 m
8723.82 3932.54 l
f
8758.66 3932.54 m
8723.82 3932.54 l
S
893.352 4078.34 m
928.195 4078.34 l
f
893.352 4078.34 m
928.195 4078.34 l
S
8758.66 4078.34 m
8723.82 4078.34 l
f
8758.66 4078.34 m
8723.82 4078.34 l
S
893.352 4181.78 m
928.195 4181.78 l
f
893.352 4181.78 m
928.195 4181.78 l
S
8758.66 4181.78 m
8723.82 4181.78 l
f
8758.66 4181.78 m
8723.82 4181.78 l
S
893.352 4262.01 m
928.195 4262.01 l
f
893.352 4262.01 m
928.195 4262.01 l
S
8758.66 4262.01 m
8723.82 4262.01 l
f
8758.66 4262.01 m
8723.82 4262.01 l
S
893.352 4327.57 m
928.195 4327.57 l
f
893.352 4327.57 m
928.195 4327.57 l
S
8758.66 4327.57 m
8723.82 4327.57 l
f
8758.66 4327.57 m
8723.82 4327.57 l
S
893.352 4382.99 m
928.195 4382.99 l
f
893.352 4382.99 m
928.195 4382.99 l
S
8758.66 4382.99 m
8723.82 4382.99 l
f
8758.66 4382.99 m
8723.82 4382.99 l
S
893.352 4431.01 m
928.195 4431.01 l
f
893.352 4431.01 m
928.195 4431.01 l
S
8758.66 4431.01 m
8723.82 4431.01 l
f
8758.66 4431.01 m
8723.82 4431.01 l
S
893.352 4473.36 m
928.195 4473.36 l
f
893.352 4473.36 m
928.195 4473.36 l
S
8758.66 4473.36 m
8723.82 4473.36 l
f
8758.66 4473.36 m
8723.82 4473.36 l
S
893.352 4760.47 m
928.195 4760.47 l
f
893.352 4760.47 m
928.195 4760.47 l
S
8758.66 4760.47 m
8723.82 4760.47 l
f
8758.66 4760.47 m
8723.82 4760.47 l
S
1 G
1 g
6610.01 3931.32 2023.21 703.703 re
f
17.4227 w
0 j
0 g
0 G
6610.01 3931.32 2023.21 703.703 re
S
2 J
1 j
0 0 1 rg
0 0 1 RG
6785.63 4278.27 m
7136.87 4278.27 l
S
q
1254 3920 0 0 re W n
0 0 0 1 K
0 0 0 1 k
q 1672.58 0 0 -8.36291 -1671.14 3775.53 cm
BI
/IM true
/W 1
/H 1
/BPC 1
/F/A85
ID
!!~>
EI Q
Q
0 0 0 RG
0 0 0 rg
q
17.4227 0 0 17.4227 0 0 cm BT
/R7 11.9552 Tf
1 0 0 1 71.393 22.7265 Tm
[<00>4.11235]TJ
/R9 11.9552 Tf
9.23991 0 Td
[(1)-2.83709]TJ
/R11 11.9552 Tf
5.87998 0 Td
(:)Tj
/R9 11.9552 Tf
3.23998 0 Td
[(5)-2.83709]TJ
/R7 11.9552 Tf
46.1312 0 Td
[<00>4.11293]TJ
/R9 11.9552 Tf
9.23991 0 Td
[(1)-2.83768]TJ
/R11 11.9552 Tf
5.87998 0 Td
(:)Tj
/R9 11.9552 Tf
3.23998 0 Td
[(0)-2.83768]TJ
/R7 11.9552 Tf
46.1321 0 Td
[<00>4.11293]TJ
/R9 11.9552 Tf
9.23991 0 Td
[(0)-2.83768]TJ
/R11 11.9552 Tf
5.87998 0 Td
(:)Tj
/R9 11.9552 Tf
3.23998 0 Td
[(5)-2.83768]TJ
50.7803 0.0360969 Td
[(0)-2.83885]TJ
/R11 11.9552 Tf
5.87998 0 Td
(:)Tj
/R9 11.9552 Tf
3.23998 0 Td
[(0)-4142.64(0)-2.83885]TJ
/R11 11.9552 Tf
61.252 0 Td
(:)Tj
/R9 11.9552 Tf
3.23998 0 Td
[(5)-4142.56(1)-2.83885]TJ
/R11 11.9552 Tf
61.2511 0 Td
(:)Tj
/R9 11.9552 Tf
3.23998 0 Td
[(0)-4142.56(1)-2.83885]TJ
/R11 11.9552 Tf
61.2511 0 Td
(:)Tj
/R9 11.9552 Tf
3.23998 0 Td
[(5)-2.83651]TJ
/R13 13.9477 Tf
-274.853 -14.3901 Td
[(O)3.68008(p)-2.43932(t)1.84054(i)-3.33147(c)-3.38471(a)-3.231(l)-270.046(F)4.53304(r)-3.38572(e)0.992608(q)-3.231(u)0.146681(e)0.992608(n)0.14869(c)-3.38572(y)-263.122([)-2.53778(P)-4.07693(H)-1.54718(z)-0.797703(])-2.53979]TJ
/R9 11.9552 Tf
-172.509 57.1762 Td
[(1)-2.83739(0)-2.83768]TJ
/R15 7.97011 Tf
11.7602 4.43992 Td
[<00>-2.09353]TJ
/R17 7.97011 Tf
6.5999 0 Td
[(4)4.03147]TJ
/R9 11.9552 Tf
-18.3601 43.08 Td
[(1)-2.83739(0)-2.83768]TJ
/R15 7.97011 Tf
11.7602 4.31997 Td
[<00>-2.09353]TJ
/R17 7.97011 Tf
6.5999 0 Td
[(3)4.03147]TJ
/R9 11.9552 Tf
-18.3601 43.2001 Td
[(1)-2.83739(0)-2.83768]TJ
/R15 7.97011 Tf
11.7602 4.31997 Td
[<00>-2.09353]TJ
/R17 7.97011 Tf
6.5999 0 Td
[(2)4.03147]TJ
/R9 11.9552 Tf
-18.3601 43.1999 Td
[(1)-2.83739(0)-2.83768]TJ
/R15 7.97011 Tf
11.7602 4.31997 Td
[<00>-2.09353]TJ
/R17 7.97011 Tf
6.5999 0 Td
[(1)4.03147]TJ
/R9 11.9552 Tf
-11.773 43.2001 Td
[(1)-2.83739(0)-2.83768]TJ
/R17 7.97011 Tf
11.76 4.31997 Td
[(0)4.03147]TJ
/R13 13.9477 Tf
0 1 -1 -0 16.338 103.742 Tm
[(I)2.63272(n)0.146681(t)1.84054(e)0.993613(n)0.146681(s)-1.59139(i)-3.33147(t)1.84054(y)-280.335([)-2.53879(a)-3.231(.)2.68547(u)0.147686(.)2.68547(])-2.53879]TJ
/R13 14.3462 Tf
1 0 0 1 425.47 249.904 Tm
[(S)2.65678(p)-3.15297(e)-1.87537(c)0.677868(t)-4.13363(r)0.679822(u)0.386795(m)2.35984]TJ
15.4999 TL
T*[(i)-2.85408(n)0.386795(t)-4.13363(e)-1.87342(n)0.386795(s)2.9498(i)-2.85213(t)-4.13754(y)1.67221]TJ
/R13 14.944 Tf
-328.677 45.8419 Td
[(S)3.6598(p)3.87031(e)2.1398(c)2.34985(t)3.5604(r)2.34985(u)0.720145(m)-291.414(a)1.9307(n)0.720145(d)-285.211(P)0.510102(h)0.720145(a)1.9307(s)-2.73992(e)-278.917(o)2.1398(f)-277.278(t)3.55946(h)0.720145(e)-278.912(F)56.7226(o)2.1398(u)0.720145(r)2.34797(i)1.83037(e)2.1398(r)42.4942(-)3.76951(T)0.510102(r)2.34985(a)1.92976(n)0.718269(s)-2.73805(f)3.76763(o)2.1398(r)2.34985(m)-2.33109]TJ
ET
Q
Q

endstream
endobj
pagesave restore
%%PageTrailer
%%Trailer
end
cleartomark
countdictstack
exch sub { end } repeat
restore
%%EOF

%%EndDocument
 @endspecial -128 2303 a Fl(Figure)38 b(1:)52 b(\(Color)37
b(Online\))h(Sp)s(ectrum)g(of)f(the)g(pulse)h(in)g(a)f(lin-log)f
(scale,)k(to)c(enhance)j(the)e(presence)j(of)-128 2424
y(the)33 b(t)m(w)m(o)h(terms)f(in)g(simmetrical)h(p)s(osition)f(resp)s
(ect)h(to)e(the)h(cen)m(ter.)p 0 TeXcolorgray -128 2810
a Fk(3)162 b(System)53 b(setup)-128 3058 y Fi(3.1)136
b(Laser)45 b(Pulses)g(Source)-128 3243 y Fl(Our)36 b(source)h(of)e
(ultrafast)g(laser)h(pulses)i(is)e(a)f(Ti:Sapphire)i(laser)g(whic)m(h)g
(generates)f(pulses)i(of)d(30)16 b(fs)36 b(with)-128
3363 y(an)45 b(energy)g(of)f(700)15 b(mJ)45 b(at)f(a)g(rep)s(etition)h
(rate)f(of)g(1)16 b(kHz)q(.)78 b(Those)46 b(pulses)g(are)e(successiv)m
(ely)49 b(sp)s(ectrally)-128 3483 y(broadened)29 b(in)g(a)e(1)16
b(m)29 b(long)e(hollo)m(w)i(\014bre)f(\(250)16 b Fa(\265)p
Fl(m)28 b(inner)h(core)f(diameter\))h(and)f(then)h(compressed)h(in)f
(time)-128 3604 y(b)m(y)g(ultrabroadband)e(c)m(hirp)s(ed)i(mirrors.)43
b(The)28 b(compression)h(is)f(ev)m(en)m(tually)i(\014ne-tuned)f(b)m(y)f
(a)g(pair)f(of)g(fused)-128 3724 y(silica)33 b(w)m(edges,)h(to)e
(obtain)g(at)g(the)g(end)h(of)e(the)i(pro)s(cess)g(an)f(ultrafast)g
(laser)g(pulse)h(of)f(3)p Fh(:)p Fl(8)16 b(fs)32 b(duration)g(and)-128
3844 y(energy)i(up)f(to)f(250)16 b(mJ.)19 3965 y(This)36
b(source)f(is)h(rather)e(unique)j(and)d(w)m(e)i(had)f(therefore)g(to)g
(sc)m(hedule)i(its)e(use)h(compatibly)f(with)h(the)-128
4085 y(other)d(p)s(eople)g(in)g(the)g(researc)m(h)h(group.)-128
4345 y Fj(3.1.1)113 b(HeNe)37 b(CW)g(laser)-128 4530
y Fl(W)-8 b(e)37 b(also)g(used)h(a)e(con)m(tin)m(uous)j(w)m(a)m(v)m(e)f
(HeNe)g(laser,)g(generating)f(a)f(collimated)i(red)f(b)s(eam)g(of)f(w)m
(a)m(v)m(elength)-128 4650 y Fh(\025)-71 4665 y Ff(H)5
b(eN)i(e)153 4650 y Fl(=)27 b(632)p Fh(:)p Fl(8)16 b(nm)q(.)42
b(With)30 b(its)g(long)f(coherence)j(length)e(and)f(small)i(b)s(eam)e
(w)m(aist)i(w)m(as)f(a)g(useful)g(prealign-)-128 4771
y(men)m(t)k(to)s(ol.)p 0 TeXcolorgray 1856 6192 a(3)p
0 TeXcolorgray eop end
%%Page: 4 10
TeXDict begin 4 9 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -128 -28 a Fi(3.2)136 b(Mac)l(h-Zender)44
b(in)l(terferometer)p 0 TeXcolorgray 211 2517 a
tx@Dict begin  tx@NodeDict begin {0.0 0.0 0.0 227.62195 3 -1 roll add
3 1 roll add exch } false /N@IN 10 {InitPnode } /NodeScale {} def NewNode
end  end
 211 2517
a 211 2517 a
tx@Dict begin  tx@NodeDict begin {0.0 0.0 398.33841 113.81097 3 -1
roll add 3 1 roll add exch } false /N@OUT 10 {InitPnode } /NodeScale
{} def NewNode end  end
 211 2517 a 211 2517 a
tx@Dict begin  tx@NodeDict begin {0.0 0.0 56.90549 227.62195 3 -1 roll
add 3 1 roll add exch } false /N@BSA 10 {InitPnode } /NodeScale {}
def NewNode end  end
 211 2517 a 211 2517
a
tx@Dict begin  tx@NodeDict begin {0.0 0.0 199.1692 113.81097 3 -1 roll
add 3 1 roll add exch } false /N@BSB 10 {InitPnode } /NodeScale {}
def NewNode end  end
 211 2517 a 211 2517 a
tx@Dict begin  tx@NodeDict begin {0.0 0.0 56.90549 56.90549 3 -1 roll
add 3 1 roll add exch } false /N@C 10 {InitPnode } /NodeScale {} def
NewNode end  end
 211 2517 a 211 2517 a
tx@Dict begin  tx@NodeDict begin {0.0 0.0 113.81097 56.90549 3 -1 roll
add 3 1 roll add exch } false /N@D 10 {InitPnode } /NodeScale {} def
NewNode end  end
 211 2517
a 211 2517 a
tx@Dict begin  tx@NodeDict begin {0.0 0.0 113.81097 113.81097 3 -1
roll add 3 1 roll add exch } false /N@E 10 {InitPnode } /NodeScale
{} def NewNode end  end
 211 2517 a 211 2517 a
tx@Dict begin  tx@NodeDict begin {0.0 0.0 170.71646 113.81097 3 -1
roll add 3 1 roll add exch } false /N@Focus 10 {InitPnode } /NodeScale
{} def NewNode end  end
 211 2517 a 211 2517
a
tx@Dict begin  tx@NodeDict begin {0.0 0.0 312.98018 227.62195 3 -1
roll add 3 1 roll add exch } false /N@G 10 {InitPnode } /NodeScale
{} def NewNode end  end
 211 2517 a 211 2517 a
tx@Dict begin  tx@NodeDict begin {0.0 0.0 312.98018 170.71646 3 -1
roll add 3 1 roll add exch } false /N@H 10 {InitPnode } /NodeScale
{} def NewNode end  end
 211 2517 a 211 2517 a
tx@Dict begin  tx@NodeDict begin {0.0 0.0 199.1692 170.71646 3 -1 roll
add 3 1 roll add exch } false /N@I 10 {InitPnode } /NodeScale {} def
NewNode end  end
 211 2517
a 211 2517 a
tx@Dict begin tx@OptexpDict begin InitOptexpComp  end  end
 211 2517 a 211 2517 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin tx@NodeDict
begin tx@NodeDict /N@IN known { /N@IN load GetCenter } { 0 0 } ifelse
end  28.45274 div exch 28.45274 div exch  tx@NodeDict begin tx@NodeDict
/N@C known { /N@C load GetCenter } { 0 0 } ifelse end  28.45274 div
exch 28.45274 div exch  tx@NodeDict begin tx@NodeDict /N@BSA known
{ /N@BSA load GetCenter } { 0 0 } ifelse end  28.45274 div exch 28.45274
div exch  calcNodes /exch@ref@OE@@1 ED X@A Y@A end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@1@A 10 {InitPnode } /NodeScale {}
def NewNode end  end
 211 2517 a 211 2517
a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin X@B Y@B end
 28.45274 mul exch 28.45274 mul exch  } false /N@OE@@1@B 10 {InitPnode
} /NodeScale {} def NewNode end  end
 211 2517 a 211 2517 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@BSA
known { /N@BSA load GetCenter } { 0 0 } ifelse end } false /N@OE@@1Origin
10 {InitPnode } /NodeScale {} def NewNode end  end
 211 2517 a 211 2517 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@IN
known { /N@IN load GetCenter } { 0 0 } ifelse end } false /N@OE@@1A
10 {InitPnode } /NodeScale {} def NewNode end  end
 211 2517
a 211 2517 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@C
known { /N@C load GetCenter } { 0 0 } ifelse end } false /N@OE@@1B
10 {InitPnode } /NodeScale {} def NewNode end  end
 211 2517 a 211 2517 a
tx@Dict begin tx@OptexpDict begin /@xref [0 ] def /@yref [0 ] def /@@ang
0 def  end  end
 211 2517 a 211 2517
a
tx@Dict begin tx@OptexpDict begin /N@OE@@1@A @GetCenter /N@OE@@1@B
@GetCenter @ABVect exch dup 0 gt 3 1 roll 0 eq exch 0 lt and or { /RefFac
-1 def } if  end  end
 211 2517 a 211 2517 a
tx@Dict begin tx@OptexpDict begin /@@x 0.8  0.5 sqrt mul def  end 
end
 211 2517 a 211 2517 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@OE@@1@A /N@OE@@1@B InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 211 2517
a 211 2517 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 211 2517 a 211 2517 a
tx@Dict begin  tx@NodeDict begin /t .5 def LPut end PutBegin  end
 211 2517 a 211 2517
a
tx@Dict begin NAngle  RotBegin  end
 211 2517 a 211 2517 a
tx@Dict begin {  0.  neg  0.   28.45274 mul exch 28.45274 mul exch
 } PutCoor PutBegin  end
 211 2517 a 211 2517 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  0 0 DefineExtNode
end  28.45274 mul exch 28.45274 mul exch  } false /N@OE@@1Rotref 10
{InitPnode } /NodeScale {} def NewNode end  end
 211 2517
a 211 2517 a
tx@Dict begin  gsave { tx@NodeDict begin tx@NodeDict /N@OE@@1Rotref
known { /N@OE@@1Rotref load GetCenter } { 0 0 } ifelse end /yRot ED
/xRot ED 0.  dup cos /cosA ED sin /sinA ED /ax cosA def /by sinA def
/cx sinA neg def /dy cosA def /ex xRot cosA mul neg xRot add yRot sinA
mul add def /fy xRot sinA mul neg yRot add yRot cosA mul sub def [ax
by cx dy ex fy] concat }  tx@3Ddict begin TMChange end  end
 211 2517 a 211 2517 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin @@x0 @@y0 end
 28.45274 mul exch 28.45274 mul exch  } false /N@OE@@1Center 10 {InitPnode
} /NodeScale {} def NewNode end  end
 211 2517 a 211 2517
a
tx@Dict begin tx@OptexpDict begin tx@NodeDict begin /NodeScale {} def
end [ {0 0} {1 0} 1.5  0.5 mul neg 1.5  0.5 mul trans {PlainIfc} 1
1  true true false (OE@@1) { 28.45274 mul exch 28.45274 mul exch  }
NewOptexpComp  end  end
 211 2517 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [  1.5  2.0 div 2 sqrt mul 0  28.45274
mul exch 28.45274 mul exch   1.5  2.0 div neg 2 sqrt mul 0  28.45274
mul exch 28.45274 mul exch    /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 211
2517 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  /N@OE@@1Center
@GetCenter 0.0 42.67911 -135.  45.  add matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@1Label 10 {InitPnode } /NodeScale {} def NewNode
end  end
 211 2517 a 211 2517 a
tx@Dict begin   tx@3Ddict begin TMRestore end grestore  end
 211 2517 a 211 2517 a
tx@Dict begin  PutEnd  end
 211
2517 a 211 2517 a
tx@Dict begin RotEnd  end
 211 2517 a 211 2517 a
tx@Dict begin PutEnd  end
 211 2517 a 211
2517 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@1Rotref
@GetCenter 2 copy /N@OE@@1A @GetCenter 0.  neg  0.   28.45274 mul exch
28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@1TrefA 10 {InitPnode } /NodeScale
{} def NewNode end  end
 211 2517 a 211 2517 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@1Rotref
@GetCenter 2 copy /N@OE@@1B @GetCenter 0.  neg  0.   28.45274 mul exch
28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@1TrefB 10 {InitPnode } /NodeScale
{} def NewNode end  end
 211 2517 a 211 2517 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@1Rotref
@GetCenter 2 copy /N@OE@@1@A @GetCenter 0.  neg  0.   28.45274 mul
exch 28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@1@TrefA 10 {InitPnode } /NodeScale
{} def NewNode end  end
 211
2517 a 211 2517 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@1Rotref
@GetCenter 2 copy /N@OE@@1@B @GetCenter 0.  neg  0.   28.45274 mul
exch 28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@1@TrefB 10 {InitPnode } /NodeScale
{} def NewNode end  end
 211 2517 a 211 2517 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@OE@@1Label known {
/N@OE@@1Label load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 211 2517 a 125
2551 a Fl(BS1)211 2517 y
tx@Dict begin  PutEnd  end
 211 2517 a 211 2517 a
tx@Dict begin tx@OptexpDict begin InitOptexpComp  end  end
 211 2517
a 211 2517 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin tx@NodeDict
begin tx@NodeDict /N@BSA known { /N@BSA load GetCenter } { 0 0 } ifelse
end  28.45274 div exch 28.45274 div exch  tx@NodeDict begin tx@NodeDict
/N@D known { /N@D load GetCenter } { 0 0 } ifelse end  28.45274 div
exch 28.45274 div exch  tx@NodeDict begin tx@NodeDict /N@C known {
/N@C load GetCenter } { 0 0 } ifelse end  28.45274 div exch 28.45274
div exch  calcNodes /exch@ref@OE@@2 ED X@A Y@A end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@2@A 10 {InitPnode } /NodeScale {}
def NewNode end  end
 211 2517 a 211 2517 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin X@B Y@B end
 28.45274 mul exch 28.45274 mul exch  } false /N@OE@@2@B 10 {InitPnode
} /NodeScale {} def NewNode end  end
 211 2517 a 211 2517
a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@C
known { /N@C load GetCenter } { 0 0 } ifelse end } false /N@OE@@2Origin
10 {InitPnode } /NodeScale {} def NewNode end  end
 211 2517 a 211 2517 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@BSA
known { /N@BSA load GetCenter } { 0 0 } ifelse end } false /N@OE@@2A
10 {InitPnode } /NodeScale {} def NewNode end  end
 211 2517 a 211 2517 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@D
known { /N@D load GetCenter } { 0 0 } ifelse end } false /N@OE@@2B
10 {InitPnode } /NodeScale {} def NewNode end  end
 211 2517
a 211 2517 a
tx@Dict begin tx@OptexpDict begin /@xref [0 ] def /@yref [0 ] def /@@ang
0 def  end  end
 211 2517 a 211 2517 a
tx@Dict begin tx@OptexpDict begin /N@OE@@2@A @GetCenter /N@OE@@2@B
@GetCenter @ABVect exch dup 0 gt 3 1 roll 0 eq exch 0 lt and or { /RefFac
-1 def } if  end  end
 211 2517 a 211 2517
a
tx@Dict begin tx@OptexpDict begin /@@x 1.  0.5 mul def end  end
 211 2517 a 211 2517 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@OE@@2@A /N@OE@@2@B InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 211 2517 a 211 2517 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 211 2517
a 211 2517 a
tx@Dict begin  tx@NodeDict begin /t .5 def LPut end PutBegin  end
 211 2517 a 211 2517 a
tx@Dict begin NAngle  RotBegin  end
 211 2517 a 211 2517
a
tx@Dict begin {  0.  neg  0.   28.45274 mul exch 28.45274 mul exch
 } PutCoor PutBegin  end
 211 2517 a 211 2517 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  0 0 DefineExtNode
end  28.45274 mul exch 28.45274 mul exch  } false /N@OE@@2Rotref 10
{InitPnode } /NodeScale {} def NewNode end  end
 211 2517 a 211 2517 a
tx@Dict begin  gsave { tx@NodeDict begin tx@NodeDict /N@OE@@2Rotref
known { /N@OE@@2Rotref load GetCenter } { 0 0 } ifelse end /yRot ED
/xRot ED 0.  dup cos /cosA ED sin /sinA ED /ax cosA def /by sinA def
/cx sinA neg def /dy cosA def /ex xRot cosA mul neg xRot add yRot sinA
mul add def /fy xRot sinA mul neg yRot add yRot cosA mul sub def [ax
by cx dy ex fy] concat }  tx@3Ddict begin TMChange end  end
 211 2517
a 211 2517 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin @@x0 @@y0 end
 28.45274 mul exch 28.45274 mul exch  } false /N@OE@@2Center 10 {InitPnode
} /NodeScale {} def NewNode end  end
 211 2517 a 211 2517 a
tx@Dict begin tx@OptexpDict begin [ {0 0} {1 0} 1.5  -0.5 mul dup neg
refl {PlainIfc}  1   false  true false (OE@@2) { 28.45274 mul exch
28.45274 mul exch  } NewOptexpComp  end  end
 211 2517 a 211 2517
a
tx@Dict begin  tx@NodeDict begin {0.0 0.0 } false /N@OE@@2Center 10
{InitPnode } /NodeScale {} def NewNode end  end
 211 2517 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray   0. true  1.5  0.5 mul neg
0.15    28.45274 mul exch 28.45274 mul exch   1.5  0.5 mul 0  28.45274
mul exch 28.45274 mul exch  0 Frame  gsave 90 rotate  /clipType { clip
} def 45. rotate 0.4 SLW 0  setgray 1.12 0.0 0.0 LineFill  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [  1.5  0.5 mul CLW 28.45274 2 mul div
  28.45274 mul exch 28.45274 mul exch   1.5  0.5 mul neg CLW 28.45274
2 mul div   28.45274 mul exch 28.45274 mul exch    /Lineto /lineto
load def 0  setlinejoin false Line  gsave 1.6 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 211 2517 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  /N@OE@@2Center
@GetCenter 0.0 22.76227 0.  0.  add matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@2Label 10 {InitPnode } /NodeScale {} def NewNode
end  end
 211 2517 a 211 2517
a
tx@Dict begin   tx@3Ddict begin TMRestore end grestore  end
 211 2517 a 211 2517 a
tx@Dict begin  PutEnd  end
 211 2517 a 211 2517 a
tx@Dict begin RotEnd  end
 211 2517
a 211 2517 a
tx@Dict begin PutEnd  end
 211 2517 a 211 2517 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@2Rotref
@GetCenter 2 copy /N@OE@@2A @GetCenter 0.  neg  0.   28.45274 mul exch
28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@2TrefA 10 {InitPnode } /NodeScale
{} def NewNode end  end
 211 2517 a 211 2517
a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@2Rotref
@GetCenter 2 copy /N@OE@@2B @GetCenter 0.  neg  0.   28.45274 mul exch
28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@2TrefB 10 {InitPnode } /NodeScale
{} def NewNode end  end
 211 2517 a 211 2517 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@2Rotref
@GetCenter 2 copy /N@OE@@2@A @GetCenter 0.  neg  0.   28.45274 mul
exch 28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@2@TrefA 10 {InitPnode } /NodeScale
{} def NewNode end  end
 211 2517 a 211 2517 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@2Rotref
@GetCenter 2 copy /N@OE@@2@B @GetCenter 0.  neg  0.   28.45274 mul
exch 28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@2@TrefB 10 {InitPnode } /NodeScale
{} def NewNode end  end
 211 2517
a 211 2517 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@OE@@2Label known {
/N@OE@@2Label load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 211 2517 a 142 2551 a Fl(M1)211 2517 y
tx@Dict begin  PutEnd  end
 211
2517 a 211 2517 a
tx@Dict begin tx@OptexpDict begin InitOptexpComp  end  end
 211 2517 a 211 2517 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin tx@NodeDict
begin tx@NodeDict /N@C known { /N@C load GetCenter } { 0 0 } ifelse
end  28.45274 div exch 28.45274 div exch  tx@NodeDict begin tx@NodeDict
/N@E known { /N@E load GetCenter } { 0 0 } ifelse end  28.45274 div
exch 28.45274 div exch  tx@NodeDict begin tx@NodeDict /N@D known {
/N@D load GetCenter } { 0 0 } ifelse end  28.45274 div exch 28.45274
div exch  calcNodes /exch@ref@OE@@3 ED X@A Y@A end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@3@A 10 {InitPnode } /NodeScale {}
def NewNode end  end
 211 2517 a 211
2517 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin X@B Y@B end
 28.45274 mul exch 28.45274 mul exch  } false /N@OE@@3@B 10 {InitPnode
} /NodeScale {} def NewNode end  end
 211 2517 a 211 2517 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@D
known { /N@D load GetCenter } { 0 0 } ifelse end } false /N@OE@@3Origin
10 {InitPnode } /NodeScale {} def NewNode end  end
 211 2517 a 211 2517 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@C
known { /N@C load GetCenter } { 0 0 } ifelse end } false /N@OE@@3A
10 {InitPnode } /NodeScale {} def NewNode end  end
 211
2517 a 211 2517 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@E
known { /N@E load GetCenter } { 0 0 } ifelse end } false /N@OE@@3B
10 {InitPnode } /NodeScale {} def NewNode end  end
 211 2517 a 211 2517 a
tx@Dict begin tx@OptexpDict begin /@xref [0 ] def /@yref [0 ] def /@@ang
0 def  end  end
 211 2517 a 211
2517 a
tx@Dict begin tx@OptexpDict begin /N@OE@@3@A @GetCenter /N@OE@@3@B
@GetCenter @ABVect exch dup 0 gt 3 1 roll 0 eq exch 0 lt and or { /RefFac
-1 def } if  end  end
 211 2517 a 211 2517 a
tx@Dict begin tx@OptexpDict begin /@@x 1.  0.5 mul def end  end
 211 2517 a 211 2517 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@OE@@3@A /N@OE@@3@B InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 211
2517 a 211 2517 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 211 2517 a 211 2517 a
tx@Dict begin  tx@NodeDict begin /t .5 def LPut end PutBegin  end
 211 2517 a 211
2517 a
tx@Dict begin NAngle  RotBegin  end
 211 2517 a 211 2517 a
tx@Dict begin {  0.  neg  0.   28.45274 mul exch 28.45274 mul exch
 } PutCoor PutBegin  end
 211 2517 a 211 2517 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  0 0 DefineExtNode
end  28.45274 mul exch 28.45274 mul exch  } false /N@OE@@3Rotref 10
{InitPnode } /NodeScale {} def NewNode end  end
 211
2517 a 211 2517 a
tx@Dict begin  gsave { tx@NodeDict begin tx@NodeDict /N@OE@@3Rotref
known { /N@OE@@3Rotref load GetCenter } { 0 0 } ifelse end /yRot ED
/xRot ED 0.  dup cos /cosA ED sin /sinA ED /ax cosA def /by sinA def
/cx sinA neg def /dy cosA def /ex xRot cosA mul neg xRot add yRot sinA
mul add def /fy xRot sinA mul neg yRot add yRot cosA mul sub def [ax
by cx dy ex fy] concat }  tx@3Ddict begin TMChange end  end
 211 2517 a 211 2517 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin @@x0 @@y0 end
 28.45274 mul exch 28.45274 mul exch  } false /N@OE@@3Center 10 {InitPnode
} /NodeScale {} def NewNode end  end
 211 2517 a 211
2517 a
tx@Dict begin tx@OptexpDict begin [ {0 0} {1 0} 1.5  -0.5 mul dup neg
refl {PlainIfc}  1   false  true false (OE@@3) { 28.45274 mul exch
28.45274 mul exch  } NewOptexpComp  end  end
 211 2517 a 211 2517 a
tx@Dict begin  tx@NodeDict begin {0.0 0.0 } false /N@OE@@3Center 10
{InitPnode } /NodeScale {} def NewNode end  end
 211 2517 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray   0. true  1.5  0.5 mul neg
0.15    28.45274 mul exch 28.45274 mul exch   1.5  0.5 mul 0  28.45274
mul exch 28.45274 mul exch  0 Frame  gsave 90 rotate  /clipType { clip
} def 45. rotate 0.4 SLW 0  setgray 1.12 0.0 0.0 LineFill  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [  1.5  0.5 mul CLW 28.45274 2 mul div
  28.45274 mul exch 28.45274 mul exch   1.5  0.5 mul neg CLW 28.45274
2 mul div   28.45274 mul exch 28.45274 mul exch    /Lineto /lineto
load def 0  setlinejoin false Line  gsave 1.6 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
211 2517 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  /N@OE@@3Center
@GetCenter 0.0 22.76227 0.  0.  add matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@3Label 10 {InitPnode } /NodeScale {} def NewNode
end  end
 211 2517 a 211 2517 a
tx@Dict begin   tx@3Ddict begin TMRestore end grestore  end
 211 2517 a 211 2517
a
tx@Dict begin  PutEnd  end
 211 2517 a 211 2517 a
tx@Dict begin RotEnd  end
 211 2517 a 211 2517 a
tx@Dict begin PutEnd  end
 211 2517
a 211 2517 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@3Rotref
@GetCenter 2 copy /N@OE@@3A @GetCenter 0.  neg  0.   28.45274 mul exch
28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@3TrefA 10 {InitPnode } /NodeScale
{} def NewNode end  end
 211 2517 a 211 2517 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@3Rotref
@GetCenter 2 copy /N@OE@@3B @GetCenter 0.  neg  0.   28.45274 mul exch
28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@3TrefB 10 {InitPnode } /NodeScale
{} def NewNode end  end
 211 2517 a 211 2517
a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@3Rotref
@GetCenter 2 copy /N@OE@@3@A @GetCenter 0.  neg  0.   28.45274 mul
exch 28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@3@TrefA 10 {InitPnode } /NodeScale
{} def NewNode end  end
 211 2517 a 211 2517 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@3Rotref
@GetCenter 2 copy /N@OE@@3@B @GetCenter 0.  neg  0.   28.45274 mul
exch 28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@3@TrefB 10 {InitPnode } /NodeScale
{} def NewNode end  end
 211 2517 a 211 2517 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@OE@@3Label known {
/N@OE@@3Label load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 211 2517
a 142 2551 a Fl(M2)211 2517 y
tx@Dict begin  PutEnd  end
 211 2517 a 211 2517 a
tx@Dict begin tx@OptexpDict begin InitOptexpComp  end  end
 211
2517 a 211 2517 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin tx@NodeDict
begin tx@NodeDict /N@D known { /N@D load GetCenter } { 0 0 } ifelse
end  28.45274 div exch 28.45274 div exch  tx@NodeDict begin tx@NodeDict
/N@Focus known { /N@Focus load GetCenter } { 0 0 } ifelse end  28.45274
div exch 28.45274 div exch  tx@NodeDict begin tx@NodeDict /N@E known
{ /N@E load GetCenter } { 0 0 } ifelse end  28.45274 div exch 28.45274
div exch  calcNodes /exch@ref@OE@@4 ED X@A Y@A end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@4@A 10 {InitPnode } /NodeScale {}
def NewNode end  end
 211 2517 a 211 2517 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin X@B Y@B end
 28.45274 mul exch 28.45274 mul exch  } false /N@OE@@4@B 10 {InitPnode
} /NodeScale {} def NewNode end  end
 211 2517 a 211
2517 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@E
known { /N@E load GetCenter } { 0 0 } ifelse end } false /N@OE@@4Origin
10 {InitPnode } /NodeScale {} def NewNode end  end
 211 2517 a 211 2517 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@D
known { /N@D load GetCenter } { 0 0 } ifelse end } false /N@OE@@4A
10 {InitPnode } /NodeScale {} def NewNode end  end
 211 2517 a 211 2517 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@Focus
known { /N@Focus load GetCenter } { 0 0 } ifelse end } false /N@OE@@4B
10 {InitPnode } /NodeScale {} def NewNode end  end
 211
2517 a 211 2517 a
tx@Dict begin tx@OptexpDict begin /@xref [0 ] def /@yref [0 ] def /@@ang
0 def  end  end
 211 2517 a 211 2517 a
tx@Dict begin tx@OptexpDict begin /N@OE@@4@A @GetCenter /N@OE@@4@B
@GetCenter @ABVect exch dup 0 gt 3 1 roll 0 eq exch 0 lt and or { /RefFac
-1 def } if  end  end
 211 2517 a 211
2517 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@OE@@4@A /N@OE@@4@B InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 211 2517 a 211 2517 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 211 2517 a 211 2517 a
tx@Dict begin  tx@NodeDict begin /t .5 def LPut end PutBegin  end
 211
2517 a 211 2517 a
tx@Dict begin NAngle  RotBegin  end
 211 2517 a 211 2517 a
tx@Dict begin {  0.  neg  0.   28.45274 mul exch 28.45274 mul exch
 } PutCoor PutBegin  end
 211 2517 a 211
2517 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  0 0 DefineExtNode
end  28.45274 mul exch 28.45274 mul exch  } false /N@OE@@4Rotref 10
{InitPnode } /NodeScale {} def NewNode end  end
 211 2517 a 211 2517 a
tx@Dict begin  gsave { tx@NodeDict begin tx@NodeDict /N@OE@@4Rotref
known { /N@OE@@4Rotref load GetCenter } { 0 0 } ifelse end /yRot ED
/xRot ED 0.  dup cos /cosA ED sin /sinA ED /ax cosA def /by sinA def
/cx sinA neg def /dy cosA def /ex xRot cosA mul neg xRot add yRot sinA
mul add def /fy xRot sinA mul neg yRot add yRot cosA mul sub def [ax
by cx dy ex fy] concat }  tx@3Ddict begin TMChange end  end
 211 2517 a 211 2517 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin @@x0 @@y0 end
 28.45274 mul exch 28.45274 mul exch  } false /N@OE@@4Center 10 {InitPnode
} /NodeScale {} def NewNode end  end
 211
2517 a 211 2517 a
tx@Dict begin tx@OptexpDict begin gsave STV CP T /N@OE@@4Origin @GetCenter
2 copy /N@OE@@4A @GetCenter VecSub /ay ED /ax ED /N@OE@@4B @GetCenter
VecSub /by ED /bx ED ax ay NormalizeVec bx by NormalizeVec VecAdd 2
copy Pyth abs 1e-4 lt { pop pop ax ay 90 matrix rotate dtransform }
if NormalizeVec 2 copy ax ay bx by VecAdd 2 copy Pyth abs 1e-4 lt {
pop pop ax ay } if NormalizeVec 4 copy 4 copy DotProd Acos 5 1 roll
Chirality mul /dOEangle exch def ax ay Pyth bx by Pyth 2 copy dup mul
exch dup mul add ax bx sub ay by sub Pyth dup mul exch sub 3 1 roll
-2 mul mul div Acos /OEangle exch def neg exch ax ay  28.45274 div
exch 28.45274 div exch  DotProd abs /@myht exch def grestore  end 
end
 211 2517 a 211 2517 a
tx@Dict begin tx@OptexpDict begin gsave STV CP T /N@OE@@4A @GetCenter
/N@OE@@4Center @GetCenter @ABVect NormalizeVec 2 copy 90 matrix rotate
dtransform /N@OE@@4B @GetCenter /N@OE@@4Center @GetCenter @ABVect 
28.45274 div exch 28.45274 div exch  2 copy 6 2 roll grestore DotProd
tx@Dict begin /POEzonalradius ED end DotProd tx@Dict begin dup /POEoapheight
ED neg dup dup mul POEzonalradius dup mul add sqrt add 0.5 POEzonalradius
dup mul div mul dup /POEoappar ED /POEangle 180 OEangle sub 0.5 mul
POEzonalradius 0 gt { 90 add } if DegToRad def end  end  end
 211 2517 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.8 SLW 0  setgray 
 0.8 SLW 0  setgray  /ArrowA { /lineto load stopped { moveto } if }
def /ArrowB { } def /ArrowInside { } def   /t POEzonalradius dup 0
gt {1.5 0.5 mul}{1.5 0.5 mul} ifelse add def /t1 POEzonalradius dup
0 gt {1.5 0.5 mul}{1.5 0.5 mul} ifelse sub def /dt t1 t sub 49 div
def /F@pstplot ((cos(POEangle)*((POEoappar*(t^2))-(0.25/POEoappar)+POEoapheight)+sin(POEangle)*(-t+POEzonalradius))|(cos(POEangle)*(-t+POEzonalradius)-sin(POEangle)*((POEoappar*(t^2))-(0.25/POEoappar)+POEoapheight)))
 tx@AlgToPs begin AlgToPs end cvx def /xy { F@pstplot 28.45274 mul
exch 28.45274 mul exch } def  /ps@Exit false def xy /lineto load stopped
{ moveto } if  49 1 sub { /t t dt add def xy  dup 1.e30 28.45274 mul
gt { moveto } { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse
} ifelse  ps@Exit { exit } if } repeat ps@Exit not { /t t1 def xy 
dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt {
moveto } { L } ifelse } ifelse  } if     clear mark tx@IntersectDict
begin GetFullPath end counttomark 1 add -1 roll pop count  end count
/ocount exch def
 
@endspecial 211 2517 a
tx@Dict begin tx@IntersectDict begin /PIT@OE@@4Path@A [ 3 -1 roll 2
add 2 roll ] def  end  end
 211 2517 a @beginspecial
@setspecial
 tx@Dict begin STP newpath end count /ocount exch def
 
@endspecial 211 2517 a
tx@Dict begin tx@OptexpDict begin tx@NodeDict begin /NodeScale {} def
end [ {0 0} tx@IntersectDict /PIT@OE@@4Path@A get 0 0 refl {PathIfc}
1  false true false (OE@@4) { 28.45274 mul exch 28.45274 mul exch 
} NewOptexpComp  end  end
 211 2517 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  tx@IntersectDict begin /PIT@OE@@4Path@A
currentdict exch known not { (You haven't defined the curve 'OE@@4Path@A')
== } if PIT@OE@@4Path@A -1.  -1.  {199 exch  tx@FuncDict begin BezierCurve
Points end pop } TraceCurveOrPath end  gsave 0.8 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 211 2517 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  /N@OE@@4Center
@GetCenter 0.0 22.76227 0.  0.  add matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@4Label 10 {InitPnode } /NodeScale {} def NewNode
end  end
 211 2517 a 211 2517
a
tx@Dict begin   tx@3Ddict begin TMRestore end grestore  end
 211 2517 a 211 2517 a
tx@Dict begin  PutEnd  end
 211 2517 a 211 2517 a
tx@Dict begin RotEnd  end
 211 2517
a 211 2517 a
tx@Dict begin PutEnd  end
 211 2517 a 211 2517 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@4Rotref
@GetCenter 2 copy /N@OE@@4A @GetCenter 0.  neg  0.   28.45274 mul exch
28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@4TrefA 10 {InitPnode } /NodeScale
{} def NewNode end  end
 211 2517 a 211 2517
a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@4Rotref
@GetCenter 2 copy /N@OE@@4B @GetCenter 0.  neg  0.   28.45274 mul exch
28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@4TrefB 10 {InitPnode } /NodeScale
{} def NewNode end  end
 211 2517 a 211 2517 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@4Rotref
@GetCenter 2 copy /N@OE@@4@A @GetCenter 0.  neg  0.   28.45274 mul
exch 28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@4@TrefA 10 {InitPnode } /NodeScale
{} def NewNode end  end
 211 2517 a 211 2517 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@4Rotref
@GetCenter 2 copy /N@OE@@4@B @GetCenter 0.  neg  0.   28.45274 mul
exch 28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@4@TrefB 10 {InitPnode } /NodeScale
{} def NewNode end  end
 211 2517
a 211 2517 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@OE@@4Label known {
/N@OE@@4Label load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 211 2517 a 104 2551 a Fl(O)m(AP)211 2517
y
tx@Dict begin  PutEnd  end
 211 2517 a 211 2517 a
tx@Dict begin tx@OptexpDict begin InitOptexpComp  end  end
 211 2517 a 211 2517 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@Focus
known { /N@Focus load GetCenter } { 0 0 } ifelse end } false /N@OE@@5A
10 {InitPnode } /NodeScale {} def NewNode end  end
 211 2517
a 211 2517 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@Focus
known { /N@Focus load GetCenter } { 0 0 } ifelse end } false /N@OE@@5B
10 {InitPnode } /NodeScale {} def NewNode end  end
 211 2517 a 211 2517 a
tx@Dict begin tx@OptexpDict begin /@xref [0 ] def /@yref [0 ] def /@@ang
0 def  end  end
 211 2517 a 211 2517
a
tx@Dict begin tx@OptexpDict begin /N@OE@@5A @GetCenter /N@OE@@5B @GetCenter
@ABVect exch dup 0 gt 3 1 roll 0 eq exch 0 lt and or { /RefFac -1 def
} if  end  end
 211 2517 a 211 2517 a
tx@Dict begin tx@OptexpDict begin /@@y 1.  0.5 mul def end  end
 211 2517 a 211 2517 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@OE@@5A /N@OE@@5B InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 211 2517
a 211 2517 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 211 2517 a 211 2517 a
tx@Dict begin  tx@NodeDict begin /t .5 def LPut end PutBegin  end
 211 2517 a 211 2517
a
tx@Dict begin NAngle  RotBegin  end
 211 2517 a 211 2517 a
tx@Dict begin {  0.  0.   28.45274 mul exch 28.45274 mul exch  } PutCoor
PutBegin  end
 211 2517 a 211 2517 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  0 0 DefineExtNode
end  28.45274 mul exch 28.45274 mul exch  } false /N@OE@@5Rotref 10
{InitPnode } /NodeScale {} def NewNode end  end
 211 2517
a 211 2517 a
tx@Dict begin  gsave { tx@NodeDict begin tx@NodeDict /N@OE@@5Rotref
known { /N@OE@@5Rotref load GetCenter } { 0 0 } ifelse end /yRot ED
/xRot ED 0.  dup cos /cosA ED sin /sinA ED /ax cosA def /by sinA def
/cx sinA neg def /dy cosA def /ex xRot cosA mul neg xRot add yRot sinA
mul add def /fy xRot sinA mul neg yRot add yRot cosA mul sub def [ax
by cx dy ex fy] concat }  tx@3Ddict begin TMChange end  end
 211 2517 a 211 2517 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin @@x0 @@y0 end
 28.45274 mul exch 28.45274 mul exch  } false /N@OE@@5Center 10 {InitPnode
} /NodeScale {} def NewNode end  end
 211 2517 a 211 2517
a
tx@Dict begin tx@OptexpDict begin tx@NodeDict begin /NodeScale {} def
end [ {-1e-4 0} {0 1} @@y0 @@y sub @@y0 @@y add trans {PlainIfc} {0
0} {0 1} 0.1  -0.5 mul dup neg trans {PlainIfc} {1e-4 0} {0 1} @@y0
@@y sub @@y0 @@y add trans {PlainIfc} [1.5]  false true false (OE@@5)
{ 28.45274 mul exch 28.45274 mul exch  } NewOptexpComp  end  end
 211 2517 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.84544 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [  0 0.1  2 div  28.45274 mul
exch 28.45274 mul exch   0 1.  2 div  28.45274 mul exch 28.45274 mul
exch    /Lineto /lineto load def 0  setlinejoin false Line  gsave 2.84544
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.84544 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [  0 0.1  -2 div  28.45274 mul
exch 28.45274 mul exch   0 1.  -2 div  28.45274 mul exch 28.45274 mul
exch    /Lineto /lineto load def 0  setlinejoin false Line  gsave 2.84544
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 211 2517 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  /N@OE@@5Center
@GetCenter 0.0 22.76227 0.  180.  add matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@5Label 10 {InitPnode } /NodeScale {} def NewNode
end  end
 211 2517 a 211 2517
a
tx@Dict begin   tx@3Ddict begin TMRestore end grestore  end
 211 2517 a 211 2517 a
tx@Dict begin  PutEnd  end
 211 2517 a 211 2517 a
tx@Dict begin RotEnd  end
 211 2517
a 211 2517 a
tx@Dict begin PutEnd  end
 211 2517 a 211 2517 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@5Rotref
@GetCenter 2 copy /N@OE@@5A @GetCenter 0.  0.   28.45274 mul exch 28.45274
mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@5TrefA 10 {InitPnode } /NodeScale {} def NewNode
end  end
 211 2517 a 211 2517
a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@5Rotref
@GetCenter 2 copy /N@OE@@5B @GetCenter 0.  0.   28.45274 mul exch 28.45274
mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@5TrefB 10 {InitPnode } /NodeScale {} def NewNode
end  end
 211 2517 a 211 2517 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@OE@@5Label known {
/N@OE@@5Label load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 211 2517 a 141 2551 a Fl(PH)211
2517 y
tx@Dict begin  PutEnd  end
 211 2517 a 211 2517 a
tx@Dict begin tx@OptexpDict begin  (1) (N) (OE@@5) CorrectDipoleIfc
 end  end
 211 2517 a 211 2517 a
tx@Dict begin tx@OptexpDict begin InitOptexpComp  end  end
 211
2517 a 211 2517 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin tx@NodeDict
begin tx@NodeDict /N@I known { /N@I load GetCenter } { 0 0 } ifelse
end  28.45274 div exch 28.45274 div exch  tx@NodeDict begin tx@NodeDict
/N@OUT known { /N@OUT load GetCenter } { 0 0 } ifelse end  28.45274
div exch 28.45274 div exch  tx@NodeDict begin tx@NodeDict /N@BSB known
{ /N@BSB load GetCenter } { 0 0 } ifelse end  28.45274 div exch 28.45274
div exch  calcNodes /exch@ref@OE@@6 ED X@A Y@A end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@6@A 10 {InitPnode } /NodeScale {}
def NewNode end  end
 211 2517 a 211 2517 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin X@B Y@B end
 28.45274 mul exch 28.45274 mul exch  } false /N@OE@@6@B 10 {InitPnode
} /NodeScale {} def NewNode end  end
 211 2517 a 211
2517 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@BSB
known { /N@BSB load GetCenter } { 0 0 } ifelse end } false /N@OE@@6Origin
10 {InitPnode } /NodeScale {} def NewNode end  end
 211 2517 a 211 2517 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@I
known { /N@I load GetCenter } { 0 0 } ifelse end } false /N@OE@@6A
10 {InitPnode } /NodeScale {} def NewNode end  end
 211 2517 a 211 2517 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@OUT
known { /N@OUT load GetCenter } { 0 0 } ifelse end } false /N@OE@@6B
10 {InitPnode } /NodeScale {} def NewNode end  end
 211
2517 a 211 2517 a
tx@Dict begin tx@OptexpDict begin /@xref [0 ] def /@yref [0 ] def /@@ang
0 def  end  end
 211 2517 a 211 2517 a
tx@Dict begin tx@OptexpDict begin /N@OE@@6@A @GetCenter /N@OE@@6@B
@GetCenter @ABVect exch dup 0 gt 3 1 roll 0 eq exch 0 lt and or { /RefFac
-1 def } if  end  end
 211 2517 a 211
2517 a
tx@Dict begin tx@OptexpDict begin /@@x 0.8  0.5 sqrt mul def  end 
end
 211 2517 a 211 2517 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@OE@@6@A /N@OE@@6@B InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 211 2517 a 211 2517 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 211
2517 a 211 2517 a
tx@Dict begin  tx@NodeDict begin /t .5 def LPut end PutBegin  end
 211 2517 a 211 2517 a
tx@Dict begin NAngle  RotBegin  end
 211 2517 a 211
2517 a
tx@Dict begin {  0.  neg  0.   28.45274 mul exch 28.45274 mul exch
 } PutCoor PutBegin  end
 211 2517 a 211 2517 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  0 0 DefineExtNode
end  28.45274 mul exch 28.45274 mul exch  } false /N@OE@@6Rotref 10
{InitPnode } /NodeScale {} def NewNode end  end
 211 2517 a 211 2517 a
tx@Dict begin  gsave { tx@NodeDict begin tx@NodeDict /N@OE@@6Rotref
known { /N@OE@@6Rotref load GetCenter } { 0 0 } ifelse end /yRot ED
/xRot ED 0.  dup cos /cosA ED sin /sinA ED /ax cosA def /by sinA def
/cx sinA neg def /dy cosA def /ex xRot cosA mul neg xRot add yRot sinA
mul add def /fy xRot sinA mul neg yRot add yRot cosA mul sub def [ax
by cx dy ex fy] concat }  tx@3Ddict begin TMChange end  end
 211
2517 a 211 2517 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin @@x0 @@y0 end
 28.45274 mul exch 28.45274 mul exch  } false /N@OE@@6Center 10 {InitPnode
} /NodeScale {} def NewNode end  end
 211 2517 a 211 2517 a
tx@Dict begin tx@OptexpDict begin tx@NodeDict begin /NodeScale {} def
end [ {0 0} {1 0} 1.5  0.5 mul neg 1.5  0.5 mul trans {PlainIfc} 1
1  true true false (OE@@6) { 28.45274 mul exch 28.45274 mul exch  }
NewOptexpComp  end  end
 211 2517 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [  1.5  2.0 div 2 sqrt mul 0  28.45274
mul exch 28.45274 mul exch   1.5  2.0 div neg 2 sqrt mul 0  28.45274
mul exch 28.45274 mul exch    /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 211 2517 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  /N@OE@@6Center
@GetCenter 0.0 42.67911 45.  45.  add matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@6Label 10 {InitPnode } /NodeScale {} def NewNode
end  end
 211 2517 a 211 2517
a
tx@Dict begin   tx@3Ddict begin TMRestore end grestore  end
 211 2517 a 211 2517 a
tx@Dict begin  PutEnd  end
 211 2517 a 211 2517 a
tx@Dict begin RotEnd  end
 211 2517
a 211 2517 a
tx@Dict begin PutEnd  end
 211 2517 a 211 2517 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@6Rotref
@GetCenter 2 copy /N@OE@@6A @GetCenter 0.  neg  0.   28.45274 mul exch
28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@6TrefA 10 {InitPnode } /NodeScale
{} def NewNode end  end
 211 2517 a 211 2517
a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@6Rotref
@GetCenter 2 copy /N@OE@@6B @GetCenter 0.  neg  0.   28.45274 mul exch
28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@6TrefB 10 {InitPnode } /NodeScale
{} def NewNode end  end
 211 2517 a 211 2517 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@6Rotref
@GetCenter 2 copy /N@OE@@6@A @GetCenter 0.  neg  0.   28.45274 mul
exch 28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@6@TrefA 10 {InitPnode } /NodeScale
{} def NewNode end  end
 211 2517 a 211 2517 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@6Rotref
@GetCenter 2 copy /N@OE@@6@B @GetCenter 0.  neg  0.   28.45274 mul
exch 28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@6@TrefB 10 {InitPnode } /NodeScale
{} def NewNode end  end
 211 2517
a 211 2517 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@OE@@6Label known {
/N@OE@@6Label load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 211 2517 a 125 2551 a Fl(BS2)211 2517 y
tx@Dict begin  PutEnd  end

211 2517 a 211 2517 a
tx@Dict begin tx@OptexpDict begin InitOptexpComp  end  end
 211 2517 a 211 2517 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin tx@NodeDict
begin tx@NodeDict /N@BSA known { /N@BSA load GetCenter } { 0 0 } ifelse
end  28.45274 div exch 28.45274 div exch  tx@NodeDict begin tx@NodeDict
/N@H known { /N@H load GetCenter } { 0 0 } ifelse end  28.45274 div
exch 28.45274 div exch  tx@NodeDict begin tx@NodeDict /N@G known {
/N@G load GetCenter } { 0 0 } ifelse end  28.45274 div exch 28.45274
div exch  calcNodes /exch@ref@OE@@7 ED X@A Y@A end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@7@A 10 {InitPnode } /NodeScale {}
def NewNode end  end
 211 2517
a 211 2517 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin X@B Y@B end
 28.45274 mul exch 28.45274 mul exch  } false /N@OE@@7@B 10 {InitPnode
} /NodeScale {} def NewNode end  end
 211 2517 a 211 2517 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@G
known { /N@G load GetCenter } { 0 0 } ifelse end } false /N@OE@@7Origin
10 {InitPnode } /NodeScale {} def NewNode end  end
 211 2517 a 211 2517
a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@BSA
known { /N@BSA load GetCenter } { 0 0 } ifelse end } false /N@OE@@7A
10 {InitPnode } /NodeScale {} def NewNode end  end
 211 2517 a 211 2517 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@H
known { /N@H load GetCenter } { 0 0 } ifelse end } false /N@OE@@7B
10 {InitPnode } /NodeScale {} def NewNode end  end
 211 2517 a 211 2517 a
tx@Dict begin tx@OptexpDict begin /@xref [0 ] def /@yref [0 ] def /@@ang
0 def  end  end
 211 2517
a 211 2517 a
tx@Dict begin tx@OptexpDict begin /N@OE@@7@A @GetCenter /N@OE@@7@B
@GetCenter @ABVect exch dup 0 gt 3 1 roll 0 eq exch 0 lt and or { /RefFac
-1 def } if  end  end
 211 2517 a 211 2517 a
tx@Dict begin tx@OptexpDict begin /@@x 1.  0.5 mul def end  end
 211 2517 a 211 2517
a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@OE@@7@A /N@OE@@7@B InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 211 2517 a 211 2517 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 211 2517 a 211 2517 a
tx@Dict begin  tx@NodeDict begin /t .5 def LPut end PutBegin  end
 211 2517
a 211 2517 a
tx@Dict begin NAngle  RotBegin  end
 211 2517 a 211 2517 a
tx@Dict begin {  0.  neg  0.   28.45274 mul exch 28.45274 mul exch
 } PutCoor PutBegin  end
 211 2517 a 211 2517
a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  0 0 DefineExtNode
end  28.45274 mul exch 28.45274 mul exch  } false /N@OE@@7Rotref 10
{InitPnode } /NodeScale {} def NewNode end  end
 211 2517 a 211 2517 a
tx@Dict begin  gsave { tx@NodeDict begin tx@NodeDict /N@OE@@7Rotref
known { /N@OE@@7Rotref load GetCenter } { 0 0 } ifelse end /yRot ED
/xRot ED 0.  dup cos /cosA ED sin /sinA ED /ax cosA def /by sinA def
/cx sinA neg def /dy cosA def /ex xRot cosA mul neg xRot add yRot sinA
mul add def /fy xRot sinA mul neg yRot add yRot cosA mul sub def [ax
by cx dy ex fy] concat }  tx@3Ddict begin TMChange end  end
 211 2517 a 211 2517 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin @@x0 @@y0 end
 28.45274 mul exch 28.45274 mul exch  } false /N@OE@@7Center 10 {InitPnode
} /NodeScale {} def NewNode end  end
 211 2517
a 211 2517 a
tx@Dict begin tx@OptexpDict begin [ {0 0} {1 0} 1.5  -0.5 mul dup neg
refl {PlainIfc}  1   false  true false (OE@@7) { 28.45274 mul exch
28.45274 mul exch  } NewOptexpComp  end  end
 211 2517 a 211 2517 a
tx@Dict begin  tx@NodeDict begin {0.0 0.0 } false /N@OE@@7Center 10
{InitPnode } /NodeScale {} def NewNode end  end
 211 2517 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray   0. true  1.5  0.5 mul neg
0.15    28.45274 mul exch 28.45274 mul exch   1.5  0.5 mul 0  28.45274
mul exch 28.45274 mul exch  0 Frame  gsave 90 rotate  /clipType { clip
} def 45. rotate 0.4 SLW 0  setgray 1.12 0.0 0.0 LineFill  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [  1.5  0.5 mul CLW 28.45274 2 mul div
  28.45274 mul exch 28.45274 mul exch   1.5  0.5 mul neg CLW 28.45274
2 mul div   28.45274 mul exch 28.45274 mul exch    /Lineto /lineto
load def 0  setlinejoin false Line  gsave 1.6 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
211 2517 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  /N@OE@@7Center
@GetCenter 0.0 22.76227 0.  0.  add matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@7Label 10 {InitPnode } /NodeScale {} def NewNode
end  end
 211 2517 a 211 2517 a
tx@Dict begin   tx@3Ddict begin TMRestore end grestore  end
 211 2517 a 211 2517
a
tx@Dict begin  PutEnd  end
 211 2517 a 211 2517 a
tx@Dict begin RotEnd  end
 211 2517 a 211 2517 a
tx@Dict begin PutEnd  end
 211 2517
a 211 2517 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@7Rotref
@GetCenter 2 copy /N@OE@@7A @GetCenter 0.  neg  0.   28.45274 mul exch
28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@7TrefA 10 {InitPnode } /NodeScale
{} def NewNode end  end
 211 2517 a 211 2517 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@7Rotref
@GetCenter 2 copy /N@OE@@7B @GetCenter 0.  neg  0.   28.45274 mul exch
28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@7TrefB 10 {InitPnode } /NodeScale
{} def NewNode end  end
 211 2517 a 211 2517
a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@7Rotref
@GetCenter 2 copy /N@OE@@7@A @GetCenter 0.  neg  0.   28.45274 mul
exch 28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@7@TrefA 10 {InitPnode } /NodeScale
{} def NewNode end  end
 211 2517 a 211 2517 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@7Rotref
@GetCenter 2 copy /N@OE@@7@B @GetCenter 0.  neg  0.   28.45274 mul
exch 28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@7@TrefB 10 {InitPnode } /NodeScale
{} def NewNode end  end
 211 2517 a 211 2517 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@OE@@7Label known {
/N@OE@@7Label load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 211 2517
a 142 2551 a Fl(M3)211 2517 y
tx@Dict begin  PutEnd  end
 211 2517 a 211 2517 a
tx@Dict begin tx@OptexpDict begin InitOptexpComp  end  end
 211
2517 a 211 2517 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin tx@NodeDict
begin tx@NodeDict /N@G known { /N@G load GetCenter } { 0 0 } ifelse
end  28.45274 div exch 28.45274 div exch  tx@NodeDict begin tx@NodeDict
/N@I known { /N@I load GetCenter } { 0 0 } ifelse end  28.45274 div
exch 28.45274 div exch  tx@NodeDict begin tx@NodeDict /N@H known {
/N@H load GetCenter } { 0 0 } ifelse end  28.45274 div exch 28.45274
div exch  calcNodes /exch@ref@OE@@8 ED X@A Y@A end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@8@A 10 {InitPnode } /NodeScale {}
def NewNode end  end
 211 2517 a 211 2517 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin X@B Y@B end
 28.45274 mul exch 28.45274 mul exch  } false /N@OE@@8@B 10 {InitPnode
} /NodeScale {} def NewNode end  end
 211 2517 a 211
2517 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@H
known { /N@H load GetCenter } { 0 0 } ifelse end } false /N@OE@@8Origin
10 {InitPnode } /NodeScale {} def NewNode end  end
 211 2517 a 211 2517 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@G
known { /N@G load GetCenter } { 0 0 } ifelse end } false /N@OE@@8A
10 {InitPnode } /NodeScale {} def NewNode end  end
 211 2517 a 211 2517 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@I
known { /N@I load GetCenter } { 0 0 } ifelse end } false /N@OE@@8B
10 {InitPnode } /NodeScale {} def NewNode end  end
 211
2517 a 211 2517 a
tx@Dict begin tx@OptexpDict begin /@xref [0 ] def /@yref [0 ] def /@@ang
0 def  end  end
 211 2517 a 211 2517 a
tx@Dict begin tx@OptexpDict begin /N@OE@@8@A @GetCenter /N@OE@@8@B
@GetCenter @ABVect exch dup 0 gt 3 1 roll 0 eq exch 0 lt and or { /RefFac
-1 def } if  end  end
 211 2517 a 211
2517 a
tx@Dict begin tx@OptexpDict begin /@@x 1.  0.5 mul def end  end
 211 2517 a 211 2517 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@OE@@8@A /N@OE@@8@B InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 211 2517 a 211 2517 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 211
2517 a 211 2517 a
tx@Dict begin  tx@NodeDict begin /t .5 def LPut end PutBegin  end
 211 2517 a 211 2517 a
tx@Dict begin NAngle  RotBegin  end
 211 2517 a 211
2517 a
tx@Dict begin {  0.  neg  0.   28.45274 mul exch 28.45274 mul exch
 } PutCoor PutBegin  end
 211 2517 a 211 2517 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  0 0 DefineExtNode
end  28.45274 mul exch 28.45274 mul exch  } false /N@OE@@8Rotref 10
{InitPnode } /NodeScale {} def NewNode end  end
 211 2517 a 211 2517 a
tx@Dict begin  gsave { tx@NodeDict begin tx@NodeDict /N@OE@@8Rotref
known { /N@OE@@8Rotref load GetCenter } { 0 0 } ifelse end /yRot ED
/xRot ED 0.  dup cos /cosA ED sin /sinA ED /ax cosA def /by sinA def
/cx sinA neg def /dy cosA def /ex xRot cosA mul neg xRot add yRot sinA
mul add def /fy xRot sinA mul neg yRot add yRot cosA mul sub def [ax
by cx dy ex fy] concat }  tx@3Ddict begin TMChange end  end
 211
2517 a 211 2517 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin @@x0 @@y0 end
 28.45274 mul exch 28.45274 mul exch  } false /N@OE@@8Center 10 {InitPnode
} /NodeScale {} def NewNode end  end
 211 2517 a 211 2517 a
tx@Dict begin tx@OptexpDict begin [ {0 0} {1 0} 1.5  -0.5 mul dup neg
refl {PlainIfc}  1   false  true false (OE@@8) { 28.45274 mul exch
28.45274 mul exch  } NewOptexpComp  end  end
 211 2517 a 211
2517 a
tx@Dict begin  tx@NodeDict begin {0.0 0.0 } false /N@OE@@8Center 10
{InitPnode } /NodeScale {} def NewNode end  end
 211 2517 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray   0. true  1.5  0.5 mul neg
0.15    28.45274 mul exch 28.45274 mul exch   1.5  0.5 mul 0  28.45274
mul exch 28.45274 mul exch  0 Frame  gsave 90 rotate  /clipType { clip
} def 45. rotate 0.4 SLW 0  setgray 1.12 0.0 0.0 LineFill  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [  1.5  0.5 mul CLW 28.45274 2 mul div
  28.45274 mul exch 28.45274 mul exch   1.5  0.5 mul neg CLW 28.45274
2 mul div   28.45274 mul exch 28.45274 mul exch    /Lineto /lineto
load def 0  setlinejoin false Line  gsave 1.6 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 211 2517 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  /N@OE@@8Center
@GetCenter 0.0 22.76227 0.  0.  add matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@8Label 10 {InitPnode } /NodeScale {} def NewNode
end  end
 211
2517 a 211 2517 a
tx@Dict begin   tx@3Ddict begin TMRestore end grestore  end
 211 2517 a 211 2517 a
tx@Dict begin  PutEnd  end
 211 2517 a 211
2517 a
tx@Dict begin RotEnd  end
 211 2517 a 211 2517 a
tx@Dict begin PutEnd  end
 211 2517 a 211 2517 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@8Rotref
@GetCenter 2 copy /N@OE@@8A @GetCenter 0.  neg  0.   28.45274 mul exch
28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@8TrefA 10 {InitPnode } /NodeScale
{} def NewNode end  end
 211
2517 a 211 2517 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@8Rotref
@GetCenter 2 copy /N@OE@@8B @GetCenter 0.  neg  0.   28.45274 mul exch
28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@8TrefB 10 {InitPnode } /NodeScale
{} def NewNode end  end
 211 2517 a 211 2517 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@8Rotref
@GetCenter 2 copy /N@OE@@8@A @GetCenter 0.  neg  0.   28.45274 mul
exch 28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@8@TrefA 10 {InitPnode } /NodeScale
{} def NewNode end  end
 211 2517 a 211
2517 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@8Rotref
@GetCenter 2 copy /N@OE@@8@B @GetCenter 0.  neg  0.   28.45274 mul
exch 28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@8@TrefB 10 {InitPnode } /NodeScale
{} def NewNode end  end
 211 2517 a 211 2517 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@OE@@8Label known {
/N@OE@@8Label load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 211 2517 a 142 2551 a Fl(M4)211
2517 y
tx@Dict begin  PutEnd  end
 211 2517 a 211 2517 a
tx@Dict begin tx@OptexpDict begin InitOptexpComp  end  end
 211 2517 a 211 2517 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin tx@NodeDict
begin tx@NodeDict /N@H known { /N@H load GetCenter } { 0 0 } ifelse
end  28.45274 div exch 28.45274 div exch  tx@NodeDict begin tx@NodeDict
/N@BSB known { /N@BSB load GetCenter } { 0 0 } ifelse end  28.45274
div exch 28.45274 div exch  tx@NodeDict begin tx@NodeDict /N@I known
{ /N@I load GetCenter } { 0 0 } ifelse end  28.45274 div exch 28.45274
div exch  calcNodes /exch@ref@OE@@9 ED X@A Y@A end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@9@A 10 {InitPnode } /NodeScale {}
def NewNode end  end
 211
2517 a 211 2517 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin X@B Y@B end
 28.45274 mul exch 28.45274 mul exch  } false /N@OE@@9@B 10 {InitPnode
} /NodeScale {} def NewNode end  end
 211 2517 a 211 2517 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@I
known { /N@I load GetCenter } { 0 0 } ifelse end } false /N@OE@@9Origin
10 {InitPnode } /NodeScale {} def NewNode end  end
 211 2517 a 211
2517 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@H
known { /N@H load GetCenter } { 0 0 } ifelse end } false /N@OE@@9A
10 {InitPnode } /NodeScale {} def NewNode end  end
 211 2517 a 211 2517 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@BSB
known { /N@BSB load GetCenter } { 0 0 } ifelse end } false /N@OE@@9B
10 {InitPnode } /NodeScale {} def NewNode end  end
 211 2517 a 211 2517 a
tx@Dict begin tx@OptexpDict begin /@xref [0 ] def /@yref [0 ] def /@@ang
0 def  end  end
 211
2517 a 211 2517 a
tx@Dict begin tx@OptexpDict begin /N@OE@@9@A @GetCenter /N@OE@@9@B
@GetCenter @ABVect exch dup 0 gt 3 1 roll 0 eq exch 0 lt and or { /RefFac
-1 def } if  end  end
 211 2517 a 211 2517 a
tx@Dict begin tx@OptexpDict begin /@@x 1.  0.5 mul def end  end
 211 2517 a 211
2517 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@OE@@9@A /N@OE@@9@B InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 211 2517 a 211 2517 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 211 2517 a 211 2517 a
tx@Dict begin  tx@NodeDict begin /t .5 def LPut end PutBegin  end
 211
2517 a 211 2517 a
tx@Dict begin NAngle  RotBegin  end
 211 2517 a 211 2517 a
tx@Dict begin {  0.  neg  0.   28.45274 mul exch 28.45274 mul exch
 } PutCoor PutBegin  end
 211 2517 a 211
2517 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  0 0 DefineExtNode
end  28.45274 mul exch 28.45274 mul exch  } false /N@OE@@9Rotref 10
{InitPnode } /NodeScale {} def NewNode end  end
 211 2517 a 211 2517 a
tx@Dict begin  gsave { tx@NodeDict begin tx@NodeDict /N@OE@@9Rotref
known { /N@OE@@9Rotref load GetCenter } { 0 0 } ifelse end /yRot ED
/xRot ED 0.  dup cos /cosA ED sin /sinA ED /ax cosA def /by sinA def
/cx sinA neg def /dy cosA def /ex xRot cosA mul neg xRot add yRot sinA
mul add def /fy xRot sinA mul neg yRot add yRot cosA mul sub def [ax
by cx dy ex fy] concat }  tx@3Ddict begin TMChange end  end
 211 2517 a 211 2517 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin @@x0 @@y0 end
 28.45274 mul exch 28.45274 mul exch  } false /N@OE@@9Center 10 {InitPnode
} /NodeScale {} def NewNode end  end
 211
2517 a 211 2517 a
tx@Dict begin tx@OptexpDict begin [ {0 0} {1 0} 1.5  -0.5 mul dup neg
refl {PlainIfc}  1   false  true false (OE@@9) { 28.45274 mul exch
28.45274 mul exch  } NewOptexpComp  end  end
 211 2517 a 211 2517 a
tx@Dict begin  tx@NodeDict begin {0.0 0.0 } false /N@OE@@9Center 10
{InitPnode } /NodeScale {} def NewNode end  end
 211 2517 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray   0. true  1.5  0.5 mul neg
0.15    28.45274 mul exch 28.45274 mul exch   1.5  0.5 mul 0  28.45274
mul exch 28.45274 mul exch  0 Frame  gsave 90 rotate  /clipType { clip
} def 45. rotate 0.4 SLW 0  setgray 1.12 0.0 0.0 LineFill  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [  1.5  0.5 mul CLW 28.45274 2 mul div
  28.45274 mul exch 28.45274 mul exch   1.5  0.5 mul neg CLW 28.45274
2 mul div   28.45274 mul exch 28.45274 mul exch    /Lineto /lineto
load def 0  setlinejoin false Line  gsave 1.6 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
211 2517 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  /N@OE@@9Center
@GetCenter 0.0 22.76227 0.  0.  add matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@9Label 10 {InitPnode } /NodeScale {} def NewNode
end  end
 211 2517 a 211 2517 a
tx@Dict begin   tx@3Ddict begin TMRestore end grestore  end
 211 2517 a 211 2517
a
tx@Dict begin  PutEnd  end
 211 2517 a 211 2517 a
tx@Dict begin RotEnd  end
 211 2517 a 211 2517 a
tx@Dict begin PutEnd  end
 211 2517
a 211 2517 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@9Rotref
@GetCenter 2 copy /N@OE@@9A @GetCenter 0.  neg  0.   28.45274 mul exch
28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@9TrefA 10 {InitPnode } /NodeScale
{} def NewNode end  end
 211 2517 a 211 2517 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@9Rotref
@GetCenter 2 copy /N@OE@@9B @GetCenter 0.  neg  0.   28.45274 mul exch
28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@9TrefB 10 {InitPnode } /NodeScale
{} def NewNode end  end
 211 2517 a 211 2517
a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@9Rotref
@GetCenter 2 copy /N@OE@@9@A @GetCenter 0.  neg  0.   28.45274 mul
exch 28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@9@TrefA 10 {InitPnode } /NodeScale
{} def NewNode end  end
 211 2517 a 211 2517 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@9Rotref
@GetCenter 2 copy /N@OE@@9@B @GetCenter 0.  neg  0.   28.45274 mul
exch 28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@9@TrefB 10 {InitPnode } /NodeScale
{} def NewNode end  end
 211 2517 a 211 2517 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@OE@@9Label known {
/N@OE@@9Label load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 211 2517
a 142 2551 a Fl(M5)211 2517 y
tx@Dict begin  PutEnd  end
 211 2517 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 1 0 0  setrgbcolor  tx@OptexpDict
begin /loadbeampoints 0 def /loadbeam false def /beamangle 0 def /beamdiv
0 def /savebeampoints 1 def /savebeam true def /startinsidecount -1.
 cvi def startinsidecount 0 eq { /beaminsidefirst false def /startinside
false def } { /beaminsidefirst false def /startinside false def } ifelse
/stopinsidecount -1.  cvi def stopinsidecount 0 eq { /beaminsidelast
false def /stopinside false def } { /beaminsidelast false def /stopinside
false def } ifelse /beaminside true def /connectifc false def /beamalign
 relative def /beampathskip 0.  def -1  dup -1 gt { beampathskip add
} if /beampathcount ED /useNA true def /aligntovector false def /beamdiffractionorder
null def /beammode auto def  /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  [ {tx@NodeDict begin tx@NodeDict /N@OUT known
{ /N@OUT load GetCenter } { 0 0 } ifelse end } {0 1} (@N@2) { 28.45274
div exch 28.45274 div exch  } NewTempNodeComp (@N@2)  (OE@@) 1 6 GetCompRange
 {tx@NodeDict begin tx@NodeDict /N@IN known { /N@IN load GetCenter
} { 0 0 } ifelse end } {0 1} (@N@1) { 28.45274 div exch 28.45274 div
exch  } NewTempNodeComp (@N@1)   counttomark 0 eq not { dup cvn load
dup /source known { /source get { def } forall }{ pop } ifelse } if
beamalign firstcomp eq { dup dup (Center) NodeName tx@NodeDict exch
known not { pop /beamalign relative def } { RelConnAngle@tref exch
atan /beamangle exch def /beamalign absolute def } ifelse } if  {/nbeam
{[n] cvx exec} bind def /Warning /pop load def } beamangle dup beamdiv
0.5 mul dup 4 -1 roll add 3 1 roll sub  [  counttomark dup 0 eq { pop
0 0 } { 1 eq { 0 exch } if } ifelse currentdict /beamwidth known {
beamwidth currentdict /beamwidth undef } { mark 0.4 counttomark 0 eq
{ 0 } if exch pop } ifelse 0.5 mul 3 copy add  28.45274 mul exch 28.45274
mul exch   ToVec 5 1 roll sub  28.45274 mul exch 28.45274 mul exch
 ] cvx   exch 4 -1 roll 4 2 roll exch  counttomark mark exch 2 add
1 roll gsave /fillBeam { gsave 1 0.5 0.5  setrgbcolor  0.2 .setopacityalpha
 fill  grestore } def /strokeBeam true false or def [/lastBeamPointTmpLow
/lastBeamPointTmpUp /lastVecTmpLow /lastVecTmpUp] {currentdict exch
undef} forall tx@NodeDict /N@OE@@BeamLow0 known tx@NodeDict /N@OE@@BeamUp0
known loadbeampoints 1 ge and and { /N@OE@@BeamLow0 @GetCenter ToVec
/lastBeamPointTmpLow ED /N@OE@@BeamUp0 @GetCenter ToVec /lastBeamPointTmpUp
ED } if loadbeam currentdict /lastVecLow0 known and currentdict /lastVecUp0
known and { /lastVecTmpLow /lastVecLow0 load def /lastVecTmpUp /lastVecUp0
load def } if TraceAndFillWideBeam grestore pop counttomark 0 gt strokeBeam
and { counttomark dup /cnta ED /cntb ED cnta 6 idiv { cnta 3 roll /cnta
cnta 3 sub def /cntb cntb 3 sub def cntb 3 roll /cntb cntb 3 sub def
} repeat counttomark 2 idiv 1 add mark exch 1 roll gsave /Lineto /lineto
load def 20 dict begin DrawbeamPrepare counttomark 3 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def /arrowminlength
0.2 28.45274 mul def /arrowmaxlength -1 28.45274 mul def /arrowpos
0.5  def /arrowno 1.  cvi def /ArrowPosStart 0.  def /dArrowPosStart
0.5  def counttomark 3 idiv /N exch def () length 0 gt { DrawbeamArrowInside
}{ DrawbeamSimple } ifelse } if cleartomark end 1  setlinejoin 0.8
SLW 1 0 0  setrgbcolor  1. .setopacityalpha   1  setlinejoin 0  setlinecap
stroke  grestore gsave /Lineto /lineto load def 20 dict begin DrawbeamPrepare
counttomark 3 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul neg
add /arrowlength exch def /arrowminlength 0.2 28.45274 mul def /arrowmaxlength
-1 28.45274 mul def /arrowpos 0.5  def /arrowno 1.  cvi def /ArrowPosStart
0.  def /dArrowPosStart 0.5  def counttomark 3 idiv /N exch def ()
length 0 gt { DrawbeamArrowInside }{ DrawbeamSimple } ifelse } if cleartomark
end 1  setlinejoin 0.8 SLW 1 0 0  setrgbcolor  1. .setopacityalpha
  1  setlinejoin 0  setlinecap stroke  grestore } { pop } ifelse currentdict
/fillBeam known strokeBeam or savebeampoints 1 ge and currentdict /lastBeamPointTmpLow
known and currentdict /lastBeamPointTmpUp known and dup { lastBeamPointTmpLow
/N@OE@@BeamLow1 lastBeamPointTmpUp /N@OE@@BeamUp1 7 -1 roll } if currentdict
/fillBeam known strokeBeam or savebeam and currentdict /lastVecTmpLow
known and currentdict /lastVecTmpUp known and dup { /prevVecLow1 /prevVecUp1
currentdict /prevVecLow known currentdict /prevVecUp known and { prevVecLow
3 -1 roll prevVecUp } { 0 0 3 -1 roll 0 0 } ifelse /lastVecLow1 lastVecTmpLow
/lastVecUp1 lastVecTmpUp 13 -1 roll } if   end  end count /ocount exch
def
 
@endspecial 211 2517 a
tx@Dict begin tx@OptexpDict begin { tx@OptexpDict begin 4 { ToVec def
} repeat end } if { tx@NodeDict begin /NodeScale {} def end @NewNode
@NewNode } if  end  end
 211 2517 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 1 0 0  setrgbcolor  tx@OptexpDict
begin /loadbeampoints 0 def /loadbeam false def /beamangle 0 def /beamdiv
0 def /savebeampoints 1 def /savebeam true def /startinsidecount -1.
 cvi def startinsidecount 0 eq { /beaminsidefirst false def /startinside
false def } { /beaminsidefirst false def /startinside false def } ifelse
/stopinsidecount -1.  cvi def stopinsidecount 0 eq { /beaminsidelast
false def /stopinside false def } { /beaminsidelast false def /stopinside
false def } ifelse /beaminside true def /connectifc false def /beamalign
 relative def /beampathskip 0.  def -1  dup -1 gt { beampathskip add
} if /beampathcount ED /useNA true def /aligntovector false def /beamdiffractionorder
null def /beammode auto def  /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  [ {tx@NodeDict begin tx@NodeDict /N@OUT known
{ /N@OUT load GetCenter } { 0 0 } ifelse end } {0 1} (@N@3) { 28.45274
div exch 28.45274 div exch  } NewTempNodeComp (@N@3)  (OE@@) 6 6 GetCompRange
 (OE@@) 7 9 GetCompRange  {tx@NodeDict begin tx@NodeDict /N@BSA known
{ /N@BSA load GetCenter } { 0 0 } ifelse end } {0 1} (@N@2) { 28.45274
div exch 28.45274 div exch  } NewTempNodeComp (@N@2)  {tx@NodeDict
begin tx@NodeDict /N@IN known { /N@IN load GetCenter } { 0 0 } ifelse
end } {0 1} (@N@1) { 28.45274 div exch 28.45274 div exch  } NewTempNodeComp
(@N@1)   counttomark 0 eq not { dup cvn load dup /source known { /source
get { def } forall }{ pop } ifelse } if beamalign firstcomp eq { dup
dup (Center) NodeName tx@NodeDict exch known not { pop /beamalign relative
def } { RelConnAngle@tref exch atan /beamangle exch def /beamalign
absolute def } ifelse } if  {/nbeam {[n] cvx exec} bind def /Warning
/pop load def } beamangle dup beamdiv 0.5 mul dup 4 -1 roll add 3 1
roll sub  [  counttomark dup 0 eq { pop 0 0 } { 1 eq { 0 exch } if
} ifelse currentdict /beamwidth known { beamwidth currentdict /beamwidth
undef } { mark 0.4 counttomark 0 eq { 0 } if exch pop } ifelse 0.5
mul 3 copy add  28.45274 mul exch 28.45274 mul exch   ToVec 5 1 roll
sub  28.45274 mul exch 28.45274 mul exch  ] cvx   exch 4 -1 roll 4
2 roll exch  counttomark mark exch 2 add 1 roll gsave /fillBeam { gsave
1 0.5 0.5  setrgbcolor  0.2 .setopacityalpha  fill  grestore } def
/strokeBeam true false or def [/lastBeamPointTmpLow /lastBeamPointTmpUp
/lastVecTmpLow /lastVecTmpUp] {currentdict exch undef} forall tx@NodeDict
/N@OE@@BeamLow0 known tx@NodeDict /N@OE@@BeamUp0 known loadbeampoints
1 ge and and { /N@OE@@BeamLow0 @GetCenter ToVec /lastBeamPointTmpLow
ED /N@OE@@BeamUp0 @GetCenter ToVec /lastBeamPointTmpUp ED } if loadbeam
currentdict /lastVecLow0 known and currentdict /lastVecUp0 known and
{ /lastVecTmpLow /lastVecLow0 load def /lastVecTmpUp /lastVecUp0 load
def } if TraceAndFillWideBeam grestore pop counttomark 0 gt strokeBeam
and { counttomark dup /cnta ED /cntb ED cnta 6 idiv { cnta 3 roll /cnta
cnta 3 sub def /cntb cntb 3 sub def cntb 3 roll /cntb cntb 3 sub def
} repeat counttomark 2 idiv 1 add mark exch 1 roll gsave /Lineto /lineto
load def 20 dict begin DrawbeamPrepare counttomark 3 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def /arrowminlength
0.2 28.45274 mul def /arrowmaxlength -1 28.45274 mul def /arrowpos
0.5  def /arrowno 1.  cvi def /ArrowPosStart 0.  def /dArrowPosStart
0.5  def counttomark 3 idiv /N exch def () length 0 gt { DrawbeamArrowInside
}{ DrawbeamSimple } ifelse } if cleartomark end 1  setlinejoin 0.8
SLW 1 0 0  setrgbcolor  1. .setopacityalpha   1  setlinejoin 0  setlinecap
stroke  grestore gsave /Lineto /lineto load def 20 dict begin DrawbeamPrepare
counttomark 3 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul neg
add /arrowlength exch def /arrowminlength 0.2 28.45274 mul def /arrowmaxlength
-1 28.45274 mul def /arrowpos 0.5  def /arrowno 1.  cvi def /ArrowPosStart
0.  def /dArrowPosStart 0.5  def counttomark 3 idiv /N exch def ()
length 0 gt { DrawbeamArrowInside }{ DrawbeamSimple } ifelse } if cleartomark
end 1  setlinejoin 0.8 SLW 1 0 0  setrgbcolor  1. .setopacityalpha
  1  setlinejoin 0  setlinecap stroke  grestore } { pop } ifelse currentdict
/fillBeam known strokeBeam or savebeampoints 1 ge and currentdict /lastBeamPointTmpLow
known and currentdict /lastBeamPointTmpUp known and dup { lastBeamPointTmpLow
/N@OE@@BeamLow1 lastBeamPointTmpUp /N@OE@@BeamUp1 7 -1 roll } if currentdict
/fillBeam known strokeBeam or savebeam and currentdict /lastVecTmpLow
known and currentdict /lastVecTmpUp known and dup { /prevVecLow1 /prevVecUp1
currentdict /prevVecLow known currentdict /prevVecUp known and { prevVecLow
3 -1 roll prevVecUp } { 0 0 3 -1 roll 0 0 } ifelse /lastVecLow1 lastVecTmpLow
/lastVecUp1 lastVecTmpUp 13 -1 roll } if   end  end count /ocount exch
def
 
@endspecial 211 2517 a
tx@Dict begin tx@OptexpDict begin { tx@OptexpDict begin 4 { ToVec def
} repeat end } if { tx@NodeDict begin /NodeScale {} def end @NewNode
@NewNode } if  end  end
 211 2517 a 211 2517
a
tx@Dict begin  tx@NodeDict begin {227.62195 227.62195 } false /N@ND
10 {InitPnode } /NodeScale {} def NewNode end  end
 211 2517 a 211 2517 a
tx@Dict begin tx@OptexpDict begin InitOptexpComp  end  end
 211 2517 a 211 2517 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@BSA
known { /N@BSA load GetCenter } { 0 0 } ifelse end } false /N@OE@@10A
10 {InitPnode } /NodeScale {} def NewNode end  end
 211 2517
a 211 2517 a
tx@Dict begin  tx@NodeDict begin {tx@NodeDict begin tx@NodeDict /N@ND
known { /N@ND load GetCenter } { 0 0 } ifelse end } false /N@OE@@10B
10 {InitPnode } /NodeScale {} def NewNode end  end
 211 2517 a 211 2517 a
tx@Dict begin tx@OptexpDict begin /@xref [0 ] def /@yref [0 ] def /@@ang
0 def  end  end
 211 2517 a 211 2517
a
tx@Dict begin tx@OptexpDict begin /N@OE@@10A @GetCenter /N@OE@@10B
@GetCenter @ABVect exch dup 0 gt 3 1 roll 0 eq exch 0 lt and or { /RefFac
-1 def } if  end  end
 211 2517 a 211 2517 a
tx@Dict begin tx@OptexpDict begin /@@x 0.2  0.5 mul def /@@y 1.3  0.5
mul def  end  end
 211 2517 a 211 2517 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@OE@@10A /N@OE@@10B InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 211 2517
a 211 2517 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 211 2517 a 211 2517 a
tx@Dict begin  tx@NodeDict begin /t .5 def LPut end PutBegin  end
 211 2517 a 211 2517
a
tx@Dict begin NAngle  RotBegin  end
 211 2517 a 211 2517 a
tx@Dict begin {  0.  0.   28.45274 mul exch 28.45274 mul exch  } PutCoor
PutBegin  end
 211 2517 a 211 2517 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  0 0 DefineExtNode
end  28.45274 mul exch 28.45274 mul exch  } false /N@OE@@10Rotref 10
{InitPnode } /NodeScale {} def NewNode end  end
 211 2517
a 211 2517 a
tx@Dict begin  gsave { tx@NodeDict begin tx@NodeDict /N@OE@@10Rotref
known { /N@OE@@10Rotref load GetCenter } { 0 0 } ifelse end /yRot ED
/xRot ED 0.  dup cos /cosA ED sin /sinA ED /ax cosA def /by sinA def
/cx sinA neg def /dy cosA def /ex xRot cosA mul neg xRot add yRot sinA
mul add def /fy xRot sinA mul neg yRot add yRot cosA mul sub def [ax
by cx dy ex fy] concat }  tx@3Ddict begin TMChange end  end
 211 2517 a 211 2517 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin @@x0 @@y0 end
 28.45274 mul exch 28.45274 mul exch  } false /N@OE@@10Center 10 {InitPnode
} /NodeScale {} def NewNode end  end
 211 2517 a 211 2517
a
tx@Dict begin tx@OptexpDict begin tx@NodeDict begin /NodeScale {} def
end [ {@@x0 @@x sub 0} {0 1} @@y0 @@y sub @@y0 @@y add trans {PlainIfc}
@@x 0 eq not { {@@x0 @@x add 0} {0 1} @@y0 @@y sub @@y0 @@y add trans
{PlainIfc} } if [1.5]  false true false (OE@@10) { 28.45274 mul exch
28.45274 mul exch  } NewOptexpComp  end  end
 211 2517 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray   0. true  tx@OptexpDict begin
@@x neg @@y0 @@y sub end  28.45274 mul exch 28.45274 mul exch   tx@OptexpDict
begin @@x @@y0 @@y add end  28.45274 mul exch 28.45274 mul exch  .5
Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 211
2517 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  /N@OE@@10Center
@GetCenter 0.0 28.45274 0.  180.  add matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@10Label 10 {InitPnode } /NodeScale {} def
NewNode end  end
 211 2517 a 211 2517 a
tx@Dict begin   tx@3Ddict begin TMRestore end grestore  end
 211 2517 a 211 2517 a
tx@Dict begin  PutEnd  end
 211
2517 a 211 2517 a
tx@Dict begin RotEnd  end
 211 2517 a 211 2517 a
tx@Dict begin PutEnd  end
 211 2517 a 211
2517 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@10Rotref
@GetCenter 2 copy /N@OE@@10A @GetCenter 0.  0.   28.45274 mul exch
28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@10TrefA 10 {InitPnode } /NodeScale
{} def NewNode end  end
 211 2517 a 211 2517 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@10Rotref
@GetCenter 2 copy /N@OE@@10B @GetCenter 0.  0.   28.45274 mul exch
28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@10TrefB 10 {InitPnode } /NodeScale
{} def NewNode end  end
 211 2517 a 211 2517 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@OE@@10Label known
{ /N@OE@@10Label load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 211
2517 a 20 2551 a Fl(ND)32 b(\014lter)211 2517 y
tx@Dict begin  PutEnd  end
 211 2517
a 211 2517 a
tx@Dict begin tx@OptexpDict begin  (1) (N) (OE@@10) CorrectDipoleIfc
 end  end
 211 2517 a 211 2517 a
tx@Dict begin tx@OptexpDict begin InitOptexpComp  end  end
 211 2517 a 211 2517
a
tx@Dict begin  tx@NodeDict begin {227.62195 199.1692 } false /N@OE@@11A
10 {InitPnode } /NodeScale {} def NewNode end  end
 211 2517 a 211 2517 a
tx@Dict begin  tx@NodeDict begin {398.33841 199.1692 } false /N@OE@@11B
10 {InitPnode } /NodeScale {} def NewNode end  end
 211 2517 a 211 2517 a
tx@Dict begin tx@OptexpDict begin /@xref [0 ] def /@yref [0 ] def /@@ang
0 def  end  end
 211 2517
a 211 2517 a
tx@Dict begin tx@OptexpDict begin /N@OE@@11A @GetCenter /N@OE@@11B
@GetCenter @ABVect exch dup 0 gt 3 1 roll 0 eq exch 0 lt and or { /RefFac
-1 def } if  end  end
 211 2517 a 211 2517 a
tx@Dict begin tx@OptexpDict begin /@@x 4.  0.5 mul def /@@y 4.  0.5
mul def  end  end
 211 2517 a 211 2517
a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@OE@@11A /N@OE@@11B InitNC { NCCoor tx@Dict
begin ArrowA CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED
x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.
 def /Length x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } loop }{/ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop lineto pop pop end  } if end   grestore
end
 211 2517 a 211 2517 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 211 2517 a 211 2517 a
tx@Dict begin  tx@NodeDict begin /t .5 def LPut end PutBegin  end
 211 2517
a 211 2517 a
tx@Dict begin NAngle  RotBegin  end
 211 2517 a 211 2517 a
tx@Dict begin {  0.  0.   28.45274 mul exch 28.45274 mul exch  } PutCoor
PutBegin  end
 211 2517 a 211 2517
a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  0 0 DefineExtNode
end  28.45274 mul exch 28.45274 mul exch  } false /N@OE@@11Rotref 10
{InitPnode } /NodeScale {} def NewNode end  end
 211 2517 a 211 2517 a
tx@Dict begin  gsave { tx@NodeDict begin tx@NodeDict /N@OE@@11Rotref
known { /N@OE@@11Rotref load GetCenter } { 0 0 } ifelse end /yRot ED
/xRot ED 0.  dup cos /cosA ED sin /sinA ED /ax cosA def /by sinA def
/cx sinA neg def /dy cosA def /ex xRot cosA mul neg xRot add yRot sinA
mul add def /fy xRot sinA mul neg yRot add yRot cosA mul sub def [ax
by cx dy ex fy] concat }  tx@3Ddict begin TMChange end  end
 211 2517 a 211 2517 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin @@x0 @@y0 end
 28.45274 mul exch 28.45274 mul exch  } false /N@OE@@11Center 10 {InitPnode
} /NodeScale {} def NewNode end  end
 211 2517
a 211 2517 a
tx@Dict begin tx@OptexpDict begin tx@NodeDict begin /NodeScale {} def
end [ {@@x0 @@x sub 0} {0 1} @@y0 @@y sub @@y0 @@y add trans {PlainIfc}
@@x 0 eq not { {@@x0 @@x add 0} {0 1} @@y0 @@y sub @@y0 @@y add trans
{PlainIfc} } if [1.5]  false true false (OE@@11) { 28.45274 mul exch
28.45274 mul exch  } NewOptexpComp  end  end
 211 2517 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray   0. true  tx@OptexpDict begin
@@x neg @@y0 @@y sub end  28.45274 mul exch 28.45274 mul exch   tx@OptexpDict
begin @@x @@y0 @@y add end  28.45274 mul exch 28.45274 mul exch  .5
Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
211 2517 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin  /N@OE@@11Center
@GetCenter 0.0 22.76227 0.  180.  add matrix rotate dtransform VecAdd
 28.45274 div exch 28.45274 div exch   end  28.45274 mul exch 28.45274
mul exch  } false /N@OE@@11Label 10 {InitPnode } /NodeScale {} def
NewNode end  end
 211 2517 a 211 2517 a
tx@Dict begin   tx@3Ddict begin TMRestore end grestore  end
 211 2517 a 211 2517
a
tx@Dict begin  PutEnd  end
 211 2517 a 211 2517 a
tx@Dict begin RotEnd  end
 211 2517 a 211 2517 a
tx@Dict begin PutEnd  end
 211 2517
a 211 2517 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@11Rotref
@GetCenter 2 copy /N@OE@@11A @GetCenter 0.  0.   28.45274 mul exch
28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@11TrefA 10 {InitPnode } /NodeScale
{} def NewNode end  end
 211 2517 a 211 2517 a
tx@Dict begin  tx@NodeDict begin { tx@OptexpDict begin /N@OE@@11Rotref
@GetCenter 2 copy /N@OE@@11B @GetCenter 0.  0.   28.45274 mul exch
28.45274 mul exch  VecAdd 4 2 roll @ABVect 0.  matrix rotate dtransform
VecAdd  28.45274 div exch 28.45274 div exch   end  28.45274 mul exch
28.45274 mul exch  } false /N@OE@@11TrefB 10 {InitPnode } /NodeScale
{} def NewNode end  end
 211 2517 a 211 2517
a
tx@Dict begin tx@OptexpDict begin  (1) (N) (OE@@11) CorrectDipoleIfc
 end  end
 211 2517 a 211 2517 a
tx@Dict begin { 355.65929 203.43694 } PutCoor PutBegin  end
 211 2517 a 158 2538 a Fh(\034)11
b @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale  false
0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED
{ 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg
rlineto gsave fill grestore grestore 0 h a sub moveto   EndArrow  moveto
} def /ArrowB { BeginArrow 1.  1.  scale  false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside {
} def  0.8 SLW 0  setgray  /ArrowA { BeginArrow 1.  1.  scale  false
0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED
{ 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg
rlineto gsave fill grestore grestore 0 h a sub moveto   EndArrow  moveto
} def /ArrowB { BeginArrow 1.  1.  scale  false 0.4 1.4 1.5 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside {
} def  [ 9.95863 -4.26773 -18.4941 -4.26773   /Lineto /lineto load
def 0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def
} if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul
neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 211 2517 a
tx@Dict begin  PutEnd  end
 211
2517 a 211 2517 a
tx@Dict begin { 312.98018 270.30106 } PutCoor PutBegin  end
 211 2517 a -143 2542 a Fl(mo)m(ving)33
b(platform)211 2517 y
tx@Dict begin  PutEnd  end
 211 2517 a 211 2517 a
tx@Dict begin { 0.0 227.62195 } PutCoor PutBegin  end
 211 2517
a 34 x Fl(IN)211 2517 y
tx@Dict begin  PutEnd  end
 211 2517 a 211 2517 a
tx@Dict begin { 398.33841 113.81097 } PutCoor PutBegin  end
 211 2517
a -9 2551 a Fl(OUT)211 2517 y
tx@Dict begin  PutEnd  end
 211 2517 a 3518 2517 a
tx@Dict begin tx@OptexpDict begin /lastBeamPointUp1 /lastBeamPointLow1
/lastBeamPoint1 3 { currentdict exch undef } repeat /N@OE@@Beam1 /N@OE@@BeamUp1
/N@OE@@BeamLow1 3 { tx@NodeDict exch undef } repeat  end  end

3518 2517 a -128 2720 a Fl(Figure)g(2:)44 b(\(Color)33
b(Online\))g(Mac)m(h-Zender)h(in)m(terferometer:)46 b(BS1)33
b(and)g(BS2)f(are)h(the)h(t)m(w)m(o)f(50/50)f(broad-)-128
2841 y(band)25 b(b)s(eamsplitter,)i(M1-5)d(are)g(plain)g(metallic)h
(mirrors,)h(PH)f(is)g(the)f(20)16 b Fa(\265)p Fl(m)25
b(pinhole,)h(O)m(AP)f(is)g(the)f(o\013-axis)-128 2961
y(parab)s(olic)33 b(gold-plated)f(mirror)h(and)f(ND)h(is)g(a)f(neutral)
h(densit)m(y)i(\014lter)e(\(or)f(a)g(stac)m(k)i(of)e(\014lters\).)p
0 TeXcolorgray 19 3224 a(The)i(t)m(w)m(o)h(arms)f(of)f(the)h(in)m
(terferometer)h(ha)m(v)m(e)g(t)m(w)m(o)f(mirrors)g(to)f(a)m(v)m(oid)i
(retrore\015ection)g(in)m(to)f(the)g(laser)-128 3345
y(ca)m(vit)m(y)-8 b(.)19 3465 y(W)g(e)32 b(decided)h(to)e(k)m(eep)i
(the)e(reference)i(arm)f(\014xed)g(and)g(build)g(the)f(mo)m(ving)i
(platform)e(in)g(the)h(test)g(arm.)19 3586 y(the)h(attuator)f(had)g(a)h
(bac)m(klash)h(problem)f(whic)m(h)h(w)m(e)g(had)e(to)h(solv)m(e.)19
3707 y(Because)i(w)m(e)h(w)m(ere)f(w)m(orking)g(directly)g(under)g(a)f
(v)m(en)m(tilation)i(shaft)e(w)m(e)h(had)f(to)g(enclose)i(the)e(MZ)g
(in)g(a)-128 3827 y(b)s(o)m(x)f(with)h(***)d(blac)m(k)j(material)f(to)f
(a)m(v)m(oid)i(disturbances)g(due)g(to)e(the)h(air)f(mo)m(v)m(emen)m
(t.)-128 4119 y Fi(3.3)136 b(SEA-F-SPIDER)-128 4304 y
Fl(In)41 b(the)g(lab)s(oratory)f(a)g(v)-5 b(ariation)40
b(from)g(the)h(traditional)f(SPIDER)h(apparatus)f(w)m(as)i(already)f(a)
m(v)-5 b(ailable:)-128 4425 y(spatially)29 b(enco)s(ded)g(arrangemen)m
(t)g(for)e(direct)i(electric)g(\014eld)g(reconstruction)h(b)m(y)e(sp)s
(ectral)h(shearing)g(in)m(ter-)-128 4545 y(ferometry)24
b(\(SEA-SPIDER\))g(with)g(direct)f(spatial)h(\014ltering)f(for)g
(ancilla)g(preparation)g(\(SEA-F-SPIDER\).)19 4666 y(This)37
b(apparatus,)h(compared)f(to)g(SPIDER,)g(is)g(particularly)g(\014tted)g
(for)f(few-cycle)i(pulse)g(c)m(haracter-)-128 4786 y(isation)48
b(and)f(is)g(able)g(to)g(reconstruct)h(the)f(time)h(dep)s(endence)h
(and)e(the)h(spatial)f(distribution)h(in)f(one)-128 4907
y(dimension)35 b(of)d(the)h(pulse.)-128 5242 y Fk(4)162
b(Data)54 b(Analysis)-128 5462 y Fl(Our)36 b(output)f(data)g(is)g(comp)
s(osed)i(b)m(y)f(the)f(in)m(terferograms)h(of)f(eac)m(h)h(pixel)h(of)d
(the)i(camera)f(and)h(from)f(the)-128 5582 y(amplitude)g(and)e(phase)h
(frequency)h(dep)s(endence)g(gathered)f(b)m(y)g(the)f(SEA-F-SPIDER.)g
(All)g(the)h(in)m(terfer-)-128 5703 y(ograms)k(are)g(arranged)g(in)g(a)
g(big)f(3D)g(matrix,)j(whose)f(dimension)h(are)e(giv)m(en)h(b)m(y)f
(the)h(resolution)f(of)g(the)-128 5823 y(sensor)e(and)e(the)h(n)m(um)m
(b)s(er)h(of)e(steps)i(from)e(the)g(samplig)h(in)g(the)g(dela)m(y)g
(line.)50 b(Considering)36 b(a)e(12-bit)f(color)-128
5943 y(\(greyscale\))38 b(depth)f(and)f(the)g(original)g(resolution)h
(of)f(the)g(camera)g(\(2588)24 b Fg(\002)h Fl(1940\),)36
b(the)g(memory)i(usage)p 0 TeXcolorgray 1856 6192 a(4)p
0 TeXcolorgray eop end
%%Page: 5 11
TeXDict begin 5 10 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -128 -28 a Fl(of)36 b(the)h(ra)m(w)f(data)g(for)f(1024)g
(sampling)i(steps)h(is)e(more)h(than)f(7)g(GB.)f(T)-8
b(o)36 b(k)m(eep)i(memory)f(usage)g(lo)m(w)m(er)g(w)m(e)-128
92 y(binned)e(together)f(pixels)h(in)f(4)23 b Fg(\002)g
Fl(4)34 b(groups)f(obtaining)h(an)g(e\013ectiv)m(e)h(resolution)g(of)e
(647)22 b Fg(\002)h Fl(485)33 b(and)h(a)f(re-)-128 213
y(duction)e(of)e(a)h(factor)g(16)f(in)h(the)g(memory)h(usage.)44
b(During)29 b(the)h(co)s(de)h(dev)m(eloping)g(and)f(debugging)h(phases)
-128 333 y(w)m(e)j(reduced)g(the)f(memory)h(usage)f(further)f(b)m(y)i
(cropping)f(the)g(resolution)g(to)f(201)22 b Fg(\002)g
Fl(201)32 b(in)h(the)g(cen)m(ter)h(of)-128 454 y(the)f(sensor.)-128
750 y Fi(4.1)136 b(Multidimensional)46 b(approac)l(h)1177
969 y Fl(~)1161 994 y Fh(U)10 b Fl(\()p Fh(x;)17 b(y)t(;)g(!)t
Fl(\))26 b(=)1762 926 y Fh(A)p Fl(\()p Fh(x;)17 b(y)t(;)g(!)t
Fl(\))p 1713 971 506 4 v 1713 1074 a Fg(j)1757 1049 y
Fl(~)1741 1074 y Fh(U)1817 1045 y Fd(\003)1807 1099 y
Ff(r)1857 1074 y Fl(\()p Fh(x;)g(y)t(;)g(!)t Fl(\))p
Fg(j)2228 994 y Fh(e)2273 953 y Ff(i )2343 961 y Fb(r)2378
953 y Fe(\()p Ff(x;y)r(;!)r Fe(\))3764 994 y Fl(\(7\))-128
1232 y(assumptions:)p 0 TeXcolorgray 18 1441 a Fg(\017)p
0 TeXcolorgray 48 w Fl(the)22 b(in)m(tensit)m(y)j(of)c(the)h(reference)
h(b)s(eam)f(is)h(homogeneous)f(in)g(the)g(transv)m(erse)i(directions)f
Fg(j)3432 1416 y Fl(~)3415 1441 y Fh(U)11 b Fl(\()p Fh(x;)17
b(y)t(;)g(!)t Fl(\))p Fg(j)25 b Fl(=)116 1561 y Fg(j)161
1536 y Fl(~)144 1561 y Fh(U)11 b Fl(\()p Fh(x)314 1576
y Fe(0)353 1561 y Fh(;)17 b(y)445 1576 y Fe(0)484 1561
y Fh(;)g(!)t Fl(\))p Fg(j)26 b Fl(=)i Fg(j)833 1536 y
Fl(~)817 1561 y Fh(U)10 b Fl(\()p Fh(!)t Fl(\))p Fg(j)32
b Fl(where)i(\()p Fh(x)1469 1576 y Fe(0)1508 1561 y Fl(,)p
Fh(y)1583 1576 y Fe(0)1622 1561 y Fl(\))f(are)f(the)h(co)s(ordinates)h
(of)e(the)h(cen)m(ter)h(of)e(the)h(b)s(eam.)p 0 TeXcolorgray
18 1771 a Fg(\017)p 0 TeXcolorgray 48 w Fl(the)g(phase)h(is)f
(separable)h(as)e(a)h(spatial)g(comp)s(onen)m(t)g(and)g(an)f(angular)h
(frequency)h(comp)s(onen)m(t:)116 1891 y Fh( )179 1906
y Ff(r)218 1891 y Fl(\()p Fh(x;)17 b(y)t(;)g(!)t Fl(\))26
b(=)h Fh( )746 1906 y Ff(r)n(;sp)868 1891 y Fl(\()p Fh(x;)17
b(y)t Fl(\))p Fh( )1158 1906 y Ff(r)n(;!)1258 1891 y
Fl(\()p Fh(!)t Fl(\))-128 2101 y(Then:)1131 2229 y(~)1114
2255 y Fh(U)11 b Fl(\()p Fh(x;)17 b(y)t(;)g(!)t Fl(\))26
b Fg(\031)1668 2187 y Fh(A)p Fl(\()p Fh(x;)17 b(y)t(;)g(!)t
Fl(\))p 1668 2232 408 4 v 1716 2335 a Fg(j)1760 2310
y Fl(~)1744 2335 y Fh(U)1820 2306 y Fd(\003)1810 2359
y Ff(r)1860 2335 y Fl(\()p Fh(!)t Fl(\))p Fg(j)2085 2255
y Fh(e)2130 2213 y Ff(i )2200 2221 y Fb(r)2235 2213 y
Fe(\()p Ff(x;y)r Fe(\))2391 2255 y Fh(e)2436 2213 y Ff(i )2506
2221 y Fb(r)2541 2213 y Fe(\()p Ff(!)r Fe(\))3764 2255
y Fl(\(8\))19 2497 y(The)24 b(\014rst)g(assumption)h(is)g(v)-5
b(alid)23 b(b)s(ecause)i(the)g(reference)g(b)s(eam)f(is)g(created)g(b)m
(y)h(fo)s(cusing)f(the)g(b)s(eam)g(in)m(to)-128 2617
y(a)j(20)16 b Fa(\265)p Fl(m)27 b(pinhole.)42 b(This)28
b(pro)s(duces)g(on)f(the)g(camera)g(sensor)h(an)f(Airy)g(pattern.)42
b(As)28 b(a)e(\014rst)h(appro)m(ximation)-128 2737 y(the)37
b(cen)m(tral)g(area)f(of)f(the)i(pattern)f(ma)m(y)h(b)s(e)f(considered)
i(homogeneous)g(in)e(in)m(tensit)m(y)-8 b(.)56 b(This)37
b(area)f(is)h(the)-128 2858 y(Airy)d(disk)f(whic)m(h)h(has)f(a)g
(radius)g(giv)m(en)h(b)m(y)1621 3125 y Fh(\032)1671 3140
y Ff(s)1735 3125 y Fl(=)28 b(1)p Fh(:)p Fl(22)2023 3058
y Fh(\025d)p 2023 3102 108 4 v 2035 3194 a(D)-128 3374
y Fl(where)41 b Fh(\025)e Fl(is)h(the)g(w)m(a)m(v)m(elength,)j
Fh(d)c Fl(is)h(the)f(distance)i(b)s(et)m(w)m(een)g(the)f(ap)s(erture)g
(and)f(camera)h(and)f Fh(D)j Fl(is)e(the)-128 3495 y(diameter)34
b(of)e(the)h(ap)s(erture.)-128 3615 y(In)g(our)e(exp)s(erimen)m(t)j
(the)f(w)m(orst)f(case)h(v)-5 b(alues)33 b(are)f Fh(\025)27
b Fl(=)h(500)16 b(nm,)32 b Fh(D)f Fl(=)c(20)16 b Fa(\265)p
Fl(m)32 b(and)g Fh(d)c Fg(\031)g Fl(300)16 b(mm)32 b(and)g(giv)m(e)-128
3735 y Fh(\032)-78 3750 y Ff(s)-13 3735 y Fl(=)c(9)p
Fh(:)p Fl(15)16 b(mm)33 b(whic)m(h)h(is)f(greater)g(than)f(b)s(oth)h
(the)g(heigh)m(t)g(and)g(the)g(width)g(of)f(the)h(sensor)h(\(4)22
b Fg(\002)g Fl(6mm)q(\))19 3857 y(The)41 b(second)g(assumption)g(helds)
h(if)e(air)f(is)i(considered)h(a)e(non)g(disp)s(ersiv)m(e)i(medium,)i
(whic)m(h)d(is)g(true)-128 3977 y(throughout)33 b(this)g(discussion)
-128 4274 y Fi(4.2)136 b(Diagram)-128 4523 y Fk(5)162
b(Results)-128 4773 y Fi(5.1)136 b(Simple)45 b(case)-128
5023 y Fk(6)162 b(Conclusions)-128 5273 y Fi(6.1)136
b(Impro)l(v)l(emen)l(ts)-128 5461 y Fl(As)29 b(a)g(tec)m(hnical)h
(impro)m(v)m(emen)m(t)h(corner)e(cub)s(e)g(rectrore\015ector)g(ma)m(y)h
(b)s(e)e(used)i(for)e(a)g(b)s(etter)h(alignmen)m(t)g(and)-128
5581 y(less)34 b(sensibilit)m(y)i(to)c(the)h(mirrors)g(mo)m(v)m(emen)m
(t.)19 5703 y(The)e(use)g(of)f(corner)h(cub)s(e)g(retrore\015ectors,)h
(dep)s(ending)g(on)e(the)g(kind)i(emplo)m(y)m(ed,)h(ma)m(y)e(lead)g(to)
e(parit)m(y)-128 5823 y(problems,)k(as)e(the)g(b)s(eam)g(ma)m(y)g(not)g
(re\015ect)g(the)g(same)h(n)m(um)m(b)s(er)g(of)e(times)i(in)f(b)s(oth)f
(arms.)44 b(In)31 b(our)f(system,)-128 5943 y(though,)i(this)f(is)g
(not)g(a)f(problem,)i(as)f(the)g(presence)i(of)d(the)i(pinhole)f
(eliminate)h(an)m(y)f(symmetry)i(problem.)p 0 TeXcolorgray
1856 6192 a(5)p 0 TeXcolorgray eop end
%%Page: 6 12
TeXDict begin 6 11 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 19 -28 a Fl(T)-8 b(o)44 b(eliminate)i(the)f(needs)h(of)e
(a)h(n)m(umerical)h(phase)f(correction)h(there)f(are)g(t)m(w)m(o)g(p)s
(ossible)h(w)m(a)m(ys.)81 b(A)-128 92 y(solution)41 b(is)g(to)f(remo)m
(v)m(e)i(the)e(\014lter)h(and)f(substitute)i(the)f(\014rst)g(b)s
(eamsplitter)g(with)g(one)g(whic)m(h)g(con)m(v)m(eys)-128
213 y(more)g(energy)f(to)g(the)g(reference)i(arm)e(than)f(to)h(the)g
(test)h(arm.)65 b(T)-8 b(o)40 b(obtain)g(a)f(disrete)i(fringe)f(con)m
(trast,)-128 333 y(though,)g(the)e(energy)h(in)f(the)g(t)m(w)m(o)h
(arms)f(should)h(b)s(e)f(as)g(similar)g(as)g(p)s(ossible.)61
b(Giv)m(en)39 b(the)f(fact)f(that)h(w)m(e)-128 454 y(obtained)45
b(go)s(o)s(d)e(fringes)i(con)m(trast)g(with)f(a)g(stac)m(k)i(of)d(hea)m
(vy)j(\(ND)d(up)i(to)f(optical)g(densit)m(y)i Fh(d)h
Fl(=)g(5\),)g(it)-128 574 y(means)38 b(that)d(w)m(e)j(need)f(a)f(b)s
(eamsplitter)h(whic)m(h)h(transmit)e(10)2203 538 y Fd(\000)p
Fe(5)2333 574 y Fl(of)g(the)g(inciden)m(t)i(in)m(tensit)m(y)g(and)f
(re\015ects)-128 694 y(the)30 b(remaining)h(\()p Fg(')d
Fl(1\).)42 b(Another)30 b(solution)g(is)g(to)g(balance)g(the)g(t)m(w)m
(o)g(arms)g(b)m(y)h(adding)f(a)f(slab)h(of)f(the)h(same)-128
815 y(material)j(and)g(thic)m(kness)i(of)d(the)h(ND)g(\014lter)g(in)f
(the)h(test)h(arm.)19 935 y(Both)43 b(solutions)h(lead)f(to)g(the)g
(generation)g(of)g(a)g(in)m(terferogram)g(with)h(thinner)f(fringes.)76
b(This)44 b(is)f(a)-128 1056 y(problem)g(b)s(ecause)f(the)g(attuator)e
(w)m(e)j(used)f(in)g(the)f(esp)s(erimen)m(t)j(has)d(a)g(minim)m(um)i
(step)g(of)d(47)p Fh(:)p Fl(625)16 b(nm,)-128 1176 y(whic)m(h)35
b(is)e(not)f(enough)h(small)g(for)f(the)h(resolution)h(required)g(b)m
(y)f(the)g(new)h(in)m(terferogram.)19 1296 y(***)e(form)m(ula)g(p)s(er)
h(calcolare)g(il)g(minimo)g(step)g(ric)m(hiesto)i(***)-128
1585 y Fi(6.2)136 b(Summary)p 0 TeXcolorgray 1856 6192
a Fl(6)p 0 TeXcolorgray eop end
%%Page: 7 13
TeXDict begin 7 12 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -128 -28 a Fk(References)p 0 TeXcolorgray
-79 191 a Fl([1])p 0 TeXcolorgray 49 w(T)-8 b(am)m(ura,)29
b(K.,)f(et)f(al.)g("77-fs)f(pulse)i(generation)g(from)e(a)h(stretc)m
(hed-pulse)j(mo)s(de-lo)s(c)m(k)m(ed)e(all-\014b)s(er)f(ring)73
311 y(laser.")33 b(Optics)g(letters)h(18.13)e(\(1993\):)42
b(1080-1082.)p 0 TeXcolorgray -79 515 a([2])p 0 TeXcolorgray
49 w(Sc)m(hriev)m(er,)30 b(Christian,)f(et)e(al.)f("T)-8
b(unable)27 b(pulses)h(from)f(b)s(elo)m(w)g(300)f(to)g(970)f(nm)i(with)
g(durations)g(do)m(wn)73 635 y(to)i(14)f(fs)i(based)g(on)f(a)g(2)g(MHz)
h(ytterbium-dop)s(ed)g(\014b)s(er)g(system.")h(Optics)f(letters)g(33.2)
f(\(2008\):)40 b(192-)73 756 y(194.)p 0 TeXcolorgray
-79 959 a([3])p 0 TeXcolorgray 49 w(Y)-8 b(u,)32 b(T)-8
b(ae)32 b(Jun,)h(et)f(al.)f("Generation)h(of)f(high-con)m(trast,)i(30)e
(fs,)h(1.5)g(PW)g(laser)g(pulses)i(from)d(c)m(hirp)s(ed-)73
1079 y(pulse)j(ampli\014cation)f(Ti:)44 b(sapphire)34
b(laser.")f(Optics)g(express)i(20.10)d(\(2012\):)42 b(10807-10815.)p
0 TeXcolorgray -79 1283 a([4])p 0 TeXcolorgray 49 w(Bor,)c(Zsolt.)f
("Distortion)f(of)h(fem)m(tosecond)i(laser)e(pulses)i(in)e(lenses.")i
(Optics)f(letters)g(14.2)e(\(1989\):)73 1403 y(119-121.)p
0 TeXcolorgray -79 1607 a([5])p 0 TeXcolorgray 49 w(Miranda,)i(Miguel,)
h(et)e(al.)f("Spatiotemp)s(oral)h(c)m(haracterization)h(of)e
(ultrashort)h(laser)g(pulses)h(using)73 1727 y(spatially)27
b(resolv)m(ed)i(F)-8 b(ourier)26 b(transform)h(sp)s(ectrometry)-8
b(.")28 b(Optics)g(letters)f(39.17)f(\(2014\):)39 b(5142-5145.)p
0 TeXcolorgray -79 1930 a([6])p 0 TeXcolorgray 49 w(W)-8
b(almsley)g(,)31 b(Ian)f(A.,)g(and)f(Christophe)h(Dorrer.)f
("Characterization)h(of)e(ultrashort)i(electromagnetic)73
2051 y(pulses.")k(Adv)-5 b(ances)34 b(in)f(Optics)g(and)g(Photonics)h
(1.2)e(\(2009\):)42 b(308-437.)p 0 TeXcolorgray -79 2254
a([7])p 0 TeXcolorgray 49 w(Witting,)34 b(T)-8 b(obias,)34
b(et)g(al.)f("Characterization)h(of)f(high-in)m(tensit)m(y)i(sub-4-fs)e
(laser)h(pulses)h(using)f(spa-)73 2375 y(tially)f(enco)s(ded)h(sp)s
(ectral)f(shearing)g(in)m(terferometry)-8 b(.")34 b(Optics)g(letters)f
(36.9)f(\(2011\):)43 b(1680-1682.)p 0 TeXcolorgray -79
2578 a([8])p 0 TeXcolorgray 49 w(T)-8 b(rebino,)42 b(Ric)m(k,)g(and)d
(Daniel)g(J.)g(Kane.)g("Using)h(phase)g(retriev)-5 b(al)40
b(to)f(measure)h(the)g(in)m(tensit)m(y)h(and)73 2698
y(phase)31 b(of)e(ultrashort)i(pulses:)44 b(frequency-resolv)m(ed)33
b(optical)d(gating.")g(JOSA)g(A)g(10.5)f(\(1993\):)42
b(1101-)73 2819 y(1111.)p 0 TeXcolorgray 1856 6192 a(7)p
0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
